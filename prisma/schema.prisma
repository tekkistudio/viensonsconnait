// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Order {
  id            String      @id @default(cuid())
  items         Json        // Stocke le tableau d'OrderItem
  customerInfo  Json        // Stocke les informations client
  subtotal      Float
  deliveryCost  Float      @default(0)
  totalAmount   Float
  paymentMethod String
  status        OrderStatus @default(PENDING)
  metadata      Json?       // Stocke les métadonnées de transaction
  conversationId String?    // Lien optionnel vers la conversation
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  notifications Notification[] // Relation avec les notifications

  @@index([status])
  @@map("orders")
}

model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String
  city      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phone])
  @@map("customers")
}

model PaymentTransaction {
  id            String          @id @default(cuid())
  orderId       String
  amount        Float
  currency      String          @default("XOF")
  provider      PaymentProvider
  status        PaymentStatus   @default(PENDING)
  reference     String?         // Référence de transaction Bictorys
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([orderId])
  @@index([status])
  @@map("payment_transactions")
}

model Notification {
  id        String      @id @default(cuid())
  title     String
  content   String
  type      NotificationType
  priority  Priority    @default(MEDIUM)
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String
  read      Boolean    @default(false)
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([orderId])
  @@index([read])
  @@map("notifications")
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  WAVE
  ORANGE_MONEY
  STRIPE
}

enum NotificationType {
  ORDER_CREATED
  PAYMENT_RECEIVED
  ORDER_SHIPPED
  ORDER_DELIVERED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}