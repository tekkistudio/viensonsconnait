// app/api/chat/route.ts - VERSION CORRIG√âE AVEC MEILLEURE GESTION OPENAI
import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
import OpenAI from "openai";
import { OptimizedChatService } from "@/lib/services/OptimizedChatService";
import { AIResponseHandler } from "@/lib/services/AIResponseHandler";

import type {
  ConversationStep,
  ChatMessage,
  AIResponse,
  ProductId,
  MessageType,
  CustomerMessage,
  ChatOrderData
} from '@/types/chat';

// ‚úÖ CORRECTION: Gestion d'erreur OpenAI am√©lior√©e
let openaiClient: OpenAI | null = null;

function initializeOpenAI(): OpenAI | null {
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY is not configured');
    return null;
  }

  try {
    return new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      maxRetries: 2,
      timeout: 30000, // 30 secondes
    });
  } catch (error) {
    console.error('‚ùå Failed to initialize OpenAI:', error);
    return null;
  }
}

// Initialiser OpenAI au d√©marrage
if (!openaiClient) {
  openaiClient = initializeOpenAI();
}

const WHATSAPP_LINK = "https://wa.me/221781362728";

const corsHeaders = {
  'Cache-Control': 'no-store',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type'
};

interface ExtendedChatRequest {
  message: string;
  productId: ProductId;
  currentStep?: ConversationStep;
  orderData?: Partial<ChatOrderData>;  
  sessionId: string;
  storeId: string;
}

// ‚úÖ FONCTION UTILITAIRE: Cr√©er une r√©ponse d'erreur standardis√©e
function createErrorResponse(
  message: string = "Je rencontre un probl√®me technique. Voulez-vous r√©essayer ?",
  choices: string[] = ["üîÑ R√©essayer", "üìû Contacter le support"]
): AIResponse {
  return {
    content: `üòî **Probl√®me temporaire**

${message}

Notre √©quipe technique travaille √† r√©soudre cela. Vous pouvez :`,
    type: "assistant",
    choices,
    nextStep: 'error_recovery' as ConversationStep,
    error: 'technical_error'
  };
}

// ‚úÖ FONCTION: Valider la requ√™te
function validateChatRequest(requestData: any): { isValid: boolean; error?: string } {
  if (!requestData.message || typeof requestData.message !== 'string') {
    return { isValid: false, error: 'Message requis' };
  }

  if (!requestData.productId || typeof requestData.productId !== 'string') {
    return { isValid: false, error: 'ProductId requis' };
  }

  if (!requestData.sessionId || typeof requestData.sessionId !== 'string') {
    return { isValid: false, error: 'SessionId requis' };
  }

  return { isValid: true };
}

// ‚úÖ FONCTION PRINCIPALE CORRIG√âE
export async function POST(req: Request) {
  try {
    console.log('üì® API Chat: Nouvelle requ√™te re√ßue');

    // Parse et validation de la requ√™te
    let requestData: ExtendedChatRequest;
    try {
      requestData = await req.json();
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      return NextResponse.json(
        createErrorResponse("Format de requ√™te invalide"),
        { status: 400, headers: corsHeaders }
      );
    }

    // Validation des donn√©es
    const validation = validateChatRequest(requestData);
    if (!validation.isValid) {
      console.error('‚ùå Validation √©chou√©e:', validation.error);
      return NextResponse.json(
        createErrorResponse(validation.error || "Donn√©es invalides"),
        { status: 400, headers: corsHeaders }
      );
    }

    const { 
      message, 
      productId, 
      currentStep = 'initial', 
      orderData, 
      sessionId,
      storeId 
    } = requestData;

    console.log('üìù Donn√©es valid√©es:', {
      message: message.substring(0, 50) + '...',
      productId,
      currentStep,
      sessionId
    });

    // ‚úÖ CORRECTION: V√©rification OpenAI avant utilisation
    if (!openaiClient) {
      console.error('‚ùå OpenAI client not available');
      return NextResponse.json(
        createErrorResponse(
          "Service IA temporairement indisponible. Veuillez r√©essayer dans quelques instants.",
          ["üîÑ R√©essayer", "üìû Contacter le support", "üí¨ Parler √† un humain"]
        ),
        { status: 503, headers: corsHeaders }
      );
    }

    // Redirection directe vers WhatsApp si demand√©
    if (message.toLowerCase().includes('parler √† un humain') || 
        message.toLowerCase().includes('contacter le support')) {
      return NextResponse.json({
        content: "Je vous redirige vers notre service client sur WhatsApp...",
        type: "assistant",
        redirectUrl: WHATSAPP_LINK,
        choices: [],
        nextStep: currentStep
      }, { headers: corsHeaders });
    }

    // ‚úÖ CORRECTION: Traitement via OptimizedChatService avec gestion d'erreur
    try {
      const optimizedService = OptimizedChatService.getInstance();
      
      // V√©rifier si c'est une commande express
      if (message.includes('Commander rapidement') || message.includes('‚ö°')) {
        console.log('üöÄ D√©marrage commande express');
        
        const expressResponse = await optimizedService.startExpressPurchase(
          sessionId, 
          productId
        );
        
        console.log('‚úÖ R√©ponse express g√©n√©r√©e');
        return NextResponse.json(expressResponse, { headers: corsHeaders });
      }

      // V√©rifier si nous sommes dans un flow express
      if (currentStep?.includes('express')) {
        console.log('üîÑ Traitement √©tape express:', currentStep);
        
        const expressResponse = await optimizedService.handleExpressStep(
          sessionId,
          message,
          currentStep
        );
        
        console.log('‚úÖ √âtape express trait√©e');
        return NextResponse.json(expressResponse, { headers: corsHeaders });
      }

      // ‚úÖ CORRECTION MAJEURE: Traitement des messages libres avec IA
      console.log('ü§ñ Traitement message libre avec IA');
      
      // V√©rifier si le message contient des choix pr√©d√©finis
      const predefinedChoices = [
        'Je veux l\'acheter maintenant',
        'Je veux voir les t√©moignages',
        'Comment y jouer ?',
        'Je veux en savoir plus',
        'Voir la description du jeu',
        'Voir les t√©moignages',
        'Parler √† un humain',
        'Poser une question',
        'Comment √ßa marche',
        'C\'est pour qui',
        'Quels b√©n√©fices',
        'Avis clients',
        'Infos livraison',
        'En savoir plus'
      ];

      const isPredefinedChoice = predefinedChoices.some(choice => 
        message.includes(choice)
      );

      if (isPredefinedChoice) {
        console.log('üîò Traitement choix pr√©d√©fini');
        
        const choiceResponse = await optimizedService.handlePredefinedChoice(
          sessionId,
          message,
          productId
        );
        
        console.log('‚úÖ Choix pr√©d√©fini trait√©');
        return NextResponse.json(choiceResponse, { headers: corsHeaders });
      }

      // ‚úÖ NOUVEAU: Message libre - utiliser l'IA
      console.log('üß† Traitement message libre avec IA avanc√©e');
      
      try {
        const aiResponse = await optimizedService.processUserInput(
          sessionId,
          message,
          currentStep
        );
        
        console.log('‚úÖ IA: R√©ponse g√©n√©r√©e avec succ√®s');
        return NextResponse.json(aiResponse, { headers: corsHeaders });
        
      } catch (aiError) {
        console.error('‚ùå Erreur IA:', aiError);
        
        // ‚úÖ GESTION SP√âCIFIQUE DES ERREURS OPENAI
        let errorMessage = "Erreur de traitement du message";
        let errorChoices = ["üîÑ R√©essayer", "üìû Contacter le support"];
        
        if (aiError instanceof Error) {
          if (aiError.message.includes('429')) {
            errorMessage = "Trop de demandes simultan√©es. Veuillez patienter quelques secondes.";
            errorChoices = ["‚è∞ Attendre et r√©essayer", "üìû Contacter le support"];
          } else if (aiError.message.includes('quota')) {
            errorMessage = "Service IA temporairement surcharg√©. Essayez dans quelques minutes.";
            errorChoices = ["‚è∞ R√©essayer plus tard", "üìû Contacter le support"];
          } else if (aiError.message.includes('timeout')) {
            errorMessage = "D√©lai d'attente d√©pass√©. Veuillez r√©essayer.";
          }
        }
        
        return NextResponse.json(
          createErrorResponse(errorMessage, errorChoices),
          { status: 503, headers: corsHeaders }
        );
      }

    } catch (serviceError) {
      console.error('‚ùå Erreur OptimizedChatService:', serviceError);
      
      return NextResponse.json(
        createErrorResponse(
          "Erreur lors du traitement de votre demande. Nos √©quipes sont notifi√©es.",
          ["üîÑ R√©essayer", "üìû Contacter le support", "üí¨ Parler √† un humain"]
        ),
        { status: 500, headers: corsHeaders }
      );
    }

  } catch (error) {
    console.error("‚ùå Erreur API g√©n√©rale:", error);
    
    // Log d√©taill√© pour debug
    console.error("D√©tails de l'erreur:", {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : 'No stack trace',
      timestamp: new Date().toISOString()
    });
    
    return NextResponse.json(
      createErrorResponse(
        "Erreur syst√®me. Nos √©quipes techniques sont notifi√©es.",
        ["üîÑ R√©essayer", "üìû Contacter le support", "üí¨ WhatsApp"]
      ),
      { status: 500, headers: corsHeaders }
    );
  }
}

export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders });
}