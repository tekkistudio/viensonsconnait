// app/api/chat/DashboardManager.ts - VERSION AM√âLIOR√âE AVEC GPT-4o
import OpenAI from "openai";
import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";

const RESPONSE_TEMPLATES = {
  noSales: {
    message: "Je vois qu'il n'y a pas encore eu de ventes aujourd'hui. Ne vous inqui√©tez pas, c'est normal au d√©but de l'e-commerce. Analysons ensemble comment am√©liorer votre visibilit√© et attirer plus de clients.",
    insights: [
      "La vente en ligne demande souvent un temps d'adaptation",
      "La qualit√© des photos est cruciale pour attirer les clients",
      "La confiance se construit progressivement en ligne"
    ],
    actions: [
      "Prenez de nouvelles photos de vos produits sous diff√©rents angles",
      "Ajoutez des t√©moignages de clients satisfaits",
      "Partagez votre histoire et votre expertise sur votre page"
    ]
  },
  lowSales: (amount: string) => ({
    message: `Avec ${amount} de ventes aujourd'hui, nous pouvons encore faire mieux ! Voulez-vous que nous regardions ensemble comment augmenter vos ventes ?`,
    insights: [
      "Vos clients appr√©cient la qualit√© de vos produits",
      "Le paiement mobile (Wave, Orange Money) rassure vos clients",
      "Les avis clients positifs augmentent la confiance"
    ],
    actions: [
      "Proposez une petite promotion pour les premiers acheteurs",
      "Contactez vos clients fid√®les pour leur pr√©senter votre boutique",
      "Mettez en avant vos produits les plus populaires"
    ]
  }),
  goodSales: (amount: string) => ({
    message: `F√©licitations ! Vos ventes de ${amount} aujourd'hui sont tr√®s encourageantes. Continuons sur cette lanc√©e !`,
    insights: [
      "Vos efforts de pr√©sentation portent leurs fruits",
      "La confiance de vos clients en ligne grandit",
      "Votre r√©putation se d√©veloppe progressivement"
    ],
    actions: [
      "Pensez √† r√©approvisionner vos stocks populaires",
      "Demandez des avis √† vos clients satisfaits",
      "√âlargissez votre gamme de produits populaires"
    ]
  })
};

// ‚úÖ AM√âLIORATION: Initialisation OpenAI s√©curis√©e
const initOpenAI = () => {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY is not configured in environment variables');
    throw new Error('OpenAI API key is not configured');
  }
  
  console.log('‚úÖ OpenAI initialized for Dashboard with GPT-4o');
  return new OpenAI({ apiKey });
};

const formatCurrency = (amount: number): string => {
  return `${amount.toLocaleString('fr-FR')} FCFA`;
};

const getContextSpecificMetrics = (page: string, data: any) => {
  const baseMetrics = {
    ...data,
    dailySales: formatCurrency(data?.dailySales || 0)
  };

  switch (page.toLowerCase()) {
    case 'dashboard':
      return {
        ...baseMetrics,
        conversionRate: `${(data?.conversionRate || 0).toFixed(2)}%`,
        previousPeriodComparison: data?.previousPeriod ? {
          sales: formatCurrency(data?.previousPeriod?.sales || 0),
          growth: `${((data?.dailySales - data?.previousPeriod?.sales) / data?.previousPeriod?.sales * 100).toFixed(2)}%`
        } : null
      };
    case 'orders':
      return {
        ...baseMetrics,
        pendingOrders: data?.orderStatuses?.pending || 0,
        processingOrders: data?.orderStatuses?.processing || 0,
        averageOrderValue: formatCurrency(data?.averageOrderValue || 0)
      };
    case 'products':
      return {
        ...baseMetrics,
        lowStock: data?.lowStockProducts || [],
        popularProducts: data?.popularProducts || [],
        stockValue: formatCurrency(data?.stockValue || 0)
      };
    default:
      return baseMetrics;
  }
};

export class DashboardManager {
  static async handleChatRequest(message: string, context: any) {
    try {
      const openai = initOpenAI();
      console.log('üîÑ Processing dashboard request with context:', context?.page);

      const formattedData = getContextSpecificMetrics(context?.page || 'dashboard', context?.data || {});
      
      // ‚úÖ AM√âLIORATION: Extraction s√©curis√©e du montant des ventes
      let salesAmount = '0 FCFA';
      try {
        salesAmount = formattedData.dailySales || '0 FCFA';
      } catch (e) {
        console.error('‚ùå Error extracting sales amount:', e);
        salesAmount = '0 FCFA';
      }

      // ‚úÖ AM√âLIORATION: Obtenir la r√©ponse de base
      const salesLevel = this.getSalesLevel(salesAmount);
      const baseResponse = this.getBaseResponse(salesLevel, salesAmount);

      // ‚úÖ PROMPT AM√âLIOR√â POUR GPT-4o
      const systemPrompt = `Tu es un Assistant Business IA expert en e-commerce africain. Tu accompagnes les marchands dans leur transition num√©rique.

CONTEXTE MARCHAND :
Page actuelle : ${context?.page || 'Dashboard'}
Donn√©es de performance : ${JSON.stringify(formattedData, null, 2)}

R√âPONSE DE BASE √Ä ENRICHIR :
${JSON.stringify(baseResponse, null, 2)}

TON EXPERTISE :
- E-commerce en Afrique francophone
- Paiements mobiles (Wave, Orange Money, MTN)
- WhatsApp Business et r√©seaux sociaux
- Photos produits et pr√©sentation
- Fid√©lisation client africaine

R√àGLES DE COMMUNICATION :
1. Parle comme un ami qui conna√Æt bien le business
2. Utilise UNIQUEMENT le FCFA comme devise
3. Donne des exemples concrets et locaux
4. Sois encourageant et pratique
5. √âvite le jargon technique

CONSEILS PRIORITAIRES :
- Comment am√©liorer les photos produits avec un smartphone
- Strat√©gies WhatsApp Business efficaces
- Gestion des avis clients et bouche-√†-oreille
- Optimisation pour les paiements mobiles

R√âPONSE REQUISE (JSON) :
{
  "message": "R√©ponse personnalis√©e, chaleureuse et actionnable",
  "conseils": ["2-3 conseils pratiques sp√©cifiques"],
  "actions": ["Actions prioritaires √† faire maintenant"],
  "points_cles": ["Points importants √† retenir"],
  "suggestions_questions": ["Questions de suivi pertinentes"]
}

MESSAGE DU MARCHAND : "${message}"

Adapte ta r√©ponse selon leur niveau et sois toujours positif !`;

      console.log('ü§ñ Sending to GPT-4o for dashboard analysis...');

      // ‚úÖ AM√âLIORATION: Utilisation de GPT-4o
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: message
          }
        ],
        temperature: 0.7,
        max_tokens: 600,
        response_format: { type: "json_object" }
      });

      const aiResponse = JSON.parse(completion.choices[0]?.message?.content || "{}");
      
      console.log('‚úÖ GPT-4o dashboard response generated');

      // ‚úÖ AM√âLIORATION: Combinaison intelligente des r√©ponses
      const finalResponse = {
        content: aiResponse.message || baseResponse.message,
        type: 'assistant',
        insights: aiResponse.points_cles || baseResponse.insights,
        actions: aiResponse.actions || baseResponse.actions,
        suggestions: aiResponse.suggestions_questions || [
          "Comment am√©liorer mes photos produits ?",
          "Comment utiliser WhatsApp Business efficacement ?",
          "Comment fid√©liser mes clients en ligne ?"
        ]
      };

      // ‚úÖ AM√âLIORATION: Sauvegarde am√©lior√©e
      try {
        await supabase.from('chat_messages').insert([{
          content: message,
          response: JSON.stringify(finalResponse),
          type: 'dashboard',
          context: {
            page: context?.page,
            salesLevel: salesLevel,
            timestamp: new Date().toISOString()
          },
          created_at: new Date().toISOString()
        }]);
        console.log('‚úÖ Dashboard interaction saved');
      } catch (error) {
        console.error('‚ö†Ô∏è Error saving chat message:', error);
      }

      return NextResponse.json(finalResponse);

    } catch (error) {
      console.error('‚ùå Dashboard AI Error:', error);
      
      // ‚úÖ AM√âLIORATION: Gestion d'erreur plus robuste
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      const isConfigError = errorMessage.includes('OpenAI API key');
      
      return NextResponse.json({
        content: isConfigError 
          ? "Configuration technique en cours. Voici mes conseils bas√©s sur votre situation :"
          : "Probl√®me technique temporaire. Laissez-moi vous donner quelques conseils pratiques :",
        type: 'assistant',
        insights: [
          "V√©rifiez r√©guli√®rement vos performances de vente",
          "Les photos de qualit√© augmentent les ventes de 40%",
          "WhatsApp Business est essentiel en Afrique"
        ],
        actions: [
          "Prenez de meilleures photos de vos produits",
          "Activez WhatsApp Business",
          "Demandez des avis √† vos clients"
        ],
        suggestions: [
          "Comment prendre de meilleures photos ?",
          "Configurer WhatsApp Business",
          "R√©essayer l'assistant IA"
        ],
        error: isConfigError ? 'CONFIG_ERROR' : 'TEMPORARY_ERROR'
      }, { 
        status: isConfigError ? 500 : 200,
        headers: {
          'Cache-Control': 'no-store'
        }
      });
    }
  }

  // ‚úÖ AM√âLIORATION: M√©thodes privates plus robustes
  private static getSalesLevel(salesString: string): 'noSales' | 'lowSales' | 'goodSales' {
    try {
      const amount = parseInt(salesString.replace(/[^\d]/g, ''));
      if (isNaN(amount) || amount === 0) return 'noSales';
      if (amount < 50000) return 'lowSales';
      return 'goodSales';
    } catch (e) {
      console.error('‚ùå Error in getSalesLevel:', e);
      return 'noSales';
    }
  }

  private static getBaseResponse(salesLevel: 'noSales' | 'lowSales' | 'goodSales', salesAmount: string) {
    try {
      switch (salesLevel) {
        case 'noSales':
          return RESPONSE_TEMPLATES.noSales;
        case 'lowSales':
          return RESPONSE_TEMPLATES.lowSales(salesAmount);
        case 'goodSales':
          return RESPONSE_TEMPLATES.goodSales(salesAmount);
        default:
          return RESPONSE_TEMPLATES.noSales;
      }
    } catch (e) {
      console.error('‚ùå Error in getBaseResponse:', e);
      return RESPONSE_TEMPLATES.noSales;
    }
  }
}