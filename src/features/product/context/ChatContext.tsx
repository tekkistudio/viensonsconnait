// src/features/product/context/ChatContext.tsx - VERSION CORRIG√âE

'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';
import { useChatStore } from '@/stores/chatStore';
import { OptimizedChatService } from '@/lib/services/OptimizedChatService';
import type { ChatMessage, ConversationStep } from '@/types/chat';
import type { Product } from '@/types/product';

interface ChatContextType {
  // √âtat du chat
  messages: ChatMessage[];
  isTyping: boolean;
  currentStep: ConversationStep | null;
  isExpressMode: boolean;
  
  // Actions
  sendMessage: (message: string) => Promise<void>;
  startExpressPurchase: () => Promise<void>;
  initializeChat: () => Promise<void>;
  
  // Donn√©es produit
  product: Product;
  
  // Gestion des erreurs
  error: string | null;
  clearError: () => void;
}

const ChatContext = createContext<ChatContextType | null>(null);

interface ChatProviderProps {
  children: React.ReactNode;
  product: Product;
}

export function ChatProvider({ children, product }: ChatProviderProps) {
  const chatStore = useChatStore();
  const [error, setError] = useState<string | null>(null);
  const [optimizedService] = useState(() => OptimizedChatService.getInstance());
  const [isInitialized, setIsInitialized] = useState(false);

  // Initialiser le chat au montage
  useEffect(() => {
    if (!isInitialized && product.id) {
      initializeChat();
      setIsInitialized(true);
    }
  }, [product.id, isInitialized]);

  const initializeChat = async () => {
    try {
      setError(null);
      
      // V√©rifier si le chat est d√©j√† initialis√©
      if (chatStore.messages.length > 0) {
        console.log('Chat d√©j√† initialis√©, pas de nouveau message de bienvenue');
        return;
      }
      
      // Initialiser une nouvelle session
      chatStore.initializeSession(product.id, 'a9563f88-217c-4998-b080-ed39f637ea31');
      
      // Message de bienvenue
      const welcomeMessage: ChatMessage = {
        type: 'assistant',
        content: `üëã Bonjour ! Je suis **Rose**, votre assistante d'achat.\n\nJe vois que vous vous int√©ressez √† notre jeu **${product.name}** ! C'est excellent ‚ú®\n\n  Je peux :\n‚Ä¢ Vous aider √† **commander rapidement** (moins de 60 secondes)\n‚Ä¢ **R√©pondre √† vos questions**\n‚Ä¢ **Vous expliquer** comment y jouer\n\nQue souhaitez-vous faire ?`,
        choices: [
          '‚ö° Commander rapidement',
          '‚ùì Poser une question',
          'üì¶ Infos livraison',
          'üí¨ En savoir plus'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat',
          avatar: undefined
        },
        metadata: {
          nextStep: 'initial_engagement' as ConversationStep,
          flags: { 
            isWelcome: true,
            preventAIIntervention: true
          }
        },
        timestamp: new Date().toISOString()
      };

      chatStore.addMessage(welcomeMessage);
      
    } catch (err) {
      console.error('Error initializing chat:', err);
      setError('Erreur lors de l\'initialisation du chat');
    }
  };

  const sendMessage = async (message: string) => {
    try {
      setError(null);
      chatStore.updateTypingStatus(true);

      // Ajouter le message utilisateur
      const userMessage: ChatMessage = {
        type: 'user',
        content: message,
        timestamp: new Date().toISOString()
      };
      
      chatStore.addMessage(userMessage);

      // D√©terminer le type de r√©ponse
      let response: ChatMessage;
      
      // Si c'est un choix pour le mode express
      if (message.includes('Commander rapidement') || message.includes('‚ö°')) {
        // ‚úÖ CORRECTION: Utiliser startExpressPurchase au lieu de handleExpressPurchase
        response = await optimizedService.startExpressPurchase(
          chatStore.sessionId,
          product.id
        );
        chatStore.setExpressMode(true);
      } else if (chatStore.isExpressMode && chatStore.currentStep?.includes('express')) {
        // ‚úÖ CORRECTION: Utiliser processUserInput pour les √©tapes express
        response = await optimizedService.processUserInput(
          chatStore.sessionId,
          message,
          chatStore.currentStep
        );
      } else {
        // ‚úÖ CORRECTION: Utiliser processUserInput pour les autres messages
        response = await optimizedService.processUserInput(
          chatStore.sessionId,
          message,
          chatStore.currentStep || 'initial'
        );
      }

      // Ajouter la r√©ponse
      chatStore.addMessage(response);
      
    } catch (err) {
      console.error('Error sending message:', err);
      setError('Erreur lors de l\'envoi du message');
      
      // Message d'erreur de secours
      const errorMessage: ChatMessage = {
        type: 'assistant',
        content: 'Je suis d√©sol√©e, une erreur est survenue. Veuillez r√©essayer.',
        choices: ['R√©essayer', 'Contacter le support'],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'error_recovery' as ConversationStep,
          flags: { hasError: true }
        },
        timestamp: new Date().toISOString()
      };
      
      chatStore.addMessage(errorMessage);
    } finally {
      chatStore.updateTypingStatus(false);
    }
  };

  const startExpressPurchase = async () => {
    try {
      setError(null);
      chatStore.setExpressMode(true);
      
      // ‚úÖ CORRECTION: Utiliser startExpressPurchase
      const response = await optimizedService.startExpressPurchase(
        chatStore.sessionId,
        product.id
      );
      
      chatStore.addMessage(response);
      
    } catch (err) {
      console.error('Error starting express purchase:', err);
      setError('Erreur lors du d√©marrage de l\'achat express');
    }
  };

  const clearError = () => {
    setError(null);
    chatStore.resetError();
  };

  const contextValue: ChatContextType = {
    // √âtat du chat
    messages: chatStore.messages,
    isTyping: chatStore.isTyping,
    currentStep: chatStore.currentStep,
    isExpressMode: chatStore.isExpressMode,
    
    // Actions
    sendMessage,
    startExpressPurchase,
    initializeChat,
    
    // Donn√©es produit
    product,
    
    // Gestion des erreurs
    error,
    clearError
  };

  return (
    <ChatContext.Provider value={contextValue}>
      {children}
    </ChatContext.Provider>
  );
}

export function useChatContext() {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChatContext must be used within a ChatProvider');
  }
  return context;
}

export default ChatContext;