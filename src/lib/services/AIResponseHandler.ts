// src/lib/services/AIResponseHandler.ts - VERSION CORRIG√âE
import type { ChatMessage, ConversationStep } from '@/types/chat';
import DynamicContentService from './DynamicContentService';
import PersuasiveAIService from './PersuasiveAIService';
import { supabase } from '@/lib/supabase';

interface AIResponseContext {
  productId: string;
  productName: string;
  sessionId: string;
  isExpressMode: boolean;
  currentStep?: ConversationStep;
  userMessage: string;
  conversationHistory: ChatMessage[];
}

interface UserIntent {
  type: string;
  confidence: number;
  keywords: string[];
  details?: any;
}

interface PersuasionContext {
  userMessage: string;
  productId: string;
  productName: string;
  userIntent: 'browsing' | 'interested' | 'considering' | 'ready_to_buy';
  concerns: string[];
  interests: string[];
  messageCount: number;
  priceRange?: number;
}

// ‚úÖ CORRECTION: Type strict pour les defaults
type DefaultContentKeys = 'description' | 'benefits' | 'usage' | 'testimonials' | 'target';

interface DefaultContent {
  description: string;
  benefits: string;
  usage: string;
  testimonials: string;
  target: string;
}

export class AIResponseHandler {
  private static instance: AIResponseHandler;
  private dynamicContentService = DynamicContentService.getInstance();
  private persuasiveService = PersuasiveAIService.getInstance();

  private constructor() {}

  public static getInstance(): AIResponseHandler {
    if (!this.instance) {
      this.instance = new AIResponseHandler();
    }
    return this.instance;
  }

  // ‚úÖ M√âTHODE PRINCIPALE POUR TRAITER LES QUESTIONS LIBRES
  async handleFreeTextMessage(context: AIResponseContext): Promise<ChatMessage> {
    console.log('ü§ñ Processing free text with enhanced AI:', context.userMessage);

    try {
      // Analyser l'intention de l'utilisateur
      const intent = this.analyzeUserIntent(context.userMessage);
      console.log('üéØ Detected intent:', intent);

      // Traiter selon l'intention d√©tect√©e
      switch (intent.type) {
        case 'purchase_intent':
          return this.handlePurchaseIntent(context);
        
        case 'product_question':
          return this.handleProductQuestion(context, intent);
        
        case 'price_question':
          return this.handlePriceQuestion(context);
        
        case 'delivery_question':
          return this.handleDeliveryQuestion(context);
        
        case 'testimonials_request':
          return this.handleTestimonialsRequest(context);
        
        case 'support_request':
          return this.handleSupportRequest(context);
        
        case 'greeting':
          return this.handleGreeting(context);
        
        case 'objection':
          return this.handleObjection(context);
        
        default:
          return this.generateContextualResponse(context);
      }

    } catch (error) {
      console.error('‚ùå Error in handleFreeTextMessage:', error);
      return this.createErrorResponse(context);
    }
  }

  // ‚úÖ GESTION DES BOUTONS POST-ACHAT
  async handlePostPurchaseAction(action: string, orderId?: string): Promise<ChatMessage> {
    const normalizedAction = action.toLowerCase();
    
    if (normalizedAction.includes('suivre') || normalizedAction.includes('commande')) {
      return {
        type: 'assistant',
        content: `üì¶ **Suivi de votre commande**

${orderId ? `**Commande #${orderId}**` : '**Votre commande**'}

üì± **Comment suivre :**
‚Ä¢ Via WhatsApp au +221 78 136 27 28
‚Ä¢ Par email avec le num√©ro de commande
‚Ä¢ V√©rification du statut en temps r√©el

üìß **Email de confirmation :**
Vous recevrez un email avec tous les d√©tails dans les 5 minutes.

üöö **D√©lai de livraison :**
‚Ä¢ Dakar : 24-48h
‚Ä¢ Autres zones : 2-3 jours ouvrables

Autre chose pour vous aider ?`,
        choices: [
          'üìû WhatsApp (+221 78 136 27 28)',
          'üìß Probl√®me avec l\'email ?',
          'üõçÔ∏è Commander d\'autres jeux',
          '‚ùì Autre question'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante VOSC'
        },
        metadata: {
          nextStep: 'order_tracking' as ConversationStep,
          externalUrl: {
            type: 'whatsapp',
            url: 'https://wa.me/221781362728',
            description: 'WhatsApp pour suivi'
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    if (normalizedAction.includes('changer') || normalizedAction.includes('adresse')) {
      return {
        type: 'assistant',
        content: `üè† **Modification d'adresse**

Pour changer votre adresse de livraison :

üìû **Contactez-nous rapidement :**
‚Ä¢ WhatsApp : +221 78 136 27 28
‚Ä¢ Email : contact@viensonseconnait.com

‚è∞ **Important :**
‚Ä¢ Modification possible avant exp√©dition uniquement
‚Ä¢ D√©lai maximum : 2h apr√®s commande
‚Ä¢ Frais de livraison peuvent changer selon la nouvelle zone

üöÄ **D√©j√† exp√©di√©e ?**
Si votre commande est d√©j√† en route, nous pouvons coordonner avec le livreur.

Voulez-vous nous contacter maintenant ?`,
        choices: [
          'üìû WhatsApp (+221 78 136 27 28)',
          'üìß Envoyer un email',
          '‚ùì Ma commande est-elle exp√©di√©e ?',
          'üîô Retour au menu'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante VOSC'
        },
        metadata: {
          nextStep: 'address_change_request' as ConversationStep,
          externalUrl: {
            type: 'whatsapp',
            url: 'https://wa.me/221781362728',
            description: 'Contacter pour changement d\'adresse'
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    if (normalizedAction.includes('autre question') || normalizedAction.includes('‚ùì')) {
      return {
        type: 'assistant',
        content: `‚ùì **Posez-moi votre question !**

Je suis l√† pour vous aider avec :

üõçÔ∏è **Vos commandes :**
‚Ä¢ Suivi et statut
‚Ä¢ Modifications
‚Ä¢ Probl√®mes de livraison

üéØ **Nos jeux :**
‚Ä¢ Comment jouer
‚Ä¢ Conseils d'utilisation
‚Ä¢ Recommandations personnalis√©es

üí¨ **Support :**
‚Ä¢ Questions techniques
‚Ä¢ Retours et √©changes
‚Ä¢ Garanties

Tapez votre question dans le champ ci-dessous, je vous r√©ponds imm√©diatement !`,
        choices: [
          'üéØ Questions sur les jeux',
          'üì¶ Suivi de commande',
          'üîÑ Retours et √©changes',
          'üìû Parler √† un humain'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante VOSC'
        },
        metadata: {
          nextStep: 'customer_support' as ConversationStep,
          flags: { 
            freeTextEnabled: true,
            supportMode: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // R√©ponse par d√©faut
    return {
      type: 'assistant',
      content: `‚ú® **Comment puis-je vous aider ?**

Je peux vous assister avec :

üì¶ **Vos commandes :** Suivi, modifications, livraison
üéØ **Nos jeux :** Conseils, r√®gles, recommandations  
üí¨ **Support :** Questions techniques, garanties

Que souhaitez-vous faire ?`,
      choices: [
        'üì¶ Suivre ma commande',
        'üõçÔ∏è Commander d\'autres jeux',
        'üîÑ Retours et √©changes',
        'üìû Contacter le support'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'general_support' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ M√âTHODES D'ANALYSE D'INTENTION
  private analyzeUserIntent(message: string): UserIntent {
    const normalizedMessage = message.toLowerCase().trim();
    
    const intentions = {
      purchase_intent: ['acheter', 'commander', 'commande', 'achat', 'prendre', 'veux', 'voudrais', 'int√©ress√©'],
      product_question: ['comment', 'fonctionne', 'marche', 'utilise', 'joue', 'r√®gles', 'principe', 'explication'],
      delivery_question: ['livraison', 'livrer', 'exp√©dition', 'envoi', 'd√©lai', 'combien de temps', 'quand', 'o√π'],
      price_question: ['prix', 'co√ªt', 'coute', 'tarif', 'montant', 'combien'],
      objection: ['cher', 'trop', 'budget', 'pas s√ªr', 'h√©sit', 'doute', 'vraiment', 'efficace'],
      greeting: ['bonjour', 'bonsoir', 'salut', 'hello', 'hi', 'hey', 'coucou'],
      support_request: ['aide', 'aider', 'support', 'probl√®me', 'contact', 'parler', 'humain'],
      testimonials_request: ['avis', 't√©moignage', 'opinion', 'retour', 'exp√©rience', 'efficace']
    };

    let bestMatch: UserIntent = { type: 'generic', confidence: 0, keywords: [] };

    for (const [intentType, keywords] of Object.entries(intentions)) {
      const matchedKeywords = keywords.filter(keyword => 
        normalizedMessage.includes(keyword)
      );
      
      const confidence = matchedKeywords.length / keywords.length;
      
      if (matchedKeywords.length > 0 && confidence > bestMatch.confidence) {
        bestMatch = {
          type: intentType,
          confidence,
          keywords: matchedKeywords
        };
      }
    }

    return bestMatch;
  }

  // ‚úÖ GESTIONNAIRES D'INTENTION
  private async handlePurchaseIntent(context: AIResponseContext): Promise<ChatMessage> {
    return {
      type: 'assistant',
      content: `üéâ **Excellente d√©cision !**

Je vais vous aider √† commander le **${context.productName}** rapidement.

‚ö° **Mode Express :** Commande en moins de 60 secondes
ü§ñ **Mode Guid√© :** Je vous accompagne √©tape par √©tape

Quel mode pr√©f√©rez-vous ?`,
      choices: [
        '‚ö° Mode Express (< 1 min)',
        'ü§ñ Mode Guid√© avec conseils',
        'üí∞ Voir les garanties d\'abord'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'mode_selection',
        flags: { 
          purchaseIntent: true,
          highBuyingIntent: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleProductQuestion(context: AIResponseContext, intent: UserIntent): Promise<ChatMessage> {
    const { productId, productName } = context;
    
    if (intent.keywords.includes('comment') || intent.keywords.includes('fonctionne')) {
      const usageInfo = await this.getGameRulesFromDatabase(productId, productName);
      
      return {
        type: 'assistant',
        content: usageInfo,
        choices: [
          '‚ö° Je commande maintenant',
          '‚≠ê Voir les t√©moignages',
          'üíù Quels b√©n√©fices ?'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante VOSC'
        },
        metadata: {
          nextStep: 'usage_explained',
          flags: { usageExplained: true }
        },
        timestamp: new Date().toISOString()
      };
    }

    // Question g√©n√©rale sur le produit
    const descriptionInfo = await this.dynamicContentService.getProductInfo(productId, 'description');
    
    return {
      type: 'assistant',
      content: descriptionInfo,
      choices: [
        '‚ùì Comment √ßa marche ?',
        'üë• C\'est pour qui ?',
        'üíù Quels b√©n√©fices ?',
        '‚ö° Je commande'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'product_info_detailed'
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handlePriceQuestion(context: AIResponseContext): Promise<ChatMessage> {
    const { productId, productName } = context;
    
    // R√©cup√©rer le prix r√©el
    let price = "15 000";
    try {
      const { data: product } = await supabase
        .from('products')
        .select('price, compare_at_price')
        .eq('id', productId)
        .single();
        
      if (product) {
        price = product.price.toLocaleString();
      }
    } catch (error) {
      console.error('Error fetching price:', error);
    }
    
    return {
      type: 'assistant',
      content: `üí∞ **Prix du ${productName} :**

üéØ **${price} FCFA** - Voici ce qui est inclus :

‚ú® **Contenu :**
‚Ä¢ 100+ cartes de qualit√© premium
‚Ä¢ Guide d'utilisation complet
‚Ä¢ Bo√Æte de rangement √©l√©gante
‚Ä¢ Livraison incluse selon votre zone

üí° **Comparaison :**
‚Ä¢ Restaurant familial = 15 000 FCFA (une soir√©e)
‚Ä¢ Notre jeu = 15 000 FCFA (**des ann√©es** d'utilisation)

üèÜ **Garantie :** 30 jours satisfait ou rembours√©

Voulez-vous le commander maintenant ?`,
      choices: [
        '‚ö° Oui, je commande',
        'üíù Quels b√©n√©fices exactement ?',
        '‚≠ê T√©moignages clients',
        'üí∞ D√©tails de la garantie'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'price_explained',
        flags: { priceExplained: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleDeliveryQuestion(context: AIResponseContext): Promise<ChatMessage> {
    const deliveryInfo = await this.dynamicContentService.getDeliveryInfo();
    
    let deliveryContent = `üöö **Informations de livraison**\n\n`;
    
    if (deliveryInfo && deliveryInfo.zones.length > 0) {
      deliveryContent += `üìç **Zones couvertes :**\n`;
      deliveryInfo.zones.forEach(zone => {
        if (zone.active) {
          const cityName = zone.city || zone.name;
          deliveryContent += `‚Ä¢ ${cityName} : ${zone.cost.toLocaleString()} FCFA\n`;
        }
      });
      
      deliveryContent += `\n‚è∞ **D√©lais :**\n‚Ä¢ ${deliveryInfo.timing}\n\n`;
      deliveryContent += `üí∞ **Paiement :**\n‚Ä¢ Wave\n‚Ä¢ Carte bancaire\n‚Ä¢ Paiement √† la livraison\n\n`;
    } else {
      deliveryContent += `üìç **Zones principales :**\n‚Ä¢ Dakar : Gratuit\n‚Ä¢ Autres villes S√©n√©gal : 3 000 FCFA\n‚Ä¢ Abidjan : 2 500 FCFA\n\n‚è∞ **D√©lais :**\n‚Ä¢ Livraison sous 24-48h\n\nüí∞ **Paiement :**\n‚Ä¢ Wave\n‚Ä¢ Carte bancaire\n‚Ä¢ Paiement √† la livraison\n\n`;
    }
    
    deliveryContent += `Voulez-vous commander maintenant ?`;

    return {
      type: 'assistant',
      content: deliveryContent,
      choices: [
        '‚ö° Commander maintenant',
        'üìû Autres questions',
        'üè† Ma zone de livraison'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'delivery_info_shown'
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleTestimonialsRequest(context: AIResponseContext): Promise<ChatMessage> {
    const testimonialsInfo = await this.dynamicContentService.getProductInfo(context.productId, 'testimonials');
    
    return {
      type: 'assistant',
      content: testimonialsInfo,
      choices: [
        '‚ö° Je veux commander maintenant',
        '‚ùì Comment √ßa marche ?',
        'üíù Quels b√©n√©fices ?',
        'üìû Parler √† un client'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'testimonials_shown',
        flags: { socialProofShown: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleSupportRequest(context: AIResponseContext): Promise<ChatMessage> {
    return {
      type: 'assistant',
      content: `ü§ù **Je suis l√† pour vous aider !**

Vous pouvez :
‚Ä¢ **Me poser vos questions** ici directement
‚Ä¢ **Parler √† un conseiller humain** sur WhatsApp

üìû **Contact direct :**
WhatsApp : +221 78 136 27 28
Email : contact@viensonseconnait.com

‚è∞ **Disponibilit√© :**
‚Ä¢ Lundi √† Vendredi : 9h - 18h
‚Ä¢ Samedi : 9h - 14h
‚Ä¢ Dimanche : Ferm√©

De quoi avez-vous besoin exactement ?`,
      choices: [
        'üìû WhatsApp (+221 78 136 27 28)',
        '‚ùì Poser ma question ici',
        'üìß Envoyer un email',
        '‚ö° Finalement, je veux commander'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'support_request',
        externalUrl: {
          type: 'whatsapp',
          url: 'https://wa.me/221781362728',
          description: 'Contacter sur WhatsApp'
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleGreeting(context: AIResponseContext): Promise<ChatMessage> {
    return {
      type: 'assistant',
      content: `üëã **Bonjour et bienvenue !**

Je suis **Rose**, votre conseill√®re pour le **${context.productName}** !

üî• **Ce jeu est tr√®s populaire** - plus de 200 familles l'ont command√© ce mois-ci !

‚ú® **Je peux vous aider √† :**
‚Ä¢ D√©couvrir comment il fonctionne
‚Ä¢ Comprendre pourquoi il transforme les relations
‚Ä¢ Commander rapidement si √ßa vous int√©resse
‚Ä¢ R√©pondre √† toutes vos questions

Par quoi commen√ßons-nous ?`,
      choices: [
        'üî• Pourquoi est-ce si populaire ?',
        'üíù Quels b√©n√©fices pour moi ?',
        '‚≠ê T√©moignages clients',
        '‚ö° Commander rapidement'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'warm_welcome',
        flags: { isGreeting: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleObjection(context: AIResponseContext): Promise<ChatMessage> {
    return {
      type: 'assistant',
      content: `ü§î **Je comprends vos interrogations !**

Beaucoup de nos clients ont eu les **m√™mes questionnements** avant d'essayer le **${context.productName}**.

üéØ **Ce qui les a rassur√©s :**
‚Ä¢ **Garantie satisfait ou rembours√©** 30 jours
‚Ä¢ **R√©sultats visibles** d√®s la premi√®re utilisation  
‚Ä¢ **1200+ familles satisfaites** dans 12 pays
‚Ä¢ **Support client** disponible 7j/7

‚ú® **Aucun risque :** Si le jeu ne transforme pas vos relations, remboursement **imm√©diat**.

Quelle est votre principale pr√©occupation ?`,
      choices: [
        'üí∞ Le prix me semble √©lev√©',
        'ü§î Est-ce que √ßa marche vraiment ?',
        '‚≠ê Voir les t√©moignages',
        '‚úÖ Je teste sans risque'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'objection_handling',
        flags: { objectionRaised: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ R√âCUP√âRATION S√âCURIS√âE DES R√àGLES DU JEU
  private async getGameRulesFromDatabase(productId: string, productName: string): Promise<string> {
    try {
      const { data: product, error } = await supabase
        .from('products')
        .select('game_rules, name')
        .eq('id', productId)
        .single();

      if (error || !product) {
        return this.getDefaultGameRules(productName);
      }

      if (product.game_rules && product.game_rules.trim()) {
        return `‚ùì **Comment jouer au ${product.name} :**

${product.game_rules}

Pr√™t(e) √† vivre cette exp√©rience ?`;
      } else {
        return this.getDefaultGameRules(productName);
      }

    } catch (error) {
      console.error('‚ùå Error getting game rules:', error);
      return this.getDefaultGameRules(productName);
    }
  }

  private getDefaultGameRules(productName: string): string {
    return `‚ùì **Comment jouer au ${productName} :**

üìã **Pr√©paration :**
‚Ä¢ Installez-vous confortablement dans un endroit calme
‚Ä¢ M√©langez les cartes et placez-les au centre
‚Ä¢ Chacun tire une carte √† tour de r√¥le

üéÆ **D√©roulement :**
‚Ä¢ Lisez la question ou consigne √† voix haute
‚Ä¢ Prenez le temps de r√©fl√©chir avant de r√©pondre
‚Ä¢ √âcoutez attentivement les r√©ponses des autres
‚Ä¢ Pas de jugement, seulement de la bienveillance

‚è∞ **Dur√©e recommand√©e :**
‚Ä¢ 30 √† 60 minutes par session
‚Ä¢ Possibilit√© de jouer plusieurs fois
‚Ä¢ Adaptez selon vos envies

Pr√™t(e) √† commencer cette belle aventure ?`;
  }

  // ‚úÖ R√âPONSE CONTEXTUELLE G√âN√âRIQUE
  private async generateContextualResponse(context: AIResponseContext): Promise<ChatMessage> {
    const { userMessage, productName, conversationHistory } = context;
    const messageCount = conversationHistory.length;

    const isQuestion = userMessage.includes('?') || 
                      userMessage.toLowerCase().startsWith('comment') ||
                      userMessage.toLowerCase().startsWith('pourquoi');

    let response = '';
    let choices: string[] = [];
    let nextStep: ConversationStep = 'generic_response';

    if (isQuestion) {
      response = `ü§î **Excellente question !** 

Je vois que vous vous int√©ressez au jeu **${productName}**. C'est un choix parfait !

‚ú® **Je peux vous expliquer :**
‚Ä¢ Comment utiliser le jeu concr√®tement
‚Ä¢ Les b√©n√©fices que vous allez obtenir  
‚Ä¢ Les t√©moignages de nos clients satisfaits
‚Ä¢ Les d√©tails pratiques (livraison, garantie)

Qu'est-ce qui vous int√©resse le plus ?`;

      choices = [
        '‚ö° Je commande maintenant',
        'üìñ Comment √ßa marche ?',
        '‚≠ê T√©moignages clients',
        'üí∞ Infos sur la garantie'
      ];
      nextStep = 'question_answered';

    } else if (messageCount > 3) {
      response = `üí¨ **Je vois qu'on √©change depuis un moment !**

Cela me fait plaisir de r√©pondre √† vos questions sur le **${productName}**.

ü§ó Voulez-vous que je vous aide √† finaliser votre commande ou avez-vous encore des questions ?`;

      choices = [
        '‚ö° Oui, aidez-moi √† commander',
        '‚ùì J\'ai encore des questions',
        '‚≠ê Voir les t√©moignages',
        'üí∞ D√©tails sur la garantie'
      ];
      nextStep = 'conversion_focus';
    } else {
      response = `üí¨ **Merci pour votre message !**

Je vois que vous vous int√©ressez au **${productName}**. C'est un excellent choix !

Que puis-je vous expliquer pour vous aider dans votre d√©cision ?`;

      choices = [
        '‚ùì Comment √ßa fonctionne ?',
        'üíù Quels b√©n√©fices ?',
        '‚≠ê Avis clients',
        '‚ö° Commander maintenant'
      ];
      nextStep = 'information_gathering';
    }

    return {
      type: 'assistant',
      content: response,
      choices,
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep,
        flags: { contextualResponse: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ GESTION D'ERREUR AM√âLIOR√âE
  private createErrorResponse(context: AIResponseContext): ChatMessage {
    return {
      type: 'assistant',
      content: `üòî **D√©sol√©e, j'ai rencontr√© un petit probl√®me.**

Mais ne vous inqui√©tez pas ! Je peux toujours vous aider avec :

‚Ä¢ Des informations sur le **${context.productName}**
‚Ä¢ R√©pondre √† vos questions
‚Ä¢ Vous accompagner dans votre commande
‚Ä¢ Vous mettre en contact avec notre √©quipe

Que puis-je faire pour vous ?`,
      choices: [
        'üîÑ R√©essayer',
        '‚ùì Poser une question',
        'üìû Contacter le support',
        '‚ö° Commander quand m√™me'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante VOSC'
      },
      metadata: {
        nextStep: 'error_recovery',
        flags: { hasError: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ M√âTHODE COMPATIBLE AVEC L'ANCIEN SYST√àME
  async getProductInfoFromDatabase(productId: string, infoType: DefaultContentKeys): Promise<string> {
    try {
      return await this.dynamicContentService.getProductInfo(productId, infoType);
    } catch (error) {
      console.error('Error fetching product info:', error);
      return this.getDefaultProductInfo(infoType);
    }
  }

  // ‚úÖ CORRECTION TYPESCRIPT : Fonction avec type strict
  private getDefaultProductInfo(infoType: DefaultContentKeys): string {
    const defaults: DefaultContent = {
      description: 'üí¨ **En savoir plus sur notre jeu de cartes**\n\nCe jeu a √©t√© sp√©cialement con√ßu pour renforcer les liens et am√©liorer la communication.',
      benefits: 'üíù **B√©n√©fices de notre jeu :**\n\n‚ú® Communication am√©lior√©e\nü§ù Relations renforc√©es\nüåü Moments privil√©gi√©s',
      usage: '‚ùì **Comment utiliser le jeu :**\n\nüìã Installez-vous confortablement\nüéÆ Chacun tire une carte √† tour de r√¥le\n‚è∞ 30 √† 60 minutes par session',
      testimonials: '‚≠ê **Ce que disent nos clients :**\n\n‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Marie & Jean**\n"Ce jeu a r√©volutionn√© notre communication."',
      target: 'üë• **Ce jeu est parfait pour :**\n\n‚Ä¢ Toute personne souhaitant am√©liorer ses relations\n‚Ä¢ Ceux qui cherchent √† cr√©er des moments authentiques'
    };

    return defaults[infoType];
  }

  // ‚úÖ M√âTHODES UTILITAIRES POUR VALIDATION
  validateResponseStructure(response: ChatMessage): boolean {
    return !!(
      response.type &&
      response.content &&
      response.assistant &&
      response.timestamp &&
      response.metadata
    );
  }

  // ‚úÖ M√âTHODE POUR LOGGING
  logInteraction(context: AIResponseContext, response: ChatMessage): void {
    console.log('üîç AI Interaction Log:', {
      timestamp: new Date().toISOString(),
      productId: context.productId,
      userMessage: context.userMessage.substring(0, 100) + '...',
      responseType: response.type,
      nextStep: response.metadata?.nextStep,
      conversationLength: context.conversationHistory.length
    });
  }
}

export default AIResponseHandler;