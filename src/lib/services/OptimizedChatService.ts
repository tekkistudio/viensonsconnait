// src/lib/services/OptimizedChatService.ts - VERSION FINALE COMPL√àTE CORRIG√âE
import { supabase } from '@/lib/supabase';
import { PhoneService } from './PhoneService';
import { OrderService } from './OrderService';
import { AIResponseHandler } from './AIResponseHandler';
import type { 
  ChatMessage, 
  ConversationStep, 
  MessageType,
  ChatOrderData 
} from '@/types/chat';
import type { PaymentProvider } from '@/types/order';

// √âtats simplifi√©s pour le nouveau flow
type PurchaseStep = 'quantity' | 'contact' | 'name' | 'address' | 'payment' | 'confirmation';

interface OrderState {
  step: PurchaseStep;
  mode: 'express' | 'conversational';
  data: {
    phone?: string;
    name?: string;
    address?: string;
    city?: string;
    paymentMethod?: PaymentProvider;
    quantity: number;
    productId?: string;
    storeId?: string;
  };
  flags: {
    customerExists: boolean;
    addressValidated: boolean;
    paymentInitiated: boolean;
    allowAddressChange?: boolean;
  };
  metadata?: {
    maxQuantity?: number;
    availableProducts?: any[];
  };
}

export class OptimizedChatService {
  private static instance: OptimizedChatService | null = null;
  private orderStates: Map<string, OrderState> = new Map();
  private phoneService = PhoneService.getInstance();
  private orderService = OrderService.getInstance();
  private aiResponseHandler = AIResponseHandler.getInstance();

  private constructor() {}

  public static getInstance(): OptimizedChatService {
    if (!this.instance) {
      this.instance = new OptimizedChatService();
    }
    return this.instance;
  }

  // ==========================================
  // ‚úÖ NOUVELLE SECTION: GESTION DES MESSAGES LIBRES IA
  // ==========================================

/**
 * ‚úÖ M√âTHODE CORRIG√âE: Traiter les messages libres avec gestion TypeScript correcte
 */
async processUserInput(
  sessionId: string,
  message: string,
  currentStep?: ConversationStep
): Promise<ChatMessage> {
  console.log('ü§ñ Processing user input with improved session handling:', { sessionId, message, currentStep });

  try {
    // ‚úÖ CORRECTION 1: V√©rifier et initialiser la session si n√©cessaire
    if (!sessionId || sessionId.length < 5) {
      console.error('‚ùå Invalid sessionId provided:', sessionId);
      return this.createErrorMessage('', 'Session invalide. Veuillez rafra√Æchir la page.');
    }

    // ‚úÖ CORRECTION 2: R√©cup√©rer ou cr√©er l'√©tat de commande avec type correct
    let orderState: OrderState | undefined = this.orderStates.get(sessionId);
    
    if (!orderState) {
      console.log('üîÑ Order state not found, attempting to recover or create new one');
      
      // Essayer de r√©cup√©rer depuis la base de donn√©es
      const recoveredState = await this.recoverSessionFromDatabase(sessionId);
      
      if (recoveredState) {
        orderState = recoveredState;
        this.orderStates.set(sessionId, orderState);
      } else {
        // Cr√©er un nouvel √©tat par d√©faut
        console.log('üìù Creating new order state for session:', sessionId);
        orderState = {
          step: 'quantity' as PurchaseStep,
          mode: 'conversational',
          data: {
            quantity: 1,
            storeId: 'a9563f88-217c-4998-b080-ed39f637ea31'
          },
          flags: {
            customerExists: false,
            addressValidated: false,
            paymentInitiated: false
          }
        };
        
        this.orderStates.set(sessionId, orderState);
      }
    }

    // ‚úÖ CORRECTION 3: V√©rifier si c'est un message pour le flow express
    if (currentStep?.includes('express')) {
      return this.handleExpressStep(sessionId, message, currentStep);
    }

    // ‚úÖ CORRECTION 4: V√©rifier si c'est un bouton d'action post-achat
    const postPurchaseActions = [
      'Suivre ma commande', 'Nous contacter', 'Autres produits',
      'WhatsApp', 'Contacter le support', 'Voir ma commande',
      'Changer d\'adresse', 'Autre question', '‚ùì', 'üîç'
    ];
    
    if (postPurchaseActions.some(action => message.includes(action))) {
      return this.handlePostPurchaseActions(sessionId, message);
    }

    // ‚úÖ CORRECTION 5: R√©cup√©rer le productId depuis l'√©tat ou deviner depuis le sessionId
    let productId = orderState.data.productId;
    
    if (!productId) {
      // Essayer d'extraire depuis le sessionId (format: productId_storeId_timestamp_random)
      const sessionParts = sessionId.split('_');
      if (sessionParts.length >= 2) {
        productId = sessionParts[0];
        orderState.data.productId = productId;
        this.orderStates.set(sessionId, orderState);
      }
    }

    if (!productId) {
      console.error('‚ùå No productId found for session:', sessionId);
      return this.createErrorMessage(sessionId, 'Produit non trouv√©. Veuillez rafra√Æchir la page.');
    }

    // ‚úÖ CORRECTION 6: R√©cup√©rer les infos produit depuis la base
    const { data: product, error: productError } = await supabase
      .from('products')
      .select('id, name, price, description')
      .eq('id', productId)
      .single();

    if (productError || !product) {
      console.error('‚ùå Product not found for AI context:', productError);
      return this.createErrorMessage(sessionId, `Produit ${productId} non trouv√©.`);
    }

    // ‚úÖ CORRECTION 7: Pr√©parer le contexte pour l'IA avec toutes les donn√©es n√©cessaires
    const aiContext = {
      productId: product.id,
      productName: product.name,
      sessionId,
      isExpressMode: orderState?.mode === 'express' || false,
      currentStep,
      userMessage: message,
      conversationHistory: []
    };

    // ‚úÖ CORRECTION 8: Laisser l'IA traiter le message
    const aiResponse = await this.aiResponseHandler.handleFreeTextMessage(aiContext);
    
    console.log('‚úÖ AI response generated successfully:', aiResponse);
    return aiResponse;

  } catch (error) {
    console.error('‚ùå Error processing user input:', error);
    return this.createErrorMessage(sessionId, 'Erreur lors du traitement de votre message. Veuillez r√©essayer.');
  }
}

  /**
   * ‚úÖ NOUVELLE M√âTHODE: G√©rer les actions post-achat avec suivi de commande
   */
  private async handlePostPurchaseActions(sessionId: string, message: string): Promise<ChatMessage> {
    console.log('üì¶ Handling post-purchase action:', message);

    try {
      // ‚úÖ SUIVI DE COMMANDE - Nouveau syst√®me
      if (message.includes('Suivre ma commande') || message.includes('üîç')) {
        return this.handleOrderTracking(sessionId);
      }

      // ‚úÖ AUTRES PRODUITS - Am√©lioration
      if (message.includes('Autres produits') || message.includes('üõçÔ∏è')) {
        const orderState = this.orderStates.get(sessionId);
        if (orderState) {
          return this.handleAdditionalProducts(sessionId, orderState);
        }
      }

      // ‚úÖ D√©l√©guer aux autres actions √† l'AIResponseHandler
      return this.aiResponseHandler.handlePostPurchaseAction(message);

    } catch (error) {
      console.error('‚ùå Error handling post-purchase action:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors du traitement de votre demande');
    }
  }

  /**
   * ‚úÖ NOUVELLE M√âTHODE: Syst√®me de suivi de commande
   */
  private async handleOrderTracking(sessionId: string): Promise<ChatMessage> {
    console.log('üîç Tracking order for session:', sessionId);

    try {
      // R√©cup√©rer la commande la plus r√©cente pour cette session
      const { data: order, error } = await supabase
        .from('orders')
        .select('*')
        .eq('session_id', sessionId)
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (error || !order) {
        return {
          type: 'assistant',
          content: `üîç **Suivi de commande**

Aucune commande trouv√©e pour cette session.

üìû **Pour toute question :**
‚Ä¢ WhatsApp : +221 78 136 27 28
‚Ä¢ Email : contact@viensonseconnait.com

Comment puis-je vous aider autrement ?`,
          choices: [
            'üìû Contacter le support',
            'üõçÔ∏è Passer une nouvelle commande',
            'üè† Page d\'accueil'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'customer_support' as ConversationStep,
            externalUrl: {
              type: 'whatsapp',
              url: 'https://wa.me/221781362728',
              description: 'Contacter le support'
            }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ D√©coder les d√©tails de la commande
      const orderItems = order.order_details ? 
        (typeof order.order_details === 'string' ? 
          JSON.parse(order.order_details) : 
          order.order_details) : [];

      // ‚úÖ D√©finir les statuts et leurs descriptions
      const statusDescriptions = {
        'pending': {
          emoji: '‚è≥',
          title: 'En attente',
          description: 'Votre commande est en cours de traitement'
        },
        'confirmed': {
          emoji: '‚úÖ',
          title: 'Confirm√©e',
          description: 'Commande confirm√©e, pr√©paration en cours'
        },
        'processing': {
          emoji: 'üì¶',
          title: 'En pr√©paration',
          description: 'Votre commande est en cours de pr√©paration'
        },
        'shipped': {
          emoji: 'üöö',
          title: 'Exp√©di√©e',
          description: 'Votre commande est en route vers vous'
        },
        'delivered': {
          emoji: 'üéâ',
          title: 'Livr√©e',
          description: 'Commande livr√©e avec succ√®s'
        },
        'cancelled': {
          emoji: '‚ùå',
          title: 'Annul√©e',
          description: 'Commande annul√©e'
        }
      };

      const currentStatus = statusDescriptions[order.status as keyof typeof statusDescriptions] || 
        statusDescriptions['pending'];

      const paymentStatusText = order.payment_status === 'completed' ? 
        '‚úÖ Paiement confirm√©' : 
        order.payment_status === 'pending' ? 
          '‚è≥ En attente de paiement' : 
          '‚ùå Probl√®me de paiement';

      return {
        type: 'assistant',
        content: `üîç **Suivi de votre commande #${order.id}**

${currentStatus.emoji} **Statut : ${currentStatus.title}**
${currentStatus.description}

üìã **D√©tails :**
‚Ä¢ Pass√©e le : ${new Date(order.created_at).toLocaleDateString('fr-FR')}
‚Ä¢ Articles : ${orderItems.length > 0 ? orderItems.map((item: any) => `${item.name} x${item.quantity || 1}`).join(', ') : 'Information non disponible'}
‚Ä¢ Total : ${order.total_amount?.toLocaleString() || 'N/A'} FCFA
‚Ä¢ ${paymentStatusText}

üìç **Livraison :**
${order.address}, ${order.city}

üìû **Questions ? Contactez-nous :**
WhatsApp : +221 78 136 27 28`,
        choices: [
          'üìû WhatsApp (+221 78 136 27 28)',
          'üè† Changer d\'adresse',
          'üõçÔ∏è Commander autre chose',
          'üìß Envoyer par email'
        ],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'order_details_shown' as ConversationStep,
          orderId: order.id,
          externalUrl: {
            type: 'whatsapp',
            url: 'https://wa.me/221781362728',
            description: 'Contacter pour suivi'
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error tracking order:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors du suivi de commande');
    }
  }

  /**
   * ‚úÖ M√âTHODE POUR G√âRER LES CHOIX PR√âD√âFINIS
   */
  async handlePredefinedChoice(
    sessionId: string,
    choice: string,
    productId: string
  ): Promise<ChatMessage> {
    console.log('üîò Processing predefined choice:', { choice, productId });

    try {
      // ‚úÖ R√©cup√©rer les infos produit
      const { data: product } = await supabase
        .from('products')
        .select('id, name, price')
        .eq('id', productId)
        .single();

      if (!product) {
        return this.createErrorMessage(sessionId, 'Produit non trouv√©');
      }

      // ‚úÖ Router selon le choix
      if (choice.includes('Commander rapidement') || choice.includes('‚ö°')) {
        return this.startExpressPurchase(sessionId, productId);
      }

      // ‚úÖ Autres choix trait√©s par l'IA avec contexte
      const aiContext = {
        productId: product.id,
        productName: product.name,
        sessionId,
        isExpressMode: false,
        userMessage: choice,
        conversationHistory: []
      };

      return this.aiResponseHandler.handleFreeTextMessage(aiContext);

    } catch (error) {
      console.error('‚ùå Error handling predefined choice:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors du traitement du choix');
    }
  }

  // ==========================================
  // ‚úÖ FLOW EXPRESS OPTIMIS√â AVEC QUANTIT√â
  // ==========================================

  /**
   * ‚úÖ M√âTHODE CORRIG√âE: D√©marrer le flow express avec s√©lection de quantit√©
   */
  async startExpressPurchase(sessionId: string, productId: string): Promise<ChatMessage> {
    console.log('üöÄ Starting express purchase with quantity selection:', { sessionId, productId });

    try {
      // ‚úÖ Validation du produit avec informations compl√®tes
      const { data: product, error: productError } = await supabase
        .from('products')
        .select('id, name, price, stock_quantity, status')
        .eq('id', productId)
        .eq('status', 'active')
        .single();

      if (productError || !product) {
        console.error('‚ùå Product not found or inactive:', productError);
        return {
          type: 'assistant',
          content: `üòî **D√©sol√©e !** 
          
Ce produit n'est pas disponible actuellement.

Voulez-vous voir nos autres jeux disponibles ?`,
          choices: ['üõçÔ∏è Voir autres produits', 'üìû Contacter le support'],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'product_unavailable' as ConversationStep,
            flags: { productUnavailable: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ V√©rifier le stock
      if (product.stock_quantity <= 0) {
        return {
          type: 'assistant',
          content: `üòî **${product.name} temporairement en rupture** 
          
Ce jeu rencontre un grand succ√®s ! Nous reconstituons notre stock.

üìß **Voulez-vous √™tre notifi√©(e) d√®s qu'il sera disponible ?**`,
          choices: [
            'üìß Me notifier quand disponible', 
            'üõçÔ∏è Voir autres jeux', 
            'üìû Contacter le support'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'out_of_stock' as ConversationStep,
            productId,
            flags: { outOfStock: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ NOUVELLE √âTAPE: S√©lection de quantit√© d'abord
      const orderState: OrderState = {
        step: 'quantity', // ‚úÖ Commencer par la quantit√©
        mode: 'express',
        data: { 
          quantity: 1,
          productId: product.id,
          storeId: 'a9563f88-217c-4998-b080-ed39f637ea31'
        },
        flags: {
          customerExists: false,
          addressValidated: false,
          paymentInitiated: false,
          allowAddressChange: false
        },
        metadata: {
          maxQuantity: Math.min(product.stock_quantity, 10)
        }
      };

      this.orderStates.set(sessionId, orderState);
      await this.saveSessionToDatabase(sessionId, orderState, product.id, orderState.data.storeId!);

      // ‚úÖ NOUVEAU: Message avec s√©lection de quantit√©
      return {
        type: 'assistant',
        content: `‚ö° **Commande Express Activ√©e** ‚ö°

üéØ **${product.name}**
üí∞ ${product.price.toLocaleString()} FCFA l'unit√©
üì¶ Livraison incluse selon votre zone

**Combien d'exemplaires souhaitez-vous commander ?**

üí° *Vous pouvez commander jusqu'√† ${Math.min(product.stock_quantity, 10)} exemplaires*`,
        choices: [
          '1 exemplaire',
          '2 exemplaires', 
          '3 exemplaires',
          'üî¢ Autre quantit√©'
        ],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'express_quantity' as ConversationStep,
          productId: product.id,
          maxQuantity: Math.min(product.stock_quantity, 10),
          flags: { 
            expressMode: true,
            quantitySelection: true
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in startExpressPurchase:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors du d√©marrage de la commande express');
    }
  }

  async handleExpressStep(
    sessionId: string,
    input: string,
    currentStep: string
  ): Promise<ChatMessage> {
    console.log('üîÑ Processing express step:', { sessionId, input, currentStep });

    try {
      const orderState = this.orderStates.get(sessionId);
      if (!orderState) {
        const recoveredState = await this.recoverSessionFromDatabase(sessionId);
        if (!recoveredState) {
          throw new Error('Session state not found and could not be recovered');
        }
        this.orderStates.set(sessionId, recoveredState);
        return this.processStepWithState(sessionId, input, recoveredState);
      }

      // ‚úÖ Gestion sp√©ciale pour la s√©lection de quantit√©
      if (currentStep === 'express_quantity' || currentStep === 'express_custom_quantity') {
        return this.handleExpressQuantity(sessionId, input, orderState);
      }

      return this.processStepWithState(sessionId, input, orderState);

    } catch (error) {
      console.error('‚ùå Error in handleExpressStep:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors du traitement de votre demande');
    }
  }

  private async processStepWithState(
    sessionId: string,
    input: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    switch (orderState.step) {
      case 'quantity': // ‚úÖ NOUVEAU
        return await this.handleExpressQuantity(sessionId, input, orderState);
        
      case 'contact':
        return await this.handleExpressContact(sessionId, input, orderState);
      
      case 'name':
        return await this.handleExpressName(sessionId, input, orderState);
      
      case 'address':
        return await this.handleExpressAddress(sessionId, input, orderState);
      
      case 'payment':
        return await this.handleExpressPayment(sessionId, input, orderState);
      
      case 'confirmation':
        return await this.handleExpressConfirmation(sessionId, input, orderState);
      
      default:
        console.error(`‚ùå Invalid express step: ${orderState.step}`);
        return this.createErrorMessage(sessionId, `√âtape invalide: ${orderState.step}`);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: G√©rer la s√©lection de quantit√©
  private async handleExpressQuantity(
    sessionId: string,
    input: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('üî¢ Processing express quantity selection:', { sessionId, input });

    try {
      let quantity = 1;

      // Parser la quantit√© depuis l'input
      if (input.includes('1 exemplaire')) {
        quantity = 1;
      } else if (input.includes('2 exemplaires')) {
        quantity = 2;
      } else if (input.includes('3 exemplaires')) {
        quantity = 3;
      } else if (input.includes('Autre quantit√©')) {
        return {
          type: 'assistant',
          content: `üî¢ **Quelle quantit√© souhaitez-vous ?**

Veuillez indiquer le nombre d'exemplaires (entre 1 et ${orderState.metadata?.maxQuantity || 10}) :

Exemple : "5" ou "5 exemplaires"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_custom_quantity' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      } else {
        // Essayer de parser un nombre depuis l'input
        const numberMatch = input.match(/(\d+)/);
        if (numberMatch) {
          quantity = parseInt(numberMatch[1]);
        }
      }

      // Validation de la quantit√©
      if (quantity < 1 || quantity > (orderState.metadata?.maxQuantity || 10)) {
        return {
          type: 'assistant',
          content: `‚ùå **Quantit√© invalide**

Veuillez choisir entre 1 et ${orderState.metadata?.maxQuantity || 10} exemplaires :`,
          choices: [
            '1 exemplaire',
            '2 exemplaires', 
            '3 exemplaires',
            'üî¢ Autre quantit√©'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_quantity' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ CORRECTION: Mettre √† jour la quantit√© et recalculer tous les montants
      orderState.data.quantity = quantity;
      orderState.step = 'contact'; // Passer √† l'√©tape contact
      this.orderStates.set(sessionId, orderState);
      await this.updateSessionInDatabase(sessionId, orderState);

      // ‚úÖ CORRECTION: R√©cup√©rer toutes les infos produit n√©cessaires
      const { data: product } = await supabase
        .from('products')
        .select('id, name, price')
        .eq('id', orderState.data.productId)
        .single();

      if (!product) {
        return this.createErrorMessage(sessionId, 'Erreur lors de la r√©cup√©ration du produit');
      }

      // ‚úÖ CORRECTION: Calculer tous les montants correctement
      const itemPrice = product.price;
      const subtotal = itemPrice * quantity;
      const deliveryCost = 0; // Sera calcul√© √† l'√©tape suivante
      const totalAmount = subtotal + deliveryCost;

      return {
        type: 'assistant',
        content: `‚úÖ **Quantit√© confirm√©e : ${quantity} exemplaire${quantity > 1 ? 's' : ''}**

üéØ **${product.name}**
üí∞ ${totalAmount.toLocaleString()} FCFA (${quantity} √ó ${itemPrice.toLocaleString()} FCFA)

Sur quel num√©ro devons-nous vous joindre pour la livraison ?

üí° *Formats accept√©s : +221 77 123 45 67, 77 123 45 67*`,
        choices: [],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'express_contact' as ConversationStep,
          orderData: { 
            session_id: sessionId,
            product_id: product.id,
            quantity: quantity,
            subtotal: subtotal,
            total_amount: totalAmount,
            items: [{
              productId: product.id,
              name: product.name,
              quantity: quantity,
              price: itemPrice,
              totalPrice: subtotal
            }]
          },
          flags: { 
            expressMode: true,
            quantitySelected: true
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleExpressQuantity:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la s√©lection de quantit√©');
    }
  }

  /**
   * ‚úÖ M√âTHODE CORRIG√âE: Validation t√©l√©phone avec reconnaissance client
   */
  private async handleExpressContact(
    sessionId: string,
    phone: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('üì± Processing contact step with customer recognition:', { sessionId, phone });

    try {
      // ‚úÖ Utiliser le PhoneService am√©lior√©
      const validation = this.phoneService.validatePhoneNumber(phone);
      
      if (!validation.isValid) {
        return {
          type: 'assistant',
          content: `‚ùå **Num√©ro invalide**

${validation.error}

üí° **Exemples de formats accept√©s :**
‚Ä¢ S√©n√©gal : 77 123 45 67 ou +221 77 123 45 67
‚Ä¢ C√¥te d'Ivoire : +225 07 12 34 56
‚Ä¢ France : +33 6 12 34 56 78
‚Ä¢ International : +XXX XXXXXXXXX

Veuillez r√©essayer :`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: { 
            nextStep: 'express_contact' as ConversationStep,
            flags: { 
              expressMode: true,
              phoneValidationError: true
            }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ Formater le num√©ro avec le service am√©lior√©
      const formattedPhone = this.phoneService.formatPhoneWithCountry(phone);
      
      if (!formattedPhone.isValid) {
        return {
          type: 'assistant',
          content: `‚ö†Ô∏è **Num√©ro non reconnu**

Le format de votre num√©ro n'a pas √©t√© reconnu automatiquement.

Pouvez-vous le saisir au format international ?
Exemple : +221 77 123 45 67`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: { 
            nextStep: 'express_contact' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ CORRECTION : V√©rifier client existant dans la table customers
      const { data: existingCustomer, error: customerError } = await supabase
        .from('customers')
        .select('*')
        .eq('phone', formattedPhone.international)
        .single();

      console.log('üîç Customer lookup result:', { 
        found: !!existingCustomer, 
        error: customerError,
        phone: formattedPhone.international 
      });

      // ‚úÖ Mettre √† jour l'√©tat
      orderState.data.phone = formattedPhone.international;
      
      if (existingCustomer && !customerError) {
        // ‚úÖ CLIENT EXISTANT - Raccourci vers confirmation d'adresse
        const fullName = `${existingCustomer.first_name || ''} ${existingCustomer.last_name || ''}`.trim();
        
        orderState.data.name = fullName || 'Client';
        orderState.data.address = existingCustomer.address || '';
        orderState.data.city = existingCustomer.city || '';
        orderState.flags.customerExists = true;
        orderState.flags.allowAddressChange = true;
        orderState.step = 'address';

        this.orderStates.set(sessionId, orderState);
        await this.updateSessionInDatabase(sessionId, orderState);

        const countryFlag = formattedPhone.country ? this.getCountryFlag(formattedPhone.country) : 'üì±';

        return {
          type: 'assistant',
          content: `üëã **Ravi de vous revoir ${existingCustomer.first_name || 'cher client'} !**

${countryFlag} **Num√©ro confirm√© :** ${formattedPhone.formatted}

üìç **Votre adresse enregistr√©e :**
${existingCustomer.address || 'Adresse non renseign√©e'}, ${existingCustomer.city || 'Ville non renseign√©e'}

Utiliser la m√™me adresse ou en changer ?`,
          choices: [
            '‚úÖ Garder cette adresse', 
            'üìç Changer d\'adresse'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_address' as ConversationStep,
            flags: { 
              expressMode: true, 
              customerExists: true,
              phoneValidated: true
            }
          },
          timestamp: new Date().toISOString()
        };
      } else {
        // ‚úÖ NOUVEAU CLIENT - Demander le nom
        orderState.step = 'name';
        orderState.flags.customerExists = false;
        this.orderStates.set(sessionId, orderState);
        await this.updateSessionInDatabase(sessionId, orderState);

        const countryFlag = formattedPhone.country ? this.getCountryFlag(formattedPhone.country) : 'üì±';

        return {
          type: 'assistant',
          content: `${countryFlag} **Num√©ro confirm√© :** ${formattedPhone.formatted}

üë§ **Comment vous appelez-vous ?**
*Pr√©nom et nom*

Exemple : "Aminata Diop", "Benoit Nguessan", "Marie Dupont"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_name' as ConversationStep,
            flags: { 
              expressMode: true,
              phoneValidated: true,
              newCustomer: true
            }
          },
          timestamp: new Date().toISOString()
        };
      }

    } catch (error) {
      console.error('‚ùå Error in handleExpressContact:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la validation du num√©ro');
    }
  }

  // ‚úÖ Collecter le nom
  private async handleExpressName(
    sessionId: string,
    name: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('üë§ Processing name step:', { sessionId, name });

    try {
      // Validation du nom
      const trimmedName = name.trim();
      const nameParts = trimmedName.split(' ');
      
      if (trimmedName.length < 3) {
        return {
          type: 'assistant',
          content: `‚ùå Nom trop court. Donnez-moi votre nom complet :

Exemple : "Aminata Diop"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_name' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }
      
      if (nameParts.length < 2) {
        return {
          type: 'assistant',
          content: `‚ùå J'ai besoin de votre pr√©nom ET nom :

Exemple : "Aminata Diop"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_name' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Mettre √† jour l'√©tat
      orderState.data.name = trimmedName;
      orderState.step = 'address';
      this.orderStates.set(sessionId, orderState);
      await this.updateSessionInDatabase(sessionId, orderState);

      return {
        type: 'assistant',
        content: `üëã Enchant√©(e) **${nameParts[0]}** !

üìç A quelle adresse livrer votre commande ?
*Format : Adresse, Ville*

Exemple : "Rue 10 x Rue 15 M√©dina, Dakar"`,
        choices: [],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'express_address' as ConversationStep,
          flags: { expressMode: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleExpressName:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la validation du nom');
    }
  }

  private async handleExpressAddress(
    sessionId: string,
    addressOrChoice: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('üìç Processing address step:', { sessionId, addressOrChoice });

    try {
      // G√©rer les choix pour clients existants
      if (addressOrChoice.includes('Garder cette adresse')) {
        orderState.step = 'payment';
        orderState.flags.addressValidated = true;
        this.orderStates.set(sessionId, orderState);
        await this.updateSessionInDatabase(sessionId, orderState);

        const deliveryCost = await this.calculateDeliveryCost(orderState.data.city || '');

        return {
          type: 'assistant',
          content: `üìç **Adresse confirm√©e** ‚úÖ
${orderState.data.address}, ${orderState.data.city}

üöö Frais de livraison : ${deliveryCost.toLocaleString()} FCFA

üí≥ Comment payez-vous ?`,
          choices: ['Wave', 'üí≥ Carte bancaire', 'üõµ Payer √† la livraison'],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_payment' as ConversationStep,
            orderData: { delivery_cost: deliveryCost },
            flags: { expressMode: true, addressValidated: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      if (addressOrChoice.includes('Changer d\'adresse')) {
        return {
          type: 'assistant',
          content: `üìç **Nouvelle adresse de livraison**
*Format : Adresse, Ville*

Exemple : "Rue 10 x Rue 15 M√©dina, Dakar"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_address' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Traitement d'une nouvelle adresse
      const address = addressOrChoice;

      if (address.length < 10) {
        return {
          type: 'assistant',
          content: `‚ùå Adresse trop courte. Soyez plus pr√©cis :

Exemple : "Rue 10 x Rue 15 M√©dina, Dakar"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_address' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Parser l'adresse (format : "adresse, ville")
      const parts = address.split(',').map(part => part.trim());
      if (parts.length < 2) {
        return {
          type: 'assistant',
          content: `‚ùå Format incorrect. Utilisez : **Adresse, Ville**

Exemple : "Rue 10 x Rue 15 M√©dina, Dakar"`,
          choices: [],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'express_address' as ConversationStep,
            flags: { expressMode: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Mettre √† jour l'√©tat
      orderState.data.address = parts[0];
      orderState.data.city = parts[1];
      orderState.step = 'payment';
      orderState.flags.addressValidated = true;
      this.orderStates.set(sessionId, orderState);
      await this.updateSessionInDatabase(sessionId, orderState);

      // Calculer les frais de livraison
      const deliveryCost = await this.calculateDeliveryCost(parts[1]);

      return {
        type: 'assistant',
        content: `üìç **Adresse confirm√©e** ‚úÖ
${parts[0]}, ${parts[1]}

üöö Frais de livraison : ${deliveryCost.toLocaleString()} FCFA

üí≥ Comment payez-vous ?`,
        choices: ['üêß Wave', 'üí≥ Carte bancaire', 'üõµ Payer √† la livraison'],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'express_payment' as ConversationStep,
          orderData: { delivery_cost: deliveryCost },
          flags: { expressMode: true, addressValidated: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleExpressAddress:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la validation de l\'adresse');
    }
  }

  /**
 * ‚úÖ Retourne le nom d'affichage du mode de paiement
 */
private getPaymentDisplayName(provider: PaymentProvider): string {
  const names: Record<PaymentProvider, string> = {
    'WAVE': 'Wave',
    'STRIPE': 'Carte bancaire',
    'CASH': 'Paiement √† la livraison',
    'ORANGE_MONEY': 'Orange Money' // Au cas o√π vous l'ajouteriez plus tard
  };
  
  return names[provider] || 'Paiement';
}

/**
 * ‚úÖ BONUS: M√©thode pour formater les boutons de paiement avec styles
 */
private formatPaymentButton(method: PaymentProvider): string {
  switch (method) {
    case 'WAVE':
      return `<div class="wave-payment-button" style="background-color: #4BD2FA; color: white; padding: 12px 24px; border-radius: 8px; display: flex; align-items: center; gap: 8px; font-weight: 600; border: none; cursor: pointer; transition: all 0.2s; justify-content: center;">
        <img src="/images/payments/wave_2.svg" alt="Wave" style="width: 20px; height: 20px; flex-shrink: 0;" />
        <span>Payer avec Wave</span>
      </div>`;
    case 'STRIPE':
      return 'üí≥ Payer par Carte bancaire';
    case 'CASH':
      return 'üõµ Payer √† la livraison';
    default:
      return 'Payer';
  }
}

  private async handleExpressPayment(
    sessionId: string,
    paymentChoice: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('üí≥ Processing payment step:', { sessionId, paymentChoice });

    try {
      // Mapper le choix vers le provider
      const paymentMethod = this.mapPaymentChoice(paymentChoice);
      
      orderState.data.paymentMethod = paymentMethod;
      orderState.step = 'confirmation';
      orderState.flags.paymentInitiated = true;
      this.orderStates.set(sessionId, orderState);
      await this.updateSessionInDatabase(sessionId, orderState);

      // Cr√©er la commande avec un ID num√©rique
      const orderId = await this.createExpressOrder(sessionId, orderState);
      
      if (paymentMethod === 'CASH') {
        // Paiement √† la livraison - commande confirm√©e directement
        return {
          type: 'assistant',
          content: `üéâ **Commande confirm√©e !** üéâ

üìã **N¬∞ ${orderId}**
üë§ **${orderState.data.name}**
üìç ${orderState.data.address}, ${orderState.data.city}
üí∞ Paiement √† la livraison

‚úÖ Notre √©quipe vous contactera dans les 2h pour confirmer la livraison.

üôè Merci pour votre confiance !`,
          choices: ['üîç Suivre ma commande', 'üìû Nous contacter', 'üõçÔ∏è Autres produits'],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'order_complete' as ConversationStep,
            orderId,
            flags: { orderCompleted: true }
          },
          timestamp: new Date().toISOString()
        };
      } else {
        // Paiement en ligne - g√©n√©rer l'URL
        const paymentUrl = await this.initializePayment(orderId, paymentMethod, orderState);
        
        return {
          type: 'assistant',
          content: `üí≥ **Finaliser le paiement**

üìã Commande : **${orderId}**
üë§ **${orderState.data.name}**
üí∞ Mode : ${this.getPaymentDisplayName(paymentMethod)}

üëÜ Cliquez sur le bouton ci-dessous pour payer :`,
          choices: [`üí≥ Payer par ${this.getPaymentDisplayName(paymentMethod)}`],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'payment_processing' as ConversationStep,
            paymentUrl,
            orderId,
            paymentAmount: await this.calculateOrderTotal(orderState),
            paymentMethod: this.getPaymentDisplayName(paymentMethod),
            flags: { expressMode: true, paymentInitiated: true }
          },
          timestamp: new Date().toISOString()
        };
      }

    } catch (error) {
      console.error('‚ùå Express order creation error:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la cr√©ation de votre commande');
    }
  }

  // ‚úÖ NOUVEAU: Apr√®s confirmation de paiement, proposer d'autres produits
    private async handleExpressConfirmation(
    sessionId: string,
    input: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    console.log('‚úÖ Processing confirmation step:', { sessionId, input });

    try {
      if (input.includes('Suivre ma commande') || input.includes('üîç')) {
        return this.handleOrderTracking(sessionId);
      }

      // ‚úÖ CORRECTION: Gestion intelligente "Autres produits" 
      if (input.includes('Autres produits') || input.includes('üõçÔ∏è')) {
        return this.handleAdditionalProducts(sessionId, orderState);
      }

      // ‚úÖ NOUVEAU: Gestion "Nous contacter"
      if (input.includes('Nous contacter') || input.includes('üìû')) {
        return {
          type: 'assistant',
          content: `üìû **Contactez notre √©quipe !**

  ü§ù **Notre support client est l√† pour vous :**

  üì± **WhatsApp :** +221 78 136 27 28
  üìß **Email :** contact@viensonseconnait.com
  üïí **Horaires :** Lun-Ven 9h-18h, Sam 9h-14h

  üí¨ **Ou continuez ici :**
  Je peux r√©pondre √† toutes vos questions sur nos jeux, votre commande, ou nos services.

  Comment puis-je vous aider ?`,
          choices: [
            'üìû WhatsApp (+221 78 136 27 28)',
            'üìß Envoyer un email',
            '‚ùì Poser ma question ici',
            'üîô Retour au menu'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'customer_service' as ConversationStep,
            externalUrl: {
              type: 'whatsapp',
              url: 'https://wa.me/221781362728',
              description: 'Contacter sur WhatsApp'
            },
            flags: { 
              contactMode: true,
              freeTextEnabled: true 
            }
          },
          timestamp: new Date().toISOString()
        };
      }

      return {
        type: 'assistant',
        content: `‚úÖ **Commande confirm√©e !** üéâ

  Merci pour votre achat ! Voulez-vous :

  üõçÔ∏è **Ajouter d'autres jeux** √† votre commande
  üì¶ **Finaliser** et recevoir la confirmation

  Que pr√©f√©rez-vous ?`,
        choices: [
          'üõçÔ∏è Ajouter d\'autres jeux',
          'üì¶ Finaliser ma commande',
          'üìû Nous contacter'
        ],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'post_purchase_options' as ConversationStep,
          flags: { orderCompleted: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleExpressConfirmation:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la confirmation');
    }
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: G√©rer l'ajout de produits suppl√©mentaires
  private async handleAdditionalProducts(
    sessionId: string,
    orderState: OrderState
  ): Promise<ChatMessage> {
    try {
      // ‚úÖ R√©cup√©rer d'autres produits disponibles avec plus d'informations
      const { data: products, error } = await supabase
        .from('products')
        .select('id, name, price, description, images')
        .eq('status', 'active')
        .neq('id', orderState.data.productId) // Exclure le produit d√©j√† command√©
        .limit(4); // Augmenter √† 4 produits

      if (error || !products || products.length === 0) {
        return {
          type: 'assistant',
          content: `üõçÔ∏è **Nos autres produits**

D√©couvrez toute notre gamme sur notre site ou contactez-nous pour plus d'informations.

Voulez-vous finaliser votre commande actuelle ?`,
          choices: [
            'üì¶ Finaliser ma commande',
            'üìû Nous contacter',
            'üåê Voir tous nos jeux'
          ],
          assistant: this.getBotInfo(),
          metadata: {
            nextStep: 'finalize_order' as ConversationStep,
            externalUrl: {
              type: 'other',
              url: '/nos-jeux',
              description: 'Voir tous nos jeux'
            }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ Cr√©er un affichage enrichi des produits
      const productDescriptions = products.map(p => {
        const shortDesc = p.description ? 
          (p.description.length > 80 ? `${p.description.substring(0, 80)}...` : p.description) : 
          'D√©couvrez ce jeu pour renforcer vos relations';
        
        return `üéØ **${p.name}**\nüí∞ ${p.price.toLocaleString()} FCFA\nüìù ${shortDesc}`;
      }).join('\n\n');

      return {
        type: 'assistant',
        content: `üõçÔ∏è **Ajoutez d'autres jeux √† votre commande :**

${productDescriptions}

Quel jeu souhaitez-vous ajouter ?`,
        choices: [
          ...products.slice(0, 3).map(p => `‚ûï ${p.name}`), // Limiter √† 3 boutons pour l'interface
          'üì¶ Finaliser sans ajouter'
        ],
        assistant: this.getBotInfo(),
        metadata: {
          nextStep: 'add_product_to_order' as ConversationStep,
          availableProducts: products,
          flags: { addingProducts: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleAdditionalProducts:', error);
      return this.createErrorMessage(sessionId, 'Erreur lors de la r√©cup√©ration des produits');
    }
  }

  // ‚úÖ NOUVEAU: Gestion des s√©lections de produits suppl√©mentaires
    async handleAdditionalProductSelection(
      sessionId: string,
      selectedChoice: string,
      availableProducts: any[]
    ): Promise<ChatMessage> {
      console.log('‚ûï Handling additional product selection:', selectedChoice);

      try {
        // ‚úÖ Cas: Voir tous nos jeux (redirection)
        if (selectedChoice.includes('Voir tous nos jeux') || selectedChoice.includes('üåê')) {
          return {
            type: 'assistant',
            content: `üåê **D√©couvrez notre collection compl√®te !**

    Vous allez √™tre redirig√© vers notre page qui pr√©sente tous nos jeux de cartes.

    üéØ **Sur cette page, vous pourrez :**
    ‚Ä¢ Voir tous nos jeux par cat√©gorie
    ‚Ä¢ Lire les descriptions d√©taill√©es  
    ‚Ä¢ D√©couvrir les avis clients
    ‚Ä¢ Comparer les diff√©rents jeux

    üëÜ **Cliquez sur le bouton ci-dessous pour y acc√©der :**`,
            choices: [
              'üåê Voir tous nos jeux',
              'üì¶ Finaliser ma commande actuelle',
              'üîô Retour au chat'
            ],
            assistant: this.getBotInfo(),
            metadata: {
              nextStep: 'redirect_to_catalog' as ConversationStep,
              externalUrl: {
                type: 'other',
                url: '/nos-jeux',
                description: 'D√©couvrir tous nos jeux'
              },
              flags: { 
                catalogRedirect: true,
                showExternalLink: true 
              }
            },
            timestamp: new Date().toISOString()
          };
        }

        // ‚úÖ Cas: Finaliser sans ajouter
        if (selectedChoice.includes('Finaliser ma commande') || selectedChoice.includes('üì¶')) {
          return {
            type: 'assistant',
            content: `üì¶ **Commande finalis√©e !**

    ‚úÖ Votre commande a √©t√© confirm√©e avec succ√®s.
    üìß Vous recevrez un email de confirmation dans les 5 minutes.
    üì± Notre √©quipe vous contactera pour organiser la livraison.

    üôè **Merci pour votre confiance !**

    Besoin d'autre chose ?`,
            choices: [
              'üîç Suivre ma commande',
              'üìû Nous contacter',
              '‚≠ê Donner un avis',
              'üè† Retour √† l\'accueil'
            ],
            assistant: this.getBotInfo(),
            metadata: {
              nextStep: 'order_finalized' as ConversationStep,
              flags: { 
                orderCompleted: true,
                orderFinalized: true 
              }
            },
            timestamp: new Date().toISOString()
          };
        }

        // ‚úÖ Cas: S√©lection d'un produit sp√©cifique
        if (selectedChoice.includes('‚ûï')) {
          const productName = selectedChoice.replace('‚ûï ', '').trim();
          const selectedProduct = availableProducts.find(p => p.name === productName);

          if (!selectedProduct) {
            return this.createErrorMessage(sessionId, 'Produit non trouv√©. Veuillez r√©essayer.');
          }

          // Ajouter le produit au panier via ConversationalCartService
          // Cette int√©gration sera faite dans la prochaine √©tape
          return {
            type: 'assistant',
            content: `‚úÖ **${selectedProduct.name} ajout√© !**

    üí∞ **Prix :** ${selectedProduct.price.toLocaleString()} FCFA
    üìù **Description :** ${selectedProduct.description || 'Parfait pour cr√©er des moments authentiques'}

    üõí **Votre commande sera mise √† jour avec ce nouveau produit.**

    Que souhaitez-vous faire maintenant ?`,
            choices: [
              'üõçÔ∏è Ajouter un autre jeu',
              'üì¶ Finaliser ma commande',
              '‚úèÔ∏è Modifier les quantit√©s',
              'üóëÔ∏è Retirer ce produit'
            ],
            assistant: this.getBotInfo(),
            metadata: {
              nextStep: 'product_added_to_cart' as ConversationStep,
              productAdded: selectedProduct,
              flags: { 
                productAdded: true,
                multipleProducts: true 
              }
            },
            timestamp: new Date().toISOString()
          };
        }

        // Cas par d√©faut
        return this.createErrorMessage(sessionId, 'Choix non reconnu');

      } catch (error) {
        console.error('‚ùå Error in handleAdditionalProductSelection:', error);
        return this.createErrorMessage(sessionId, 'Erreur lors de la s√©lection du produit');
      }
    }

  // ==========================================
  // ‚úÖ INT√âGRATION STRIPE DANS LE FLOW EXPRESS
  // ==========================================

  /**
   * ‚úÖ M√âTHODE CORRIG√âE: Initialiser paiement avec redirections vers chat
   */
  private async initializePayment(
    orderId: string,
    paymentMethod: PaymentProvider,
    orderState: OrderState
  ): Promise<string> {
    console.log('üí≥ Initializing payment with method:', paymentMethod);
    
    try {
      const totalAmount = await this.calculateOrderTotal(orderState);
      
      if (paymentMethod === 'STRIPE') {
        // ‚úÖ Cr√©er une session Stripe avec redirection vers le chat
        const response = await fetch('/api/stripe/create-checkout-session', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            amount: totalAmount * 100, // Convertir en centimes
            currency: 'eur',
            orderId,
            customerName: orderState.data.name,
            successUrl: `${window.location.origin}/chat/payment-success?order_id=${orderId}`, // ‚úÖ Redirection vers chat
            cancelUrl: `${window.location.origin}/chat/payment-canceled?order_id=${orderId}` // ‚úÖ Redirection vers chat
          }),
        });

        if (!response.ok) {
          throw new Error('Erreur lors de la cr√©ation de la session Stripe');
        }

        const session = await response.json();
        console.log('‚úÖ Stripe session created:', session.id);
        return session.url;
        
      } else if (paymentMethod === 'WAVE') {
        // ‚úÖ URL Wave avec montant dynamique
        const waveUrl = `https://pay.wave.com/m/M_OfAgT8X_IT6P/c/sn/?amount=${totalAmount}`;
        console.log('üí∞ Wave payment URL generated:', waveUrl);
        return waveUrl;
        
      } else {
        return '#';
      }
      
    } catch (error) {
      console.error('‚ùå Error initializing payment:', error);
      throw new Error(`Erreur lors de l'initialisation du paiement: ${error}`);
    }
  }

  // ==========================================
  // M√âTHODES DE GESTION DES DONN√âES
  // ==========================================

  private async saveSessionToDatabase(
    sessionId: string, 
    orderState: OrderState, 
    productId: string, 
    storeId: string
  ): Promise<void> {
    try {
      const sessionData = {
        id: sessionId,
        product_id: productId,
        store_id: storeId,
        session_data: orderState,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        status: 'active'
      };

      const { error } = await supabase
        .from('conversations')
        .upsert(sessionData, { onConflict: 'id' });

      if (error) {
        console.error('‚ùå Error saving session to database:', error);
      } else {
        console.log('‚úÖ Session saved to database:', sessionId);
      }
    } catch (error) {
      console.error('‚ùå Error in saveSessionToDatabase:', error);
    }
  }

  private async updateSessionInDatabase(sessionId: string, orderState: OrderState): Promise<void> {
    try {
      const { error } = await supabase
        .from('conversations')
        .update({
          session_data: orderState,
          updated_at: new Date().toISOString()
        })
        .eq('id', sessionId);

      if (error) {
        console.error('‚ùå Error updating session in database:', error);
      }
    } catch (error) {
      console.error('‚ùå Error in updateSessionInDatabase:', error);
    }
  }

  private async recoverSessionFromDatabase(sessionId: string): Promise<OrderState | undefined> {
  try {
    const { data: conversation, error } = await supabase
      .from('conversations')
      .select('*')
      .eq('id', sessionId)
      .single();

    if (error || !conversation) {
      console.error('‚ùå Could not recover session from database:', error);
      return undefined; // ‚úÖ CORRECTION: Retourner undefined au lieu de null
    }

    console.log('‚úÖ Session recovered from database:', sessionId);
    return conversation.session_data as OrderState;
  } catch (error) {
    console.error('‚ùå Error in recoverSessionFromDatabase:', error);
    return undefined; // ‚úÖ CORRECTION: Retourner undefined au lieu de null
  }
}

  private async createExpressOrder(
    sessionId: string,
    orderState: OrderState
  ): Promise<string> {
    console.log('üõí Creating express order:', { sessionId, orderState });

    try {
      const productId = orderState.data.productId;
      if (!productId) {
        throw new Error('Product ID not found in order state');
      }

      // R√©cup√©rer les infos produit
      const { data: product, error: productError } = await supabase
        .from('products')
        .select('*')
        .eq('id', productId)
        .single();

      if (productError || !product) {
        console.error('‚ùå Product not found during order creation:', productError);
        throw new Error(`Product ${productId} not found`);
      }

      // Calculer les co√ªts
      const deliveryCost = await this.calculateDeliveryCost(orderState.data.city || '');
      const subtotal = product.price * orderState.data.quantity;
      const total = subtotal + deliveryCost;

      // G√©n√©rer un ID num√©rique valide
      const numericOrderId = Math.floor(Date.now() / 1000);

      // ‚úÖ EXTRACTION S√âCURIS√âE DU NOM
      const firstName = this.extractFirstName(orderState.data.name);
      const lastName = this.extractLastName(orderState.data.name);

      // Pr√©parer les donn√©es de commande
      const orderData = {
        id: numericOrderId,
        session_id: sessionId,
        product_id: productId,
        first_name: firstName,
        last_name: lastName,
        phone: orderState.data.phone,
        city: orderState.data.city,
        address: orderState.data.address,
        payment_method: orderState.data.paymentMethod,
        total_amount: total,
        delivery_cost: deliveryCost,
        status: orderState.data.paymentMethod === 'CASH' ? 'confirmed' : 'pending',
        payment_status: 'pending',
        order_details: JSON.stringify([{
          productId: product.id,
          name: product.name,
          quantity: orderState.data.quantity,
          price: product.price,
          totalPrice: subtotal
        }]),
        metadata: {
          source: 'chatbot',
          mode: 'express',
          storeId: orderState.data.storeId,
          createdAt: new Date().toISOString()
        }
      };

      console.log('üìã Order data prepared:', orderData);

      // Ins√©rer directement dans Supabase
      const { data: insertedOrder, error: insertError } = await supabase
        .from('orders')
        .insert(orderData)
        .select()
        .single();

      if (insertError) {
        console.error('‚ùå Error inserting order:', insertError);
        throw new Error(`Failed to create order: ${insertError.message}`);
      }

      console.log('‚úÖ Order created successfully:', insertedOrder.id);

      // ‚úÖ NOUVEAU : Sauvegarder ou mettre √† jour le client dans la table customers
      try {
        const customerData = {
          first_name: firstName,
          last_name: lastName,
          phone: orderState.data.phone,
          city: orderState.data.city,
          address: orderState.data.address,
          email: '', // Sera mis √† jour plus tard si collect√©
          updated_at: new Date().toISOString()
        };

        if (orderState.flags.customerExists) {
          // Mettre √† jour client existant
          await supabase
            .from('customers')
            .update(customerData)
            .eq('phone', orderState.data.phone);
          console.log('‚úÖ Customer updated in database');
        } else {
          // Cr√©er nouveau client
          await supabase
            .from('customers')
            .insert({
              ...customerData,
              created_at: new Date().toISOString()
            });
          console.log('‚úÖ New customer saved to database');
        }
      } catch (customerError) {
        console.error('‚ö†Ô∏è Error saving customer (non-blocking):', customerError);
        // Ne pas faire √©chouer la commande pour une erreur de sauvegarde client
      }

      // D√©cr√©menter le stock
      await this.decrementProductStock(productId, orderState.data.quantity);

      return insertedOrder.id.toString();

    } catch (error) {
      console.error('‚ùå Error in createExpressOrder:', error);
      throw error;
    }
  }

  // ==========================================
  // ‚úÖ CALCUL DES CO√õTS DEPUIS delivery_zones
  // ==========================================

  private async calculateDeliveryCost(city: string): Promise<number> {
    try {
      console.log('üöö Calculating delivery cost for city:', city);
      
      const normalizedCity = city.toLowerCase().trim();
      
      // R√©cup√©rer les zones de livraison depuis la base de donn√©es
      const { data: zones, error } = await supabase
        .from('delivery_zones')
        .select('*')
        .eq('is_active', true)
        .order('cost', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching delivery zones:', error);
        return this.getFallbackDeliveryCost(normalizedCity);
      }

      if (!zones || zones.length === 0) {
        console.log('‚ö†Ô∏è No delivery zones found, using fallback');
        return this.getFallbackDeliveryCost(normalizedCity);
      }

      // Chercher la zone correspondante
      for (const zone of zones) {
        if (zone.cities && Array.isArray(zone.cities)) {
          const cityMatch = zone.cities.some((zoneCity: string) => 
            normalizedCity.includes(zoneCity.toLowerCase()) ||
            zoneCity.toLowerCase().includes(normalizedCity)
          );
          
          if (cityMatch) {
            console.log(`‚úÖ Found matching zone: ${zone.name} - Cost: ${zone.cost} FCFA`);
            return zone.cost;
          }
        }
      }

      // Si aucune zone trouv√©e, utiliser le co√ªt le plus √©lev√© (s√©curit√©)
      const maxCost = Math.max(...zones.map(z => z.cost));
      console.log(`‚ö†Ô∏è No matching zone found for ${city}, using max cost: ${maxCost} FCFA`);
      return maxCost;

    } catch (error) {
      console.error('‚ùå Error in calculateDeliveryCost:', error);
      return this.getFallbackDeliveryCost(city.toLowerCase());
    }
  }

  // ‚úÖ Fallback pour les co√ªts de livraison
  private getFallbackDeliveryCost(normalizedCity: string): number {
    if (normalizedCity.includes('dakar')) return 0;
    if (normalizedCity.includes('abidjan')) return 2500;
    
    const senegalCities = ['thi√®s', 'saint-louis', 'kaolack', 'ziguinchor', 'touba', 'mbour', 'pikine', 'gu√©diawaye'];
    if (senegalCities.some(city => normalizedCity.includes(city))) {
      return 3000;
    }
    
    return 2500; // Co√ªt par d√©faut
  }

  private async calculateOrderTotal(orderState: OrderState): Promise<number> {
    try {
      const productId = orderState.data.productId;
      if (!productId) return 0;

      const { data: product } = await supabase
        .from('products')
        .select('price')
        .eq('id', productId)
        .single();

      if (!product) return 0;

      const subtotal = product.price * orderState.data.quantity;
      const deliveryCost = await this.calculateDeliveryCost(orderState.data.city || '');
      
      return subtotal + deliveryCost;
    } catch (error) {
      console.error('‚ùå Error calculating order total:', error);
      return 0;
    }
  }

  // ‚úÖ CORRECTION: Mapper le choix de paiement sans Orange Money
  private mapPaymentChoice(choice: string): PaymentProvider {
  const normalized = choice.toLowerCase();
  
  // ‚úÖ Gestion du bouton Wave avec HTML/SVG
  if (normalized.includes('wave') || choice.includes('wave_2.svg') || choice.includes('#4BD2FA')) {
    return 'WAVE';
  }
  
  if (normalized.includes('carte') || normalized.includes('bancaire')) {
    return 'STRIPE';
  }
  
  if (normalized.includes('livraison') || normalized.includes('üõµ')) {
    return 'CASH';
  }
  
  return 'WAVE'; // Par d√©faut
}

// ‚úÖ AM√âLIORATION: Formatage des boutons de paiement avec styles
private formatPaymentChoices(orderState: OrderState): string[] {
  const choices = [];
  
  // ‚úÖ Bouton Wave avec style personnalis√©
  choices.push(`<button class="wave-payment-button" style="background-color: #4BD2FA; color: white; padding: 12px 24px; border-radius: 8px; display: flex; align-items: center; gap: 8px; font-weight: 600; border: none; cursor: pointer; transition: all 0.2s;">
    <img src="/images/payments/wave_2.svg" alt="Wave" style="width: 20px; height: 20px; flex-shrink: 0;" />
    <span>Payer avec Wave</span>
  </button>`);
  
  choices.push('üí≥ Carte bancaire');
  choices.push('üõµ Payer √† la livraison');
  
  return choices;
}

  private async decrementProductStock(productId: string, quantity: number): Promise<void> {
    try {
      const { data: product, error: fetchError } = await supabase
        .from('products')
        .select('stock_quantity')
        .eq('id', productId)
        .single();

      if (fetchError) {
        console.error('‚ùå Error fetching product stock:', fetchError);
        return;
      }

      const newStock = Math.max(0, (product.stock_quantity || 0) - quantity);

      const { error: updateError } = await supabase
        .from('products')
        .update({ 
          stock_quantity: newStock,
          updated_at: new Date().toISOString()
        })
        .eq('id', productId);

      if (updateError) {
        console.error('‚ùå Error updating product stock:', updateError);
      } else {
        console.log(`‚úÖ Stock updated for product ${productId}: ${product.stock_quantity} -> ${newStock}`);
      }
    } catch (error) {
      console.error('‚ùå Error in decrementProductStock:', error);
    }
  }

  private extractFirstName(fullName?: string): string {
    if (!fullName) return 'Client';
    const parts = fullName.trim().split(' ');
    return parts[0] || 'Client';
  }

  private extractLastName(fullName?: string): string {
    if (!fullName) return '';
    const parts = fullName.trim().split(' ');
    return parts.slice(1).join(' ') || '';
  }

  /**
   * ‚úÖ M√âTHODE UTILITAIRE: Obtenir le drapeau du pays
   */
  private getCountryFlag(countryCode: string): string {
    const flags: Record<string, string> = {
      'SN': 'üá∏üá≥',
      'CI': 'üá®üáÆ', 
      'BJ': 'üáßüáØ',
      'BF': 'üáßüá´',
      'ML': 'üá≤üá±',
      'NE': 'üá≥üá™',
      'TG': 'üáπüá¨',
      'CM': 'üá®üá≤',
      'GA': 'üá¨üá¶',
      'FR': 'üá´üá∑',
      'MA': 'üá≤üá¶',
      'DZ': 'üá©üáø',
      'TN': 'üáπüá≥'
    };
    
    return flags[countryCode] || 'üì±';
  }

  private createErrorMessage(sessionId: string, errorMessage: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚ùå **Erreur temporaire**

${errorMessage}

üîÑ Voulez-vous r√©essayer ?`,
      choices: ['üîÑ R√©essayer', 'üìû Contacter le support'],
      assistant: this.getBotInfo(),
      metadata: {
        nextStep: 'express_error' as ConversationStep,
        flags: { expressMode: true, hasError: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private getBotInfo() {
    return {
      name: 'Rose',
      title: 'Assistante d\'achat',
      avatar: undefined
    };
  }

  // ==========================================
  // FLOW CONVERSATIONNEL (Garde l'existant)
  // ==========================================

  async handleConversationalFlow(
    sessionId: string,
    message: string,
    currentStep: ConversationStep
  ): Promise<ChatMessage> {
    // D√©l√©guer au ChatService existant pour le mode conversationnel
    return {
      type: 'assistant',
      content: 'Mode conversationnel en cours de d√©veloppement...',
      choices: [],
      assistant: this.getBotInfo(),
      metadata: { nextStep: currentStep },
      timestamp: new Date().toISOString()
    };
  }
}