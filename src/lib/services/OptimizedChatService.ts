// src/lib/services/OptimizedChatService.ts - VERSION COMPL√àTEMENT CORRIG√âE

import { supabase } from '@/lib/supabase';
import type { 
  ChatMessage, 
  ConversationStep, 
  ChatOrderData,
  PaymentProvider,
  ProductData
} from '@/types/chat';
import { WelcomeMessageService } from './WelcomeMessageService';

// Types pour le flow express
interface ExpressOrderState {
  step: 'quantity' | 'phone' | 'name' | 'address' | 'payment' | 'confirmation';
  data: {
    productId: string;
    productName: string;
    unitPrice: number;
    quantity: number;
    phone?: string;
    firstName?: string;
    lastName?: string;
    city?: string;
    address?: string;
    paymentMethod?: PaymentProvider;
  };
  flags: {
    isExistingCustomer: boolean;
    needsNameCollection: boolean;
    needsAddressCollection: boolean;
  };
  sessionId: string;
  createdAt: string;
  updatedAt: string;
}

export class OptimizedChatService {
  private static instance: OptimizedChatService;
  private orderStates = new Map<string, ExpressOrderState>();
  private welcomeService = WelcomeMessageService.getInstance();

  private constructor() {
    console.log('üîß OptimizedChatService v8.0 initialized - FULLY CORRECTED WITH AI');
  }

  public static getInstance(): OptimizedChatService {
    if (!this.instance) {
      this.instance = new OptimizedChatService();
    }
    return this.instance;
  }

  // ‚úÖ M√âTHODE PRINCIPALE COMPATIBLE AVEC L'API - ENTI√àREMENT CORRIG√âE
  public async processMessage(
    sessionId: string,
    message: string,
    currentStep: ConversationStep,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    try {
      console.log('üîç ProcessMessage called with:', {
        sessionId: sessionId?.substring(0, 20) + '...',
        message: message?.substring(0, 50) + '...',
        currentStep,
        productId,
        productName
      });

      // V√©rifications de s√©curit√©
      if (!sessionId || !productId || !productName) {
        throw new Error('Param√®tres manquants');
      }

      // ‚úÖ Toujours essayer de r√©cup√©rer l'√©tat depuis la base
      await this.loadOrderStateFromDatabase(sessionId);

      // ‚úÖ NOUVELLE PRIORIT√â 1: Gestion des messages libres AVANT tout le reste
      if (!this.isSpecialMessage(message) && !this.orderStates.has(sessionId) && !currentStep.startsWith('express_')) {
        console.log('ü§ñ FREE TEXT MESSAGE DETECTED - Processing with AI');
        return await this.handleFreeTextWithAI(message, productId, productName, sessionId);
      }

      // ‚úÖ PRIORIT√â 2: "Je veux l'acheter maintenant"
      if (this.isExpressPurchaseTrigger(message)) {
        console.log('üõí Express purchase detected');
        return await this.startExpressPurchase(sessionId, productId, productName);
      }

      // ‚úÖ PRIORIT√â 3: Gestion du bouton "T√©l√©charger l'app mobile"
      if (this.isAppDownloadTrigger(message)) {
        console.log('üì± App download button detected');
        return await this.handleAppDownload();
      }

      // ‚úÖ PRIORIT√â 4: Gestion du retour Wave et demande d'ID transaction
      if (message === 'WAVE_PAYMENT_INITIATED') {
        console.log('üåä Wave payment return detected');
        return await this.handleWavePaymentReturn(sessionId);
      }

      // ‚úÖ PRIORIT√â 5: Validation d'ID de transaction Wave
      if (this.isWaveTransactionId(message)) {
        console.log('üîë Wave transaction ID detected');
        return await this.handleWaveTransactionVerification(sessionId, message);
      }

      // ‚úÖ PRIORIT√â 6: G√©rer le flow express (√©tapes sc√©naris√©es) 
      if (currentStep.startsWith('express_') || this.orderStates.has(sessionId)) {
        console.log('üì¶ Express flow step detected');
        return await this.handleExpressFlowInternal(sessionId, message, currentStep, productId, productName);
      }

      // ‚úÖ PRIORIT√â 7: G√©rer les autres boutons du message d'accueil
      if (this.isWelcomeButtonChoice(message)) {
        console.log('üåπ Welcome button choice detected');
        return await this.welcomeService.handleWelcomeButtonResponse(message, productId, productName);
      }

      // ‚úÖ PRIORIT√â 8: G√©rer les questions pr√©d√©finies
      if (this.isPredefinedQuestion(message)) {
        console.log('üìã Predefined question detected');
        return await this.handlePredefinedQuestion(message, productId, productName);
      }

      // ‚úÖ PRIORIT√â 9: Gestion des boutons "g√©n√©riques"
      if (this.isGenericButton(message)) {
        console.log('üîò Generic button detected');
        return await this.handleGenericButton(message, productId, productName);
      }

      // ‚úÖ PRIORIT√â 10: Gestion sp√©ciale "Commander un autre jeu"
      if (message.includes('Commander un autre jeu') || message.includes('commander un autre')) {
        console.log('üõçÔ∏è Upsell request detected');
        return await this.handleUpsellRequest(productId);
      }

      // ‚úÖ FALLBACK: Messages libres ‚Üí IA
      console.log('ü§ñ Fallback: Processing with AI');
      return await this.handleFreeTextWithAI(message, productId, productName, sessionId);

    } catch (error) {
      console.error('‚ùå Error in processMessage:', error);
      return this.createErrorMessage(`Erreur: ${error instanceof Error ? error.message : 'Inconnue'}`);
    }
  }

  // ‚úÖ NOUVELLE FONCTION CORRIG√âE: Gestion des messages libres avec IA
  private async handleFreeTextWithAI(
    message: string,
    productId: string,
    productName: string,
    sessionId: string
  ): Promise<ChatMessage> {
    try {
      console.log('üß† Processing free text with OpenAI:', message.substring(0, 50));

      // ‚úÖ √âTAPE 1: Rechercher dans la base de connaissances d'abord
      const knowledgeResponse = await this.searchKnowledgeBase(message, productId);
      
      if (knowledgeResponse && knowledgeResponse.confidence > 0.7) {
        console.log('‚úÖ Knowledge base match found:', knowledgeResponse.confidence);
        
        return {
          type: 'assistant',
          content: knowledgeResponse.response,
          choices: [
            'Je veux l\'acheter maintenant',
            'J\'ai d\'autres questions',
            'Comment y jouer ?',
            'C\'est pour qui ?'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'knowledge_response' as ConversationStep,
            flags: { 
              knowledgeBaseUsed: true,
              confidence: knowledgeResponse.confidence 
            }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ √âTAPE 2: Utiliser OpenAI pour une r√©ponse intelligente
      const aiResponse = await this.getOpenAIResponse(message, productId, productName, sessionId);
      
      return {
        type: 'assistant',
        content: aiResponse,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Quels sont les b√©n√©fices ?'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'ai_response' as ConversationStep,
          flags: { 
            aiResponseUsed: true 
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in handleFreeTextWithAI:', error);
      
      // Fallback vers une r√©ponse g√©n√©rique utile
      return {
        type: 'assistant',
        content: `Je comprends votre question sur **${productName}**.

Laissez-moi vous orienter vers les informations les plus utiles :`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Quels sont les b√©n√©fices ?',
          'Je veux l\'acheter maintenant'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'question_redirect' as ConversationStep,
          flags: { fallbackUsed: true }
        },
        timestamp: new Date().toISOString()
      };
    }
  }

  // ‚úÖ NOUVELLE FONCTION: Recherche dans la base de connaissances AM√âLIOR√âE
  private async searchKnowledgeBase(message: string, productId: string): Promise<{
    response: string;
    confidence: number;
  } | null> {
    try {
      console.log('üîç Searching knowledge base for:', message.substring(0, 30));

      const { data: knowledgeItems, error } = await supabase
        .from('knowledge_base')
        .select('*')
        .eq('is_active', true)
        .limit(20);

      if (error || !knowledgeItems || knowledgeItems.length === 0) {
        console.log('‚ö†Ô∏è No knowledge base items found');
        return null;
      }

      return this.processKnowledgeItems(message, knowledgeItems, productId);
    } catch (error) {
      console.error('‚ùå Error searching knowledge base:', error);
      return null;
    }
  }

  // ‚úÖ FONCTION UTILITAIRE: Traiter les √©l√©ments de la base de connaissances
  private processKnowledgeItems(message: string, knowledgeItems: any[], productId: string): {
    response: string;
    confidence: number;
  } | null {
    const messageLower = message.toLowerCase();
    let bestMatch = null;
    let bestScore = 0;

    for (const item of knowledgeItems) {
      const score = this.calculateRelevanceScore(messageLower, item);
      
      if (score > bestScore && score > 0.3) {
        bestScore = score;
        bestMatch = item;
      }
    }

    if (bestMatch && bestScore > 0.5) {
      let response = bestMatch.response_template || bestMatch.content || bestMatch.response;
      
      // Remplacer les variables dans la r√©ponse
      response = response
        .replace(/\{product_name\}/g, 'votre jeu')
        .replace(/\{product_price\}/g, '14,000 FCFA');

      return {
        response: response,
        confidence: bestScore
      };
    }

    return null;
  }

  // ‚úÖ FONCTION UTILITAIRE: Calculer le score de pertinence
  private calculateRelevanceScore(message: string, knowledgeItem: any): number {
    try {
      let score = 0;
      const messageWords = message.split(/\s+/);
      
      // V√©rifier les patterns de questions si disponibles
      if (knowledgeItem.question_patterns && Array.isArray(knowledgeItem.question_patterns)) {
        for (const pattern of knowledgeItem.question_patterns) {
          if (message.includes(pattern.toLowerCase())) {
            score += 0.6;
          }
        }
      }

      // V√©rifier les mots-cl√©s
      if (knowledgeItem.keywords && Array.isArray(knowledgeItem.keywords)) {
        for (const keyword of knowledgeItem.keywords) {
          if (message.includes(keyword.toLowerCase())) {
            score += 0.3;
          }
        }
      }

      // V√©rifier le contenu et le titre
      const content = (knowledgeItem.content || '').toLowerCase();
      const title = (knowledgeItem.title || '').toLowerCase();
      
      for (const word of messageWords) {
        if (word.length > 2) {
          if (content.includes(word)) score += 0.1;
          if (title.includes(word)) score += 0.2;
        }
      }

      return Math.min(score, 1.0);
    } catch (error) {
      console.error('‚ùå Error calculating relevance score:', error);
      return 0;
    }
  }

  // ‚úÖ NOUVELLE FONCTION CORRIG√âE: R√©ponse OpenAI intelligente
  private async getOpenAIResponse(
    message: string, 
    productId: string, 
    productName: string, 
    sessionId: string
  ): Promise<string> {
    try {
      console.log('ü§ñ Calling OpenAI for intelligent response');

      // R√©cup√©rer les informations du produit
      const productInfo = await this.getProductInfo(productId);
      
      // ‚úÖ Construire un prompt contextualis√© et intelligent
      const systemPrompt = `Tu es Rose, l'assistante commerciale IA de VIENS ON S'CONNA√éT, sp√©cialis√©e dans les jeux de cartes relationnels au S√©n√©gal.

CONTEXTE PRODUIT:
- Nom: ${productName}
- Prix: ${productInfo.price} FCFA
- Description: ${productInfo.description || 'Jeu de cartes pour renforcer les relations'}

MISSION: R√©pondre √† la question du client de mani√®re chaleureuse, informative et commerciale.
STYLE: Amicale, professionnelle, orient√©e vente, typiquement s√©n√©galaise.
STRUCTURE: 2-3 phrases maximum + question d'engagement.

R√àGLES IMPORTANTES:
1. Toujours finir par une question pour engager davantage
2. Utiliser des √©mojis appropri√©s mais avec parcimonie
3. Mettre l'accent sur les b√©n√©fices relationnels
4. Adapter le ton selon le contexte s√©n√©galais/africain
5. Ne pas h√©siter √† mentionner l'app mobile si pertinent

Question du client: "${message}"`;

      // ‚úÖ Utiliser OpenAI avec la cl√© d'environnement
      if (process.env.OPENAI_API_KEY) {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o',
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: message }
            ],
            max_tokens: 250,
            temperature: 0.7,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          const aiAnswer = data.choices?.[0]?.message?.content;
          
          if (aiAnswer && aiAnswer.trim()) {
            console.log('‚úÖ OpenAI response generated successfully');
            return aiAnswer.trim();
          }
        } else {
          console.error('‚ùå OpenAI API error:', response.status, response.statusText);
        }
      }

      // ‚úÖ Fallback intelligent si OpenAI non disponible
      return this.generateIntelligentFallback(message, productName, productInfo);

    } catch (error) {
      console.error('‚ùå Error getting OpenAI response:', error);
      return this.generateIntelligentFallback(message, productName, { price: '14,000' });
    }
  }

  // ‚úÖ NOUVELLE FONCTION: Fallback intelligent sans IA
  private generateIntelligentFallback(
    message: string, 
    productName: string, 
    productInfo: any
  ): string {
    const messageLower = message.toLowerCase();

    // R√©ponses contextuelles selon le type de question
    if (messageLower.includes('prix') || messageLower.includes('co√ªt') || messageLower.includes('cher')) {
      return `Le jeu **${productName}** co√ªte ${productInfo.price} FCFA. C'est un investissement dans la qualit√© de vos relations ! 

Pensez-vous que ce prix correspond √† la valeur que cela apportera √† votre couple/famille ?`;
    }

    if (messageLower.includes('livraison') || messageLower.includes('livrer') || messageLower.includes('exp√©dition')) {
      return `Pour la livraison de **${productName}**, nous livrons partout au S√©n√©gal sous 24-48h ! üöö

Dans quelle ville souhaitez-vous qu'on vous livre ?`;
    }

    if (messageLower.includes('diff√©rence') || messageLower.includes('compare') || messageLower.includes('autres jeux')) {
      return `**${productName}** se distingue par ses 150 cartes sp√©cialement con√ßues pour cr√©er des conversations authentiques et profondes.

Souhaitez-vous que je vous explique en d√©tail les sp√©cificit√©s de ce jeu ?`;
    }

    if (messageLower.includes('b√©n√©fice') || messageLower.includes('avantage') || messageLower.includes('pourquoi')) {
      return `Les couples qui jouent √† **${productName}** t√©moignent d'une meilleure communication et d'une complicit√© renforc√©e ! ‚ú®

Aimeriez-vous d√©couvrir comment ce jeu peut transformer vos conversations ?`;
    }

    // R√©ponse g√©n√©rique mais intelligente
    return `Excellente question sur **${productName}** ! 

Ce jeu a d√©j√† aid√© des milliers de couples et familles √† cr√©er des liens plus forts. Que souhaitez-vous savoir pr√©cis√©ment ?`;
  }

  // ‚úÖ NOUVELLE FONCTION: Gestion de l'upsell avec cartes produits
  private async handleUpsellRequest(currentProductId: string): Promise<ChatMessage> {
    try {
      console.log('üõçÔ∏è Handling upsell request for product:', currentProductId);

      // R√©cup√©rer d'autres jeux pour l'upsell
      const { data: relatedProducts, error } = await supabase
        .from('products')
        .select('id, name, price, images, description')
        .eq('status', 'active')
        .neq('id', currentProductId)
        .limit(3);

      if (error || !relatedProducts || relatedProducts.length === 0) {
        return {
          type: 'assistant',
          content: `üõçÔ∏è **Nos autres jeux seront bient√¥t disponibles !**

En attendant, t√©l√©chargez notre app mobile pour d√©couvrir tous nos jeux :`,
          choices: [
            'üì± T√©l√©charger l\'app mobile',
            '‚úÖ Merci, c\'est tout'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'app_recommendation' as ConversationStep
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ CORRECTION MAJEURE: Formater les produits pour ChatProductCards
      const formattedProducts = relatedProducts.map(product => ({
        id: product.id,
        name: product.name,
        price: product.price,
        images: product.images || [],
        reason: `Compl√©ment parfait √† votre ${currentProductId}`,
        urgency: 'medium' as const,
        stats: {
          sold: Math.floor(Math.random() * 50) + 10,
          satisfaction: 4.8,
          reviews: Math.floor(Math.random() * 20) + 5
        }
      }));

      return {
        type: 'assistant',
        content: `üõçÔ∏è **Nos autres jeux populaires :**

Nos clients qui ach√®tent ce jeu prennent souvent aussi :`,
        choices: [], // Pas de choices car on utilise les cartes produits
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'upsell_display' as ConversationStep,
          // ‚úÖ CORRECTION: Utiliser le bon format pour les cartes produits
          recommendedProducts: formattedProducts,
          flags: { 
            showRecommendations: true,
            upsellMode: true 
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error handling upsell request:', error);
      return this.createErrorMessage('Impossible de charger les autres jeux.');
    }
  }

  // ‚úÖ FONCTION: D√©tecter les triggers de t√©l√©chargement app
  private isAppDownloadTrigger(message: string): boolean {
    const triggers = [
      't√©l√©charger l\'app mobile',
      't√©l√©charger l\'application',
      't√©l√©charger app',
      'app mobile',
      'application mobile',
      'download app',
      'üì± t√©l√©charger'
    ];
    
    return triggers.some(trigger => 
      message.toLowerCase().includes(trigger.toLowerCase())
    );
  }

  // ‚úÖ FONCTION: G√©rer le t√©l√©chargement de l'app
  private async handleAppDownload(): Promise<ChatMessage> {
    const isIOS = typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isAndroid = typeof window !== 'undefined' && /Android/.test(navigator.userAgent);
    const isMobile = isIOS || isAndroid;
    
    const appStoreUrl = 'https://apps.apple.com/app/viensonsconnait/id6464125284';
    
    if (isMobile) {
      if (typeof window !== 'undefined') {
        window.location.href = appStoreUrl;
      }

      return {
        type: 'assistant',
        content: `üì± **Redirection vers l'App Store...**

Vous √™tes redirig√© vers l'App Store pour t√©l√©charger VIENS ON S'CONNA√éT !

‚ú® **Avec l'app mobile :**
üéÆ Acc√®s √† tous nos jeux
üíï Mode couple & famille
üéØ D√©fis personnalis√©s
‚ú® Contenu exclusif`,
        choices: [
          'üè† Retour √† l\'accueil',
          'üõçÔ∏è Commander un jeu physique'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'app_download_mobile' as ConversationStep,
          flags: { appDownloadTriggered: true }
        },
        timestamp: new Date().toISOString()
      };
    } else {
      if (typeof window !== 'undefined') {
        window.open(appStoreUrl, '_blank');
      }

      return {
        type: 'assistant',
        content: `üì± **App Store ouvert !**

Je viens d'ouvrir l'App Store dans un nouvel onglet ! 

‚ú® **Avec l'app mobile :**
üéÆ Tous nos jeux de cartes
üíï Mode couple, famille, amis
üì± Disponible partout

**Lien :** ${appStoreUrl}`,
        choices: [
          'üè† Retour √† l\'accueil',
          'üõçÔ∏è Commander un autre jeu'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'app_download_desktop' as ConversationStep,
          flags: { appDownloadTriggered: true }
        },
        timestamp: new Date().toISOString()
      };
    }
  }

  // ‚úÖ FONCTIONS UTILITAIRES (toutes les autres fonctions restent identiques)
  
  private async loadOrderStateFromDatabase(sessionId: string): Promise<void> {
    try {
      if (this.orderStates.has(sessionId)) {
        return;
      }

      const { data: session, error } = await supabase
        .from('chat_sessions')
        .select('*')
        .eq('session_id', sessionId)
        .maybeSingle();

      if (error) {
        console.error('‚ùå Error loading session:', error);
        return;
      }

      if (session && session.order_state) {
        const orderState = session.order_state as ExpressOrderState;
        this.orderStates.set(sessionId, orderState);
        console.log('‚úÖ Order state loaded from database:', orderState.step);
      }
    } catch (error) {
      console.error('‚ùå Error in loadOrderStateFromDatabase:', error);
    }
  }

  private async saveOrderStateToDatabase(sessionId: string, orderState: ExpressOrderState): Promise<void> {
    try {
      const sessionData = {
        session_id: sessionId,
        product_id: orderState.data.productId,
        order_state: orderState,
        current_step: orderState.step,
        updated_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('chat_sessions')
        .upsert(sessionData, { onConflict: 'session_id' });

      if (error) {
        console.error('‚ùå Error saving session:', error);
      }
    } catch (error) {
      console.error('‚ùå Error in saveOrderStateToDatabase:', error);
    }
  }

  // ‚úÖ D√âTECTER LES TRIGGERS D'ACHAT EXPRESS
  private isExpressPurchaseTrigger(message: string): boolean {
    const triggers = [
      'Je veux l\'acheter maintenant',
      'acheter maintenant',
      'commander maintenant',
      'Je veux l\'acheter',
      '‚ö° Commander rapidement'
    ];
    
    return triggers.some(trigger => 
      message.toLowerCase().includes(trigger.toLowerCase())
    );
  }

  // ‚úÖ D√âMARRER L'ACHAT EXPRESS
  public async startExpressPurchase(
    sessionId: string,
    productId: string,
    productName?: string
  ): Promise<ChatMessage> {
    try {
      console.log('üöÄ startExpressPurchase called');

      const { data: product, error } = await supabase
        .from('products')
        .select('name, price')
        .eq('id', productId)
        .single();

      if (error || !product) {
        throw new Error('Produit non trouv√©');
      }

      if (this.orderStates.has(sessionId)) {
        this.orderStates.delete(sessionId);
      }

      const orderState: ExpressOrderState = {
        step: 'quantity',
        data: {
          productId,
          productName: productName || product.name,
          unitPrice: product.price,
          quantity: 1
        },
        flags: {
          isExistingCustomer: false,
          needsNameCollection: true,
          needsAddressCollection: true
        },
        sessionId: sessionId,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      this.orderStates.set(sessionId, orderState);
      await this.saveOrderStateToDatabase(sessionId, orderState);

      return {
        type: 'assistant' as const,
        content: `üõí **Parfait ! Commen√ßons votre commande**

${productName || product.name} - Excellent choix ! üéâ

Combien d'exemplaires voulez-vous ?`,
        choices: [
          '1 exemplaire',
          '2 exemplaires',
          '3 exemplaires', 
          'Autre quantit√©'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'express_quantity' as ConversationStep,
          productId: productId,
          flags: { 
            expressMode: true,
            quantitySelection: true
          }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in startExpressPurchase:', error);
      return this.createErrorMessage(`Erreur: ${error instanceof Error ? error.message : 'Inconnue'}`);
    }
  }

  // ‚úÖ GESTION DU FLOW EXPRESS
  private async handleExpressFlowInternal(
    sessionId: string,
    message: string,
    currentStep: ConversationStep,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    try {
      await this.loadOrderStateFromDatabase(sessionId);
      
      let orderState = this.orderStates.get(sessionId);
      
      if (!orderState && currentStep === 'express_quantity') {
        const product = await this.getProductData(productId);
        orderState = {
          step: 'quantity',
          data: {
            productId,
            productName,
            unitPrice: product.price,
            quantity: 1
          },
          flags: {
            isExistingCustomer: false,
            needsNameCollection: true,
            needsAddressCollection: true
          },
          sessionId: sessionId,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        };
        this.orderStates.set(sessionId, orderState);
        await this.saveOrderStateToDatabase(sessionId, orderState);
      }

      if (!orderState) {
        return this.createErrorMessage('Session expir√©e. Veuillez recommencer.');
      }

      switch (orderState.step) {
        case 'quantity':
          return await this.handleQuantityStep(sessionId, message, orderState);
        case 'phone':
          return await this.handlePhoneStep(sessionId, message, orderState);
        case 'name':
          return await this.handleNameStep(sessionId, message, orderState);
        case 'address':
          return await this.handleAddressStep(sessionId, message, orderState);
        case 'payment':
          return await this.handlePaymentStep(sessionId, message, orderState);
        case 'confirmation':
          return await this.handleConfirmationStep(sessionId, message, orderState);
        default:
          return this.createErrorMessage('√âtape inconnue');
      }

    } catch (error) {
      console.error('‚ùå Error in express flow:', error);
      return this.createErrorMessage('Erreur dans le processus de commande');
    }
  }

  // ‚úÖ TOUTES LES AUTRES M√âTHODES (restent identiques au fichier original)
  
  private isSpecialMessage(message: string): boolean {
    const specialTriggers = [
      'je veux l\'acheter',
      'acheter maintenant',
      'commander',
      't√©l√©charger l\'app',
      'wave_payment_initiated',
      'comment y jouer',
      'c\'est pour qui',
      'quels sont les b√©n√©fices',
      'parfait merci',
      'retour accueil',
      'poser une question'
    ];
    
    return specialTriggers.some(trigger => 
      message.toLowerCase().includes(trigger.toLowerCase())
    );
  }

  private isWelcomeButtonChoice(message: string): boolean {
    const welcomeChoices = [
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'questions √† poser',
      'en savoir plus'
    ];
    
    return welcomeChoices.some(choice => 
      message.toLowerCase().includes(choice.toLowerCase())
    );
  }

  private isPredefinedQuestion(message: string): boolean {
    const predefinedQuestions = [
      'comment y jouer',
      'c\'est pour qui',
      'quels sont les b√©n√©fices'
    ];
    
    return predefinedQuestions.some(question => 
      message.toLowerCase().includes(question.toLowerCase())
    );
  }

  private isGenericButton(message: string): boolean {
    const genericButtons = [
      'parfait, merci',
      'retour √† l\'accueil',
      'poser une question',
      'contacter le support',
      'r√©essayer'
    ];
    
    return genericButtons.some(button => 
      message.toLowerCase().includes(button.toLowerCase())
    );
  }

  private async handlePredefinedQuestion(
    message: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    if (message.includes('comment y jouer')) {
      return {
        type: 'assistant',
        content: `üéÆ **Comment jouer √† ${productName} :**

**C'est tr√®s simple :**
1Ô∏è‚É£ M√©langez les 150 cartes
2Ô∏è‚É£ Tirez une carte chacun votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement
5Ô∏è‚É£ √âchangez sur vos r√©ponses

üéØ **Objectif :** Cr√©er des conversations authentiques !`,
        choices: [
          'Je veux l\'acheter maintenant',
          'C\'est pour qui ?',
          'Quels sont les b√©n√©fices ?'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'game_rules_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };
    }

    if (message.includes('c\'est pour qui')) {
      return {
        type: 'assistant',
        content: `üë• **${productName} est parfait pour :**

‚ù§Ô∏è **Les couples** qui veulent se red√©couvrir
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Les familles** pour cr√©er des liens forts  
üë´ **Les amis** qui veulent approfondir leur amiti√©
üíº **Les coll√®gues** pour la coh√©sion d'√©quipe

‚ú® **Peu importe votre √¢ge**, ce jeu s'adapte √† tous !`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'Quels sont les b√©n√©fices ?'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'target_audience_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };
    }

    if (message.includes('b√©n√©fices')) {
      return {
        type: 'assistant',
        content: `‚ú® **Les b√©n√©fices de ${productName} :**

üéØ **Communication am√©lior√©e**
‚Ä¢ Conversations plus profondes
‚Ä¢ Meilleure √©coute mutuelle

‚ù§Ô∏è **Relation renforc√©e**  
‚Ä¢ Complicit√© accrue
‚Ä¢ Confiance d√©velopp√©e

üîç **D√©couverte mutuelle**
‚Ä¢ Apprendre des choses nouvelles
‚Ä¢ Comprendre ses valeurs

üòå **Plus de moments complices** et moins de malentendus !`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'C\'est pour qui ?'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'benefits_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };
    }

    return {
      type: 'assistant',
      content: `Je suis l√† pour vous aider avec ${productName} !

Que souhaitez-vous savoir ?`,
      choices: [
        'Comment y jouer ?',
        'C\'est pour qui ?',
        'Quels sont les b√©n√©fices ?'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'question_mode' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleGenericButton(
    message: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('parfait') || lowerMessage.includes('merci')) {
      return {
        type: 'assistant',
        content: `üòä **Avec grand plaisir !**

C'√©tait un plaisir de vous accompagner. J'esp√®re que vous allez adorer **${productName}** ! üíï

Y a-t-il autre chose que je puisse faire pour vous ?`,
        choices: [
          'üõçÔ∏è Commander un autre jeu',
          'üì± T√©l√©charger l\'app mobile',
          'üè† Retour √† l\'accueil'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'satisfaction_confirmed' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    }

    if (lowerMessage.includes('retour') && lowerMessage.includes('accueil')) {
      return {
        type: 'assistant',
        content: `üè† **Merci pour votre visite !**

Vous pouvez fermer cette fen√™tre pour retourner √† l'accueil.

**Avant de partir :**`,
        choices: [
          'üõçÔ∏è Voir tous nos jeux',
          'üì± T√©l√©charger l\'app mobile',
          'üìû Nous contacter'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'return_to_home' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    }

    return {
      type: 'assistant',
      content: `üòä **Je suis l√† pour vous aider !**

Comment puis-je vous accompagner avec **${productName}** ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions',
        'Je veux en savoir plus'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'generic_help' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ GESTION DES √âTAPES EXPRESS (m√©thodes simplifi√©es)
  
  private async handleQuantityStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    let quantity = 1;

    if (message.includes('1 exemplaire')) quantity = 1;
    else if (message.includes('2 exemplaires')) quantity = 2;
    else if (message.includes('3 exemplaires')) quantity = 3;
    else {
      const numMatch = message.match(/(\d+)/);
      if (numMatch) {
        quantity = parseInt(numMatch[1]);
        if (quantity < 1 || quantity > 10) {
          return this.createErrorMessage('Quantit√© entre 1 et 10 seulement.');
        }
      }
    }

    orderState.data.quantity = quantity;
    orderState.step = 'phone';
    orderState.updatedAt = new Date().toISOString();
    
    this.orderStates.set(sessionId, orderState);
    await this.saveOrderStateToDatabase(sessionId, orderState);

    const totalAmount = orderState.data.unitPrice * quantity;

    return {
      type: 'assistant',
      content: `‚úÖ **${quantity} exemplaire${quantity > 1 ? 's' : ''} - ${totalAmount.toLocaleString()} FCFA**

Parfait ! J'ai besoin de votre num√©ro de t√©l√©phone pour la livraison üì±

*Format : +221 77 123 45 67*`,
      choices: [],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'express_phone' as ConversationStep,
        orderData: {
          quantity: quantity,
          totalAmount: totalAmount
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handlePhoneStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    
    const cleanPhone = message.replace(/\s/g, '');
    if (cleanPhone.length < 8) {
      return this.createErrorMessage('Num√©ro trop court. Format : +221 77 123 45 67');
    }

    let formattedPhone = cleanPhone;
    if (!formattedPhone.startsWith('+')) {
      formattedPhone = '+221' + formattedPhone;
    }
    
    orderState.data.phone = formattedPhone;
    orderState.updatedAt = new Date().toISOString();

    // V√©rifier client existant
    const { data: existingCustomer } = await supabase
      .from('customers')
      .select('first_name, last_name, city, address')
      .eq('phone', formattedPhone)
      .maybeSingle();

    if (existingCustomer) {
      orderState.data.firstName = existingCustomer.first_name;
      orderState.data.lastName = existingCustomer.last_name;
      orderState.data.city = existingCustomer.city;
      orderState.data.address = existingCustomer.address;
      orderState.flags.isExistingCustomer = true;
      orderState.step = 'address';
      
      this.orderStates.set(sessionId, orderState);
      await this.saveOrderStateToDatabase(sessionId, orderState);

      return {
        type: 'assistant',
        content: `üëã **Ravi de vous revoir ${existingCustomer.first_name} !**

üìç **Adresse habituelle :** ${existingCustomer.address}, ${existingCustomer.city}

Livraison √† la m√™me adresse ?`,
        choices: [
          'Oui, m√™me adresse',
          'Changer d\'adresse'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'express_address_confirmation' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    } else {
      orderState.step = 'name';
      this.orderStates.set(sessionId, orderState);
      await this.saveOrderStateToDatabase(sessionId, orderState);

      return {
        type: 'assistant',
        content: `üì± **${formattedPhone} enregistr√©**

Bienvenue ! üéâ Quel est votre nom complet ?

*Exemple : Aminata Diallo*`,
        choices: [],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'express_name' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    }
  }

  private async handleNameStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    
    const name = message.trim();
    const parts = name.split(/\s+/);
    
    if (parts.length < 2) {
      return this.createErrorMessage('Nom complet SVP. Exemple : Aminata Diallo');
    }

    orderState.data.firstName = parts[0];
    orderState.data.lastName = parts.slice(1).join(' ');
    orderState.step = 'address';
    orderState.updatedAt = new Date().toISOString();
    
    this.orderStates.set(sessionId, orderState);
    await this.saveOrderStateToDatabase(sessionId, orderState);

    return {
      type: 'assistant',
      content: `üë§ **Enchant√© ${orderState.data.firstName} !**

Votre adresse de livraison ?

*Format : Quartier/Rue, Ville*
*Exemple : Mermoz, Dakar*`,
      choices: [],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'express_address' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleAddressStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    
    if (message.toLowerCase().includes('oui') && orderState.flags.isExistingCustomer) {
      orderState.step = 'payment';
      orderState.updatedAt = new Date().toISOString();
      this.orderStates.set(sessionId, orderState);
      await this.saveOrderStateToDatabase(sessionId, orderState);

      const totalAmount = orderState.data.unitPrice * orderState.data.quantity;

      return {
        type: 'assistant',
        content: `‚úÖ **Livraison confirm√©e**

üìç ${orderState.data.address}, ${orderState.data.city}
üí∞ **Total : ${totalAmount.toLocaleString()} FCFA**

Comment souhaitez-vous payer ?`,
        choices: [
          'üì± Wave (recommand√©)',
          'üí≥ Carte bancaire', 
          'üíµ Paiement √† la livraison'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'express_payment' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    }

    if (message.trim().length > 5) {
      const addressParts = message.split(',').map(part => part.trim());
      
      if (addressParts.length >= 2) {
        orderState.data.address = addressParts[0];
        orderState.data.city = addressParts[1];
      } else {
        orderState.data.address = message.trim();
        orderState.data.city = 'Dakar';
      }

      orderState.step = 'payment';
      orderState.updatedAt = new Date().toISOString();
      this.orderStates.set(sessionId, orderState);
      await this.saveOrderStateToDatabase(sessionId, orderState);

      const totalAmount = orderState.data.unitPrice * orderState.data.quantity;

      return {
        type: 'assistant',
        content: `‚úÖ **Adresse enregistr√©e**

üìç ${orderState.data.address}, ${orderState.data.city}
üí∞ **Total : ${totalAmount.toLocaleString()} FCFA**

Comment souhaitez-vous payer ?`,
        choices: [
          'üì± Wave (recommand√©)',
          'üí≥ Carte bancaire', 
          'üíµ Paiement √† la livraison'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'express_payment' as ConversationStep
        },
        timestamp: new Date().toISOString()
      };
    }

    return this.createErrorMessage('Adresse trop courte. Format : Quartier, Ville');
  }

  private async handlePaymentStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    
    let paymentMethod: PaymentProvider;

    if (message.toLowerCase().includes('wave')) {
      paymentMethod = 'wave';
    } else if (message.toLowerCase().includes('carte')) {
      paymentMethod = 'card';
    } else if (message.toLowerCase().includes('livraison')) {
      paymentMethod = 'cash_on_delivery';
    } else {
      return this.createErrorMessage('Choisissez un mode de paiement valide');
    }

    orderState.data.paymentMethod = paymentMethod;
    orderState.step = 'confirmation';
    orderState.updatedAt = new Date().toISOString();
    this.orderStates.set(sessionId, orderState);
    await this.saveOrderStateToDatabase(sessionId, orderState);

    const orderResult = await this.createOrder(sessionId, orderState);
    
    if (!orderResult.success) {
      return this.createErrorMessage(orderResult.error || 'Erreur cr√©ation commande');
    }

    let paymentInstructions = '';
    if (paymentMethod === 'wave') {
      paymentInstructions = `üì± **Wave** : Cliquez sur le bouton Wave ci-dessous`;
    } else if (paymentMethod === 'card') {
      paymentInstructions = `üí≥ **Carte bancaire** : Redirection vers paiement s√©curis√©`;
    } else {
      paymentInstructions = `üíµ **√Ä la livraison** : Pr√©parez le montant exact`;
    }

    return {
      type: 'assistant',
      content: `üéâ **Commande confirm√©e !**

**N¬∞ :** #${orderResult.orderId}

${paymentInstructions}

**Livraison :**
üìç ${orderState.data.address}, ${orderState.data.city}
‚è∞ 24-48h ouvrables

Merci pour votre confiance ! ‚ú®`,
      choices: paymentMethod === 'wave' ? ['üåä Payer avec Wave'] : 
               paymentMethod === 'card' ? ['üí≥ Payer par carte'] : 
               ['‚≠ê Parfait, merci !', 'üõçÔ∏è Commander un autre jeu'],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'express_completed' as ConversationStep,
        orderData: {
          orderId: orderResult.orderId,
          paymentMethod: paymentMethod
        },
        paymentAmount: orderState.data.unitPrice * orderState.data.quantity,
        flags: { 
          orderCompleted: true,
          [paymentMethod === 'wave' ? 'wavePayment' : 
           paymentMethod === 'card' ? 'stripePayment' : 'cashPayment']: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleConfirmationStep(
    sessionId: string,
    message: string,
    orderState: ExpressOrderState
  ): Promise<ChatMessage> {
    
    this.orderStates.delete(sessionId);
    
    if (message.includes('Commander un autre jeu')) {
      return await this.handleUpsellRequest(orderState.data.productId);
    }

    if (message.includes('T√©l√©charger l\'app')) {
      return await this.handleAppDownload();
    }

    return {
      type: 'assistant',
      content: `‚úÖ **Merci pour votre confiance !**

Votre **${orderState.data.productName}** sera livr√© rapidement.

√Ä tr√®s bient√¥t ! üíï`,
      choices: [
        'üõçÔ∏è Commander un autre jeu',
        'üì± T√©l√©charger l\'app mobile',
        '‚≠ê Merci Rose !'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'post_purchase' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ M√âTHODES UTILITAIRES
  
  private async createOrder(
    sessionId: string,
    orderState: ExpressOrderState
  ): Promise<{ success: boolean; orderId?: string; error?: string }> {
    try {
      const timestamp = Date.now();
      const numericOrderId = parseInt(`${timestamp}${Math.floor(Math.random() * 1000)}`);
      
      const orderData = {
        id: numericOrderId,
        session_id: sessionId,
        product_id: orderState.data.productId,
        first_name: orderState.data.firstName || 'Client',
        last_name: orderState.data.lastName || '',
        phone: orderState.data.phone || '',
        city: orderState.data.city || '',
        address: orderState.data.address || '',
        payment_method: orderState.data.paymentMethod || 'cash_on_delivery',
        status: 'pending',
        payment_status: 'pending',
        total_amount: Number(orderState.data.unitPrice * orderState.data.quantity),
        delivery_cost: 0,
        order_details: JSON.stringify([{
          product_id: orderState.data.productId,
          product_name: orderState.data.productName,
          quantity: Number(orderState.data.quantity),
          unit_price: Number(orderState.data.unitPrice),
          total_price: Number(orderState.data.unitPrice * orderState.data.quantity)
        }]),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('orders')
        .insert(orderData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Database error:', error);
        return { success: false, error: error.message };
      }

      return { success: true, orderId: numericOrderId.toString() };

    } catch (error) {
      console.error('‚ùå Error creating order:', error);
      return { success: false, error: 'Erreur cr√©ation commande' };
    }
  }

  private async getProductData(productId: string): Promise<{ price: number }> {
    try {
      const { data: product } = await supabase
        .from('products')
        .select('price')
        .eq('id', productId)
        .single();

      return { price: product?.price || 14000 };
    } catch (error) {
      return { price: 14000 };
    }
  }

  private async getProductInfo(productId: string): Promise<{
    name: string;
    price: string;
    description?: string;
  }> {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('name, price, description')
        .eq('id', productId)
        .single();

      if (!error && data) {
        return {
          name: data.name,
          price: data.price.toLocaleString(),
          description: data.description
        };
      }
    } catch (error) {
      console.error('‚ùå Error fetching product info:', error);
    }

    return {
      name: 'Le Jeu Pour les Couples',
      price: '14,000',
      description: 'Un jeu r√©volutionnaire pour des conversations authentiques'
    };
  }

  private isWaveTransactionId(message: string): boolean {
    const cleanMessage = message.trim().toUpperCase();
    const waveIdPattern = /^T[A-Z0-9]{8,20}$/;
    return waveIdPattern.test(cleanMessage);
  }

  private async handleWavePaymentReturn(sessionId: string): Promise<ChatMessage> {
    return {
      type: 'assistant',
      content: `‚úÖ **Retour du paiement Wave**

Donnez-moi votre **ID de Transaction Wave** pour confirmer.

üí° **Comment le trouver :**
1. Ouvrez Wave
2. Historique des transactions  
3. Copiez l'ID (commence par 'T')

*Exemple : TJJ4D7OR04EPQAR4FD*`,
      choices: [],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'wave_transaction_verification' as ConversationStep
      },
      timestamp: new Date().toISOString()
    };
  }

  private async handleWaveTransactionVerification(
    sessionId: string,
    transactionId: string
  ): Promise<ChatMessage> {
    
    const cleanTransactionId = transactionId.trim().toUpperCase();
    
    if (!this.isWaveTransactionId(cleanTransactionId)) {
      return this.createErrorMessage('ID Wave invalide. Format : TJJ4D7OR04EPQAR4FD');
    }

    try {
      const { error } = await supabase
        .from('orders')
        .update({
          payment_status: 'completed',
          status: 'confirmed',
          updated_at: new Date().toISOString()
        })
        .eq('session_id', sessionId);

      if (error) {
        return this.createErrorMessage('Erreur de mise √† jour');
      }

      return {
        type: 'assistant',
        content: `üéâ **Paiement Wave confirm√© !**

‚úÖ **Transaction :** ${cleanTransactionId}
‚úÖ **Commande confirm√©e**

**Livraison sous 24-48h**
Merci pour votre confiance ! üôè`,
        choices: [
          '‚≠ê Parfait, merci !',
          'üõçÔ∏è Commander un autre jeu',
          'üì± T√©l√©charger l\'app mobile'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'express_completed' as ConversationStep,
          flags: { orderCompleted: true, waveVerified: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      return this.createErrorMessage('Erreur de v√©rification Wave');
    }
  }

  private createErrorMessage(errorText: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòî **${errorText}**

Voulez-vous r√©essayer ?`,
      choices: ['üîÑ R√©essayer', 'üìû Support'],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'error_recovery' as ConversationStep,
        flags: { hasError: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ M√âTHODES PUBLIQUES pour compatibilit√©
  
  public async handleExpressFlow(
    sessionId: string,
    message: string,
    currentStep: ConversationStep | string
  ): Promise<ChatMessage> {
    await this.loadOrderStateFromDatabase(sessionId);
    
    const orderState = this.orderStates.get(sessionId);
    
    if (!orderState) {
      return this.createErrorMessage('Session expir√©e. Recommencez svp.');
    }

    return await this.handleExpressFlowInternal(
      sessionId, 
      message, 
      currentStep as ConversationStep, 
      orderState.data.productId, 
      orderState.data.productName
    );
  }

  public async handleExpressStep(
    sessionId: string,
    input: string,
    currentStep: string
  ): Promise<ChatMessage> {
    return this.handleExpressFlow(sessionId, input, currentStep);
  }
}