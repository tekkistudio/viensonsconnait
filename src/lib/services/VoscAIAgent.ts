// src/lib/services/VoscAIAgent.ts

import { supabase } from '@/lib/supabase';
import type { 
  ChatMessage, 
  ProductData, 
  CustomerData,
  OrderData,
  ConversationStep
} from '@/types/chat';

interface AIContext {
  productId?: string;
  sessionId: string;
  conversationHistory: ChatMessage[];
  customerData?: Partial<CustomerData>;
  currentStep?: ConversationStep;
  metadata?: Record<string, any>;
}

interface AIResponse {
  message: string;
  choices: string[];
  nextStep?: ConversationStep;
  actions?: string[];
  metadata?: Record<string, any>;
}

export class VoscAIAgent {
  private static instance: VoscAIAgent;
  private botInfo = {
  name: 'Rose', 
  title: 'Votre Assistante d\'achat',
  avatar: '/path/to/avatar.jpg' // Ajoutez une photo
};

  private constructor() {}

  public static getInstance(): VoscAIAgent {
    if (!this.instance) {
      this.instance = new VoscAIAgent();
    }
    return this.instance;
  }

  /**
   * üéØ M√âTHODE PRINCIPALE: Traiter toute interaction avec l'agent IA
   */
  async processUserMessage(
    userMessage: string,
    context: AIContext
  ): Promise<ChatMessage> {
    try {
      console.log('ü§ñ Agent IA - Traitement du message:', userMessage);
      console.log('üìã Contexte:', context);

      // 1. Analyser l'intention de l'utilisateur
      const intent = await this.analyzeUserIntent(userMessage, context);
      console.log('üéØ Intention d√©tect√©e:', intent);

      // 2. R√©cup√©rer les donn√©es contextuelles n√©cessaires
      const aiData = await this.gatherContextualData(context, intent);

      // 3. G√©n√©rer la r√©ponse appropri√©e selon l'intention
      let response: AIResponse;

      switch (intent.type) {
        case 'purchase_intent':
          response = await this.handlePurchaseIntent(userMessage, context, aiData, intent);
          break;
        
        case 'product_inquiry':
          response = await this.handleProductInquiry(userMessage, context, aiData, intent);
          break;
        
        case 'order_status':
          response = await this.handleOrderStatus(userMessage, context, aiData, intent);
          break;
        
        case 'general_question':
          response = await this.handleGeneralQuestion(userMessage, context, aiData, intent);
          break;
        
        case 'support_request':
          response = await this.handleSupportRequest(userMessage, context, aiData, intent);
          break;
        
        default:
          response = await this.handleUnknownIntent(userMessage, context, aiData);
      }

      // 4. Formatter la r√©ponse finale
      return this.formatChatMessage(response, context);

    } catch (error) {
      console.error('‚ùå Erreur Agent IA:', error);
      return this.createErrorResponse(context);
    }
  }

  /**
   * üß† ANALYSE DE L'INTENTION DE L'UTILISATEUR
   */
  private async analyzeUserIntent(
    message: string, 
    context: AIContext
  ): Promise<{
    type: string;
    confidence: number;
    entities: Record<string, any>;
    subIntent?: string;
  }> {
    const lowerMessage = message.toLowerCase();
    
    // Mots-cl√©s pour identifier les intentions
    const intentKeywords = {
      purchase_intent: [
        'acheter', 'commander', 'commande', 'ach√®te', 'veux', 'prendre',
        'r√©server', 'livre', 'livraison', 'payer', 'paiement', 'prix'
      ],
      product_inquiry: [
        'comment', 'r√®gles', 'jouer', 'fonctionne', 'explique', 'description',
        'd√©tails', 'plus d\'info', 'c\'est quoi', 'b√©n√©fices', 'avantages'
      ],
      order_status: [
        'commande', 'statut', 'o√π', 'livr√©', 're√ßu', 'suivi', 'tracking',
        'd√©lai', 'quand', 'combien de temps'
      ],
      support_request: [
        'probl√®me', 'aide', 'support', 'contact', 'whatsapp', 't√©l√©phone',
        'email', 'r√©clamation', 'retour', 'remboursement'
      ]
    };

    // D√©tection basique de l'intention
    let detectedIntent = 'general_question';
    let confidence = 0.6;
    let entities: Record<string, any> = {};

    for (const [intent, keywords] of Object.entries(intentKeywords)) {
      const matches = keywords.filter(keyword => lowerMessage.includes(keyword));
      if (matches.length > 0) {
        detectedIntent = intent;
        confidence = Math.min(0.9, 0.6 + (matches.length * 0.1));
        entities.matchedKeywords = matches;
        break;
      }
    }

    // Extraction d'entit√©s sp√©cifiques
    if (detectedIntent === 'order_status') {
      // Recherche de num√©ro de commande
      const orderMatch = message.match(/(?:commande|order|#)\s*(\w+)/i);
      if (orderMatch) {
        entities.orderId = orderMatch[1];
      }
    }

    return {
      type: detectedIntent,
      confidence,
      entities,
      subIntent: this.detectSubIntent(detectedIntent, message)
    };
  }

  /**
   * üìä R√âCUP√âRATION DES DONN√âES CONTEXTUELLES
   */
  private async gatherContextualData(
    context: AIContext, 
    intent: any
  ): Promise<Record<string, any>> {
    const data: Record<string, any> = {};

    try {
      // 1. Donn√©es du produit actuel
      if (context.productId) {
        const { data: product } = await supabase
          .from('products')
          .select('*')
          .eq('id', context.productId)
          .single();
        
        if (product) {
          data.currentProduct = product;
        }
      }

      // 2. Liste de tous les produits actifs
      const { data: allProducts } = await supabase
        .from('products')
        .select('*')
        .eq('status', 'active')
        .order('created_at', { ascending: false });
      
      data.allProducts = allProducts || [];

      // 3. Donn√©es client si disponibles
      if (context.customerData?.phone) {
        const { data: customer } = await supabase
          .from('customers')
          .select('*')
          .eq('phone', context.customerData.phone)
          .single();
        
        data.customerProfile = customer;

        // Historique des commandes du client
        if (customer) {
          const { data: orders } = await supabase
            .from('orders')
            .select('*')
            .eq('customer_id', customer.id)
            .order('created_at', { ascending: false })
            .limit(5);
          
          data.customerOrders = orders || [];
        }
      }

      // 4. Zones de livraison
      const { data: deliveryZones } = await supabase
        .from('delivery_zones')
        .select('*');
      
      data.deliveryZones = deliveryZones || [];

      // 5. Statistiques de vente pour la preuve sociale
      const { data: salesStats } = await supabase
        .from('orders')
        .select('id, total_amount, created_at')
        .eq('status', 'confirmed')
        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());
      
      data.recentSalesCount = salesStats?.length || 0;
      data.totalRevenue = salesStats?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0;

      // 6. Base de connaissances pour les r√©ponses
      const { data: knowledge } = await supabase
        .from('knowledge_base')
        .select('*')
        .order('priority', { ascending: true });
      
      data.knowledgeBase = knowledge || [];

      return data;

    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration donn√©es:', error);
      return data;
    }
  }

  /**
   * üõí GESTION DE L'INTENTION D'ACHAT
   */
  private async handlePurchaseIntent(
    message: string,
    context: AIContext,
    data: Record<string, any>,
    intent: any
  ): Promise<AIResponse> {
    
    const product = data.currentProduct;
    
    if (!product) {
      return {
        message: `ü§ó Bonjour ! Je suis Rose, votre conseill√®re VIENS ON S'CONNA√éT.

Je vois que vous √™tes pr√™t(e) √† passer commande ! Quel jeu vous int√©resse le plus ?`,
        choices: data.allProducts.slice(0, 3).map((p: any) => p.name),
        nextStep: 'product_selection' as ConversationStep,
        actions: ['show_products']
      };
    }

    // Analyser le niveau d'urgence de l'achat
    const urgencyKeywords = ['maintenant', 'rapidement', 'vite', 'aujourd\'hui', 'direct'];
    const isUrgent = urgencyKeywords.some(keyword => message.toLowerCase().includes(keyword));

    const recentSales = data.recentSalesCount || 0;
    const socialProof = recentSales > 0 ? `‚ú® ${recentSales} personnes ont d√©j√† command√© ce mois-ci !` : '';

    if (isUrgent) {
      return {
        message: `üöÄ **Parfait ! Commande express pour ${product.name}**

${socialProof}

üí∞ **Prix:** ${product.price.toLocaleString()} FCFA
üì¶ **Livraison:** Disponible dans 12 pays africains

Je peux traiter votre commande en moins d'1 minute ! Quelle quantit√© souhaitez-vous ?`,
        choices: ['1 jeu', '2 jeux', '3 jeux ou plus'],
        nextStep: 'express_quantity' as ConversationStep,
        actions: ['start_express_order'],
        metadata: { 
          flow: 'express',
          productId: product.id,
          showSocialProof: true
        }
      };
    }

    return {
      message: `üéØ **Excellent choix ! ${product.name}**

${socialProof}

${product.description || 'Un jeu qui transforme vos relations en cr√©ant des conversations authentiques et profondes.'}

üí∞ **Prix:** ${product.price.toLocaleString()} FCFA
üöö **Livraison gratuite** d√®s 15 000 FCFA

Comment pr√©f√©rez-vous proc√©der ?`,
      choices: [
        '‚ö° Commande express (< 1 min)',
        'ü§î J\'ai quelques questions',
        'üì± Voir l\'app mobile'
      ],
      nextStep: 'purchase_flow_choice' as ConversationStep,
      actions: ['prepare_order_options']
    };
  }

  /**
   * ‚ùì GESTION DES QUESTIONS SUR LE PRODUIT
   */
  private async handleProductInquiry(
    message: string,
    context: AIContext,
    data: Record<string, any>,
    intent: any
  ): Promise<AIResponse> {
    
    const product = data.currentProduct;
    const lowerMessage = message.toLowerCase();

    // Identifier le type de question
    if (lowerMessage.includes('comment') && (lowerMessage.includes('jouer') || lowerMessage.includes('fonctionne'))) {
      // Question sur les r√®gles du jeu
      const rules = product?.game_rules || 'Les r√®gles d√©taill√©es sont fournies avec le jeu et dans notre application mobile.';
      
      return {
        message: `üéÆ **Comment jouer √† ${product?.name || 'nos jeux'} :**

${rules}

üïí **Dur√©e:** Flexible (15 min √† 2h selon vos envies)
üë• **Joueurs:** √Ä partir de 2 personnes
üéØ **Objectif:** Cr√©er des conversations authentiques et renforcer vos liens

Cela r√©pond √† votre question ?`,
        choices: [
          '‚úÖ Parfait, je veux l\'acheter',
          '‚ùì J\'ai d\'autres questions',
          'üë• C\'est pour qui exactement ?'
        ],
        nextStep: 'post_inquiry' as ConversationStep
      };
    }

    if (lowerMessage.includes('b√©n√©fice') || lowerMessage.includes('avantage') || lowerMessage.includes('pourquoi')) {
      // Question sur les b√©n√©fices
      return {
        message: `üíù **Voici ce que ${product?.name || 'nos jeux'} vous apportent :**

ü§ù **Relations plus fortes** - Conversations authentiques qui rapprochent
üí¨ **Communication am√©lior√©e** - Apprendre √† vraiment s'√©couter
‚ù§Ô∏è **Moments de qualit√©** - Temps pr√©cieux sans distraction
üåü **Souvenirs durables** - Histoires √† partager pour la vie

‚ú® **Bonus:** Plus de 1 000 familles africaines ont d√©j√† transform√© leurs relations !

Lequel de ces b√©n√©fices vous attire le plus ?`,
        choices: [
          'ü§ù Des relations plus fortes',
          'üí¨ Mieux communiquer',
          '‚úÖ Je veux l\'essayer !'
        ],
        nextStep: 'benefit_discussion' as ConversationStep
      };
    }

    // Question g√©n√©rale sur le produit
    return {
      message: `üìã **√Ä propos de ${product?.name || 'ce jeu'} :**

${product?.description || 'Un jeu de cartes relationnel con√ßu pour am√©liorer vos relations.'}

üéØ **Ce qui rend ce jeu unique :**
‚Ä¢ D√©velopp√© par des psychologues au S√©n√©gal
‚Ä¢ Test√© par plus de 1 000 familles africaines
‚Ä¢ Adapt√© √† nos valeurs et notre culture
‚Ä¢ Questions pens√©es pour notre contexte

Qu'aimeriez-vous savoir de plus ?`,
      choices: [
        'üéÆ Comment y jouer ?',
        'üíù Quels b√©n√©fices ?',
        'üõí Je veux l\'acheter'
      ],
      nextStep: 'detailed_inquiry' as ConversationStep
    };
  }

  /**
   * üì¶ GESTION DU STATUT DE COMMANDE
   */
  private async handleOrderStatus(
    message: string,
    context: AIContext,
    data: Record<string, any>,
    intent: any
  ): Promise<AIResponse> {
    
    const orderId = intent.entities?.orderId;
    const customerOrders = data.customerOrders || [];

    if (orderId) {
      // Recherche sp√©cifique d'une commande
      const { data: order } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (order) {
        return {
          message: `üì¶ **Statut de votre commande #${order.id.substring(0, 8)} :**

üìÖ **Pass√©e le:** ${new Date(order.created_at).toLocaleDateString('fr-FR')}
üí∞ **Montant:** ${order.total_amount.toLocaleString()} FCFA
üìã **Statut:** ${this.getOrderStatusText(order.status)}
üöö **Livraison:** ${this.getDeliveryStatusText(order)}

${this.getOrderNextSteps(order)}`,
          choices: [
            'üì± Contacter le livreur',
            '‚ùì J\'ai une question',
            'üîÑ Modifier ma commande'
          ],
          nextStep: 'order_management' as ConversationStep
        };
      }
    }

    if (customerOrders.length > 0) {
      // Afficher les commandes r√©centes du client
      const recentOrder = customerOrders[0];
      
      return {
        message: `üì¶ **Vos commandes r√©centes :**

**Derni√®re commande #${recentOrder.id.substring(0, 8)}**
üìÖ ${new Date(recentOrder.created_at).toLocaleDateString('fr-FR')}
üìã ${this.getOrderStatusText(recentOrder.status)}
üí∞ ${recentOrder.total_amount.toLocaleString()} FCFA

${customerOrders.length > 1 ? `Et ${customerOrders.length - 1} autre(s) commande(s)` : ''}

Besoin d'infos sur une commande sp√©cifique ?`,
        choices: [
          'üìã D√©tails de cette commande',
          'üì¶ Voir toutes mes commandes',
          'üõí Passer une nouvelle commande'
        ],
        nextStep: 'customer_orders' as ConversationStep
      };
    }

    // Aucune commande trouv√©e
    return {
      message: `üîç **Recherche de commande**

Je n'ai pas trouv√© de commande pour ce num√©ro. Voici comment je peux vous aider :

üì± **Avec votre num√©ro de t√©l√©phone** - Je recherche automatiquement
üÜî **Avec votre num√©ro de commande** - Format #ABC123
üìû **Contact direct** - WhatsApp pour un suivi personnalis√©

Avez-vous votre num√©ro de commande ?`,
      choices: [
        'üÜî J\'ai mon num√©ro',
        'üì± Chercher avec mon t√©l√©phone',
        'üìû Contacter par WhatsApp'
      ],
      nextStep: 'order_search' as ConversationStep
    };
  }

  /**
   * üí¨ GESTION DES QUESTIONS G√âN√âRALES
   */
  private async handleGeneralQuestion(
    message: string,
    context: AIContext,
    data: Record<string, any>,
    intent: any
  ): Promise<AIResponse> {
    
    const knowledgeBase = data.knowledgeBase || [];
    const lowerMessage = message.toLowerCase();

    // Recherche dans la base de connaissances
    const relevantKnowledge = knowledgeBase.filter((kb: any) => 
      kb.keywords?.some((keyword: string) => lowerMessage.includes(keyword.toLowerCase()))
    );

    if (relevantKnowledge.length > 0) {
      const knowledge = relevantKnowledge[0];
      return {
        message: `üí° **${knowledge.title}**

${knowledge.content}

Cette information vous aide-t-elle ?`,
        choices: [
          '‚úÖ Parfait, merci !',
          '‚ùì J\'ai une autre question',
          'üõí Je veux acheter maintenant'
        ],
        nextStep: 'knowledge_response' as ConversationStep
      };
    }

    // Questions fr√©quentes sur la marque
    if (lowerMessage.includes('viens on s\'conna√Æt') || lowerMessage.includes('marque') || lowerMessage.includes('qui √™tes')) {
      return {
        message: `üåü **√Ä propos de VIENS ON S'CONNA√éT**

Nous sommes la premi√®re marque s√©n√©galaise de jeux de cartes relationnels ! üá∏üá≥

üéØ **Notre mission :** Transformer les relations en Afrique, une conversation √† la fois
üë®‚Äç‚öïÔ∏è **Notre expertise :** D√©velopp√©s avec des psychologues
‚ú® **Notre impact :** Plus de 1 000 familles satisfaites

üèÜ **Ce qui nous rend uniques :**
‚Ä¢ Con√ßus par et pour les Africains
‚Ä¢ Adapt√©s √† nos valeurs familiales
‚Ä¢ Paiements mobiles int√©gr√©s (Wave, OM)
‚Ä¢ Livraison dans 12 pays africains

Comment puis-je vous aider aujourd'hui ?`,
        choices: [
          'üéÆ D√©couvrir vos jeux',
          'üì± Votre application mobile',
          'üõí Passer une commande'
        ],
        nextStep: 'brand_discovery' as ConversationStep
      };
    }

    // Question sur la livraison
    if (lowerMessage.includes('livraison') || lowerMessage.includes('d√©lai') || lowerMessage.includes('o√π')) {
      const zones = data.deliveryZones || [];
      
      return {
        message: `üöö **Informations livraison VIENS ON S'CONNA√éT**

üìç **Nous livrons dans 12 pays africains :**
S√©n√©gal ‚Ä¢ Mali ‚Ä¢ Burkina Faso ‚Ä¢ C√¥te d'Ivoire ‚Ä¢ Niger ‚Ä¢ Guin√©e ‚Ä¢ Cameroun ‚Ä¢ Gabon ‚Ä¢ Congo ‚Ä¢ B√©nin ‚Ä¢ Togo ‚Ä¢ Mauritanie

‚è±Ô∏è **D√©lais de livraison :**
‚Ä¢ Dakar/Abidjan : 24-48h
‚Ä¢ Autres capitales : 3-5 jours
‚Ä¢ Autres villes : 5-7 jours

üí∞ **Frais de livraison :**
‚Ä¢ Gratuite d√®s 15 000 FCFA
‚Ä¢ Tarifs pr√©f√©rentiels selon la zone

Dans quelle ville souhaitez-vous √™tre livr√©(e) ?`,
        choices: [
          'üìç Ma ville est-elle couverte ?',
          'üí∞ Calculer les frais',
          'üõí Commander maintenant'
        ],
        nextStep: 'delivery_inquiry' as ConversationStep
      };
    }

    // R√©ponse g√©n√©rique
    return {
      message: `ü§ó **Bonjour ! Je suis Rose, votre conseill√®re VIENS ON S'CONNA√éT**

Je suis l√† pour vous aider avec :
‚Ä¢ üéÆ Nos jeux de cartes relationnels
‚Ä¢ üõí Vos commandes et livraisons  
‚Ä¢ üì± Notre application mobile
‚Ä¢ ‚ùì Toutes vos questions

Que puis-je faire pour vous aujourd'hui ?`,
      choices: [
        'üéÆ D√©couvrir vos jeux',
        'üõí Passer une commande',
        '‚ùì Poser une question'
      ],
      nextStep: 'initial_contact' as ConversationStep
    };
  }

  /**
   * üÜò GESTION DES DEMANDES DE SUPPORT
   */
  private async handleSupportRequest(
    message: string,
    context: AIContext,
    data: Record<string, any>,
    intent: any
  ): Promise<AIResponse> {
    
    return {
      message: `üÜò **Support VIENS ON S'CONNA√éT**

Je comprends que vous avez besoin d'aide. Voici vos options :

üì± **WhatsApp (R√©ponse rapide)**
+221 78 136 27 28

üìß **Email (R√©ponse sous 24h)**
contact@viensonseconnait.com

üí¨ **Chat en direct**
Je peux d√©j√† essayer de vous aider ici !

Pr√©f√©rez-vous que je transf√®re votre demande ou puis-je vous aider directement ?`,
      choices: [
        'üí¨ M\'aider ici',
        'üì± Transf√©rer vers WhatsApp',
        'üìß Envoyer un email'
      ],
      nextStep: 'support_routing' as ConversationStep,
      actions: ['prepare_support_transfer']
    };
  }

  /**
   * ‚ùì GESTION DES INTENTIONS NON RECONNUES
   */
  private async handleUnknownIntent(
    message: string,
    context: AIContext,
    data: Record<string, any>
  ): Promise<AIResponse> {
    
    return {
      message: `ü§î **Je ne suis pas s√ªre d'avoir bien compris...**

Pourriez-vous reformuler votre demande ? Je peux vous aider avec :

üéÆ **Nos jeux** - Descriptions, r√®gles, b√©n√©fices
üõí **Commandes** - Achat, statut, livraison
üì± **App mobile** - Fonctionnalit√©s, t√©l√©chargement
‚ùì **Questions** - Marque, produits, support

Ou dites-moi simplement ce que vous cherchez !`,
      choices: [
        'üéÆ D√©couvrir vos jeux',
        'üõí Passer commande',
        'üìû Parler √† un humain'
      ],
      nextStep: 'clarification' as ConversationStep
    };
  }

  // ==========================================
  // M√âTHODES UTILITAIRES
  // ==========================================

  private detectSubIntent(mainIntent: string, message: string): string | undefined {
    const lowerMessage = message.toLowerCase();
    
    switch (mainIntent) {
      case 'product_inquiry':
        if (lowerMessage.includes('r√®gle') || lowerMessage.includes('comment jouer')) return 'rules';
        if (lowerMessage.includes('b√©n√©fice') || lowerMessage.includes('avantage')) return 'benefits';
        if (lowerMessage.includes('pour qui') || lowerMessage.includes('√¢ge')) return 'target_audience';
        break;
      
      case 'purchase_intent':
        if (lowerMessage.includes('rapide') || lowerMessage.includes('express')) return 'express';
        if (lowerMessage.includes('plusieurs') || lowerMessage.includes('lot')) return 'bulk';
        break;
    }
    
    return undefined;
  }

  private getOrderStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'pending': '‚è≥ En attente de paiement',
      'confirmed': '‚úÖ Confirm√©e',
      'processing': 'üì¶ En pr√©paration',
      'shipped': 'üöö Exp√©di√©e',
      'delivered': '‚úÖ Livr√©e',
      'cancelled': '‚ùå Annul√©e'
    };
    
    return statusMap[status] || '‚ùì Statut inconnu';
  }

  private getDeliveryStatusText(order: any): string {
    if (order.status === 'delivered') return 'Livraison termin√©e ‚úÖ';
    if (order.status === 'shipped') return 'En cours de livraison üöö';
    if (order.status === 'processing') return 'Commande en pr√©paration üì¶';
    return 'Pas encore exp√©di√©e';
  }

  private getOrderNextSteps(order: any): string {
    switch (order.status) {
      case 'pending':
        return 'üí≥ Finalisez votre paiement pour que nous puissions traiter votre commande.';
      case 'confirmed':
        return 'üì¶ Votre commande sera bient√¥t pr√©par√©e et exp√©di√©e.';
      case 'processing':
        return 'üöö Votre commande sera exp√©di√©e dans les 24-48h.';
      case 'shipped':
        return 'üì± Le livreur vous contactera pour organiser la r√©ception.';
      case 'delivered':
        return '‚≠ê N\'h√©sitez pas √† nous laisser un avis sur votre exp√©rience !';
      default:
        return '';
    }
  }

  private formatChatMessage(response: AIResponse, context: AIContext): ChatMessage {
    return {
      type: 'assistant',
      content: response.message,
      choices: response.choices,
      assistant: this.botInfo,
      metadata: {
        nextStep: response.nextStep,
        actions: response.actions,
        sessionId: context.sessionId,
        ...response.metadata
      },
      timestamp: new Date().toISOString()
    };
  }

  private createErrorResponse(context: AIContext): ChatMessage {
    return {
      type: 'assistant',
      content: `üòî **D√©sol√©e, j'ai rencontr√© un probl√®me technique.**

Voici vos options :

üìû **Contact imm√©diat :**
WhatsApp : +221 78 136 27 28

üîÑ **R√©essayer :**
Reformulez votre demande

Que pr√©f√©rez-vous ?`,
      choices: [
        'üîÑ R√©essayer',
        'üìû WhatsApp',
        'üè† Retour accueil'
      ],
      assistant: this.botInfo,
      metadata: {
        nextStep: 'error_recovery' as ConversationStep,
        sessionId: context.sessionId,
        error: 'true'
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * üéØ M√âTHODE: Recommander des produits personnalis√©s
   */
  async recommendProducts(
    customerProfile: any,
    currentProductId?: string,
    context?: string
  ): Promise<{ products: any[], reasoning: string }> {
    try {
      const { data: allProducts } = await supabase
        .from('products')
        .select('*')
        .eq('status', 'active')
        .neq('id', currentProductId || '')
        .order('created_at', { ascending: false });

      if (!allProducts || allProducts.length === 0) {
        return {
          products: [],
          reasoning: 'Aucun autre produit disponible pour le moment.'
        };
      }

      // Logique de recommandation bas√©e sur le profil
      let recommendedProducts = allProducts;
      let reasoning = "Voici nos autres jeux qui pourraient vous int√©resser :";

      // Si on a des informations sur le client
      if (customerProfile) {
        // Recommandation bas√©e sur l'historique d'achats
        if (customerProfile.previous_purchases) {
          reasoning = "Bas√© sur vos achats pr√©c√©dents, voici ce que je recommande :";
        }
        
        // Recommandation bas√©e sur l'√¢ge/famille
        if (customerProfile.family_size || context?.includes('famille')) {
          recommendedProducts = allProducts.filter(p => 
            p.target_audience?.includes('famille') || 
            p.category?.includes('famille')
          );
          reasoning = "Pour votre famille, je recommande particuli√®rement :";
        }
      }

      return {
        products: recommendedProducts.slice(0, 3), // Limiter √† 3 recommandations
        reasoning
      };

    } catch (error) {
      console.error('‚ùå Erreur recommandations:', error);
      return {
        products: [],
        reasoning: 'Erreur lors de la r√©cup√©ration des recommandations.'
      };
    }
  }

  /**
   * üì± M√âTHODE: Pr√©senter l'application mobile
   */
  async presentMobileApp(context: AIContext): Promise<AIResponse> {
    return {
      message: `üì± **Application VIENS ON S'CONNA√éT**

üéÆ **Tous vos jeux dans votre poche !**

‚ú® **Fonctionnalit√©s exclusives :**
‚Ä¢ üÉè Acc√®s √† tous vos jeux achet√©s
‚Ä¢ üé≤ Mode hors-ligne disponible
‚Ä¢ üë• Partage avec famille et amis
‚Ä¢ üìä Suivi de vos sessions de jeu
‚Ä¢ üÜï Nouveaux contenus chaque mois

üì≤ **T√©l√©chargement gratuit :**
‚Ä¢ App Store (iOS)
‚Ä¢ Google Play (Android)

üéÅ **Bonus:** 50 questions gratuites √† l'installation !

L'application vous int√©resse-t-elle ?`,
      choices: [
        'üì≤ T√©l√©charger maintenant',
        'üéÆ D\'abord acheter un jeu physique',
        '‚ùì Comment √ßa fonctionne ?'
      ],
      nextStep: 'mobile_app_interest' as ConversationStep,
      actions: ['track_app_interest'],
      metadata: {
        appStoreUrl: 'https://apps.apple.com/viensonseconnait',
        playStoreUrl: 'https://play.google.com/store/apps/viensonseconnait'
      }
    };
  }

  /**
   * üí∞ M√âTHODE: Calculer et pr√©senter les options de paiement
   */
  async presentPaymentOptions(
    orderAmount: number,
    customerCity: string,
    context: AIContext
  ): Promise<AIResponse> {
    
    // R√©cup√©rer les zones de livraison pour calculer les frais
    const { data: deliveryZones } = await supabase
      .from('delivery_zones')
      .select('*');

    const deliveryZone = deliveryZones?.find(zone => 
      zone.cities?.some((city: string) => 
        city.toLowerCase().includes(customerCity.toLowerCase())
      )
    );

    const deliveryFee = deliveryZone?.base_price || 2000;
    const freeDeliveryThreshold = 15000;
    const totalAmount = orderAmount >= freeDeliveryThreshold ? orderAmount : orderAmount + deliveryFee;

    const paymentMethods = [
      {
        name: 'Wave',
        description: 'Paiement mobile instantan√©',
        fees: 0,
        available: true
      },
      {
        name: 'Orange Money',
        description: 'Paiement mobile s√©curis√©',
        fees: Math.floor(totalAmount * 0.01), // 1% de frais
        available: customerCity.toLowerCase().includes('s√©n√©gal')
      },
      {
        name: 'Carte bancaire',
        description: 'Visa, MasterCard accept√©es',
        fees: Math.floor(totalAmount * 0.025), // 2.5% de frais
        available: true
      },
      {
        name: 'Paiement √† la livraison',
        description: 'Esp√®ces ou mobile money',
        fees: 500, // Frais de service
        available: deliveryZone?.cash_on_delivery || false
      }
    ];

    const availableMethods = paymentMethods.filter(method => method.available);

    let paymentMessage = `üí≥ **Options de paiement pour ${totalAmount.toLocaleString()} FCFA**\n\n`;
    
    paymentMessage += `üì¶ **Votre commande:** ${orderAmount.toLocaleString()} FCFA\n`;
    
    if (orderAmount >= freeDeliveryThreshold) {
      paymentMessage += `üöö **Livraison:** GRATUITE ‚ú®\n\n`;
    } else {
      paymentMessage += `üöö **Livraison:** ${deliveryFee.toLocaleString()} FCFA\n\n`;
    }

    paymentMessage += `üí∞ **Moyens de paiement disponibles:**\n\n`;

    availableMethods.forEach(method => {
      const totalWithFees = totalAmount + method.fees;
      paymentMessage += `${method.name === 'Wave' ? '‚≠ê' : '‚Ä¢'} **${method.name}**\n`;
      paymentMessage += `   ${method.description}\n`;
      if (method.fees > 0) {
        paymentMessage += `   Total: ${totalWithFees.toLocaleString()} FCFA (frais: ${method.fees.toLocaleString()} FCFA)\n`;
      } else {
        paymentMessage += `   Total: ${totalWithFees.toLocaleString()} FCFA ‚ú®\n`;
      }
      paymentMessage += `\n`;
    });

    return {
      message: paymentMessage + "Quel mode de paiement pr√©f√©rez-vous ?",
      choices: availableMethods.map(method => 
        method.fees === 0 ? `‚ú® ${method.name}` : method.name
      ),
      nextStep: 'payment_selection' as ConversationStep,
      metadata: {
        orderAmount,
        deliveryFee: orderAmount >= freeDeliveryThreshold ? 0 : deliveryFee,
        totalAmount,
        availableMethods,
        freeDeliveryThreshold
      }
    };
  }

  /**
   * üîÑ M√âTHODE: G√©rer les modifications de commande
   */
  async handleOrderModification(
    orderId: string,
    modificationType: string,
    context: AIContext
  ): Promise<AIResponse> {
    
    try {
      const { data: order, error } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (error || !order) {
        return {
          message: "‚ùå **Commande introuvable**\n\nImpossible de trouver cette commande. V√©rifiez le num√©ro ou contactez notre support.",
          choices: ['üîç V√©rifier le num√©ro', 'üìû Contacter le support', 'üè† Retour accueil'],
          nextStep: 'order_error' as ConversationStep
        };
      }

      // V√©rifier si la modification est possible
      if (['shipped', 'delivered', 'cancelled'].includes(order.status)) {
        return {
          message: `‚ö†Ô∏è **Modification impossible**\n\nVotre commande #${order.id.substring(0, 8)} est ${this.getOrderStatusText(order.status)}.\n\nLes modifications ne sont plus possibles √† ce stade.`,
          choices: ['üìû Contacter le support', 'üÜï Nouvelle commande', 'üè† Retour accueil'],
          nextStep: 'modification_blocked' as ConversationStep
        };
      }

      switch (modificationType) {
        case 'quantity':
          return {
            message: `üì¶ **Modifier la quantit√©**\n\nCommande actuelle: ${JSON.parse(order.order_details)[0]?.quantity || 1} jeu(x)\n\nQuelle nouvelle quantit√© souhaitez-vous ?`,
            choices: ['1 jeu', '2 jeux', '3 jeux', '4 jeux ou plus'],
            nextStep: 'modify_quantity' as ConversationStep,
            metadata: { orderId, currentOrder: order }
          };

        case 'address':
          return {
            message: `üìç **Modifier l'adresse de livraison**\n\nAdresse actuelle: ${order.delivery_address}\n\nVeuillez indiquer votre nouvelle adresse compl√®te :`,
            choices: ['‚úèÔ∏è Saisir nouvelle adresse'],
            nextStep: 'modify_address' as ConversationStep,
            metadata: { orderId, currentOrder: order }
          };

        case 'payment':
          return await this.presentPaymentOptions(
            order.total_amount,
            order.delivery_city || '',
            context
          );

        default:
          return {
            message: `üîß **Que souhaitez-vous modifier ?**\n\nCommande #${order.id.substring(0, 8)}\nMontant: ${order.total_amount.toLocaleString()} FCFA`,
            choices: ['üì¶ Quantit√©', 'üìç Adresse', 'üí≥ Paiement', '‚ùå Annuler commande'],
            nextStep: 'select_modification' as ConversationStep,
            metadata: { orderId, currentOrder: order }
          };
      }

    } catch (error) {
      console.error('‚ùå Erreur modification commande:', error);
      return {
        message: "üòî **Erreur technique**\n\nUne erreur est survenue lors de la modification. Veuillez r√©essayer ou nous contacter.",
        choices: ['üîÑ R√©essayer', 'üìû Contacter le support'],
        nextStep: 'modification_error' as ConversationStep
      };
    }
  }

  /**
   * üìä M√âTHODE: Analyser la conversation pour des insights
   */
  async analyzeConversation(
    sessionId: string,
    messages: ChatMessage[]
  ): Promise<{
    customerProfile: any;
    interests: string[];
    buyingIntent: number;
    recommendedActions: string[];
  }> {
    
    const analysis = {
      customerProfile: {
        communicationStyle: 'formal', // formal, casual, mixed
        decisionSpeed: 'moderate', // fast, moderate, slow
        priceConsciousness: 'moderate', // low, moderate, high
        familyOriented: false,
        techSavvy: false
      },
      interests: [] as string[],
      buyingIntent: 0.5, // 0-1 scale
      recommendedActions: [] as string[]
    };

    // Analyser les messages utilisateur
    const userMessages = messages.filter(m => m.type === 'user');
    const allText = userMessages.map(m => m.content.toLowerCase()).join(' ');

    // Analyser le style de communication
    if (allText.includes('s\'il vous pla√Æt') || allText.includes('merci')) {
      analysis.customerProfile.communicationStyle = 'formal';
    } else if (allText.includes('salut') || allText.includes('üòä')) {
      analysis.customerProfile.communicationStyle = 'casual';
    }

    // Analyser la vitesse de d√©cision
    if (allText.includes('rapidement') || allText.includes('maintenant') || allText.includes('vite')) {
      analysis.customerProfile.decisionSpeed = 'fast';
      analysis.buyingIntent += 0.2;
    }

    // Analyser la sensibilit√© au prix
    if (allText.includes('prix') || allText.includes('co√ªt') || allText.includes('cher')) {
      analysis.customerProfile.priceConsciousness = 'high';
      analysis.buyingIntent -= 0.1;
    }

    // Analyser l'orientation familiale
    if (allText.includes('famille') || allText.includes('enfant') || allText.includes('mari') || allText.includes('√©pouse')) {
      analysis.customerProfile.familyOriented = true;
      analysis.interests.push('family_games');
    }

    // Analyser l'intention d'achat
    const buyingKeywords = ['acheter', 'commander', 'prendre', 'veux', 'int√©resse'];
    const buyingMentions = buyingKeywords.filter(keyword => allText.includes(keyword)).length;
    analysis.buyingIntent += Math.min(0.4, buyingMentions * 0.1);

    // G√©n√©rer des recommandations d'actions
    if (analysis.buyingIntent > 0.7) {
      analysis.recommendedActions.push('propose_immediate_purchase');
      analysis.recommendedActions.push('show_social_proof');
    } else if (analysis.buyingIntent > 0.4) {
      analysis.recommendedActions.push('address_concerns');
      analysis.recommendedActions.push('show_testimonials');
    } else {
      analysis.recommendedActions.push('educate_about_benefits');
      analysis.recommendedActions.push('build_trust');
    }

    if (analysis.customerProfile.familyOriented) {
      analysis.recommendedActions.push('highlight_family_benefits');
    }

    if (analysis.customerProfile.priceConsciousness === 'high') {
      analysis.recommendedActions.push('justify_value');
      analysis.recommendedActions.push('mention_guarantees');
    }

    return analysis;
  }

  /**
   * üéØ M√âTHODE: G√©n√©rer une r√©ponse contextuelle intelligente
   */
  async generateContextualResponse(
    userMessage: string,
    context: AIContext,
    conversationAnalysis: any
  ): Promise<AIResponse> {
    
    const data = await this.gatherContextualData(context, { type: 'contextual' });
    const product = data.currentProduct;
    
    // Adapter la r√©ponse selon le profil du client
    let tone = conversationAnalysis.customerProfile.communicationStyle === 'formal' ? 'professional' : 'friendly';
    let urgency = conversationAnalysis.customerProfile.decisionSpeed === 'fast' ? 'high' : 'moderate';
    
    // Construire une r√©ponse personnalis√©e
    let response = '';
    let choices: string[] = [];
    let nextStep: ConversationStep = 'contextual_response';

    if (conversationAnalysis.buyingIntent > 0.7) {
      // Client tr√®s int√©ress√© - pousser vers l'achat
      response = tone === 'professional' ? 
        `üéØ **Je vois que ${product?.name} vous int√©resse vraiment !**\n\n` :
        `üéØ **Super ! ${product?.name} est exactement ce qu'il vous faut !**\n\n`;
      
      if (urgency === 'high') {
        response += `‚ö° **Commande express disponible** - Finalisez en moins d'1 minute !\n\n`;
        choices = ['‚ö° Commander maintenant', '‚ùì Une derni√®re question', 'üí∞ Voir les prix'];
      } else {
        response += `${product?.description || 'Ce jeu transformera vos relations.'}\n\n`;
        choices = ['üõí Je veux l\'acheter', '‚ùì J\'ai une question', '‚≠ê Voir les avis'];
      }
      
    } else if (conversationAnalysis.buyingIntent > 0.4) {
      // Client moyennement int√©ress√© - lever les objections
      response = `üí° **${product?.name} semble vous int√©resser.**\n\n`;
      
      if (conversationAnalysis.customerProfile.priceConsciousness === 'high') {
        response += `üí∞ **Excellent rapport qualit√©-prix :** ${product?.price.toLocaleString()} FCFA pour transformer vos relations !\n\n`;
        response += `‚ú® **Garantie satisfait ou rembours√© 30 jours**\n\n`;
      }
      
      choices = ['üíù Quels b√©n√©fices exactement ?', '‚≠ê Avis clients', 'üõí Je veux l\'essayer'];
      
    } else {
      // Client peu int√©ress√© - √©duquer et cr√©er l'int√©r√™t
      response = `üåü **Laissez-moi vous expliquer pourquoi ${product?.name} est sp√©cial.**\n\n`;
      response += `‚ú® **Plus de 1 000 familles africaines** ont d√©j√† transform√© leurs relations avec nos jeux !\n\n`;
      
      if (conversationAnalysis.customerProfile.familyOriented) {
        response += `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Parfait pour renforcer les liens familiaux** et cr√©er des souvenirs pr√©cieux.\n\n`;
      }
      
      choices = ['üéÆ Comment √ßa marche ?', 'üíù Quels b√©n√©fices ?', '‚≠ê T√©moignages'];
    }

    // Ajouter la preuve sociale si pertinente
    if (data.recentSalesCount > 0) {
      response += `üî• **${data.recentSalesCount} personnes ont command√© ce mois-ci !**\n\n`;
    }

    return {
      message: response + "Que souhaitez-vous faire ?",
      choices,
      nextStep,
      metadata: {
        personalizedResponse: true,
        buyingIntent: conversationAnalysis.buyingIntent,
        customerProfile: conversationAnalysis.customerProfile
      }
    };
  }
}