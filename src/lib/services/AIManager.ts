// src/lib/services/AIManager.ts - VERSION CORRIG√âE AVEC GPT-4o PLEINEMENT FONCTIONNEL
import { ErrorManager } from './ErrorManager';
import { KnowledgeBaseService } from './KnowledgeBaseService';
import { supabase } from "@/lib/supabase";
import OpenAI from "openai";
import type { 
  CustomerMessage,
  ChatMessage,
  ConversationStep,
  AIResponse,
  OrderData,
  MessageType,
  ProductData
} from '@/types/chat';

const isServer = typeof window === 'undefined';
let openai: OpenAI | null = null;

// ‚úÖ INITIALISER OPENAI AVEC GPT-4o OPTIMIS√â
function initializeOpenAI() {
  if (isServer && process.env.OPENAI_API_KEY) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      timeout: 30000, // 30 secondes timeout
      maxRetries: 2
    });
    console.log('‚úÖ AIManager: OpenAI initialized with GPT-4o optimized settings');
  } else if (isServer) {
    console.error('‚ùå AIManager: OPENAI_API_KEY not found in environment variables');
  }
}

export class AIManager {
  private static instance: AIManager | null = null;
  private readonly errorManager: ErrorManager;
  private readonly knowledgeBase: KnowledgeBaseService;

  private constructor() {
    this.errorManager = ErrorManager.getInstance();
    this.knowledgeBase = KnowledgeBaseService.getInstance();
    if (isServer) {
      initializeOpenAI();
    }
  }

  public static getInstance(): AIManager {
    if (!AIManager.instance) {
      AIManager.instance = new AIManager();
    }
    return AIManager.instance;
  }

  // ‚úÖ M√âTHODE PRINCIPALE CORRIG√âE ET OPTIMIS√âE pour VIENS ON S'CONNA√éT
  async handleProductChatbot(
    message: CustomerMessage,
    productId: string,
    productName: string,
    currentStep: ConversationStep = 'initial',
    orderData: Partial<OrderData> = {}
  ): Promise<AIResponse> {
    try {
      console.log('ü§ñ AIManager processing for VIENS ON S\'CONNA√éT with GPT-4o:', {
        message: message.content.substring(0, 50),
        productId,
        productName: `le jeu ${productName}`,
        currentStep
      });

      // ‚úÖ √âTAPE 1: PRIORIT√â ABSOLUE √Ä GPT-4o
      console.log('üß† PRIORITY: Using GPT-4o FIRST for all messages');
      
      if (!isServer) {
        return this.handleClientSideChat(message, productId, productName, currentStep, orderData);
      }

      // ‚úÖ APPEL DIRECT GPT-4o avec prompt optimis√© VIENS ON S'CONNA√éT
      try {
        const aiResponse = await this.getOptimizedGPTResponse(
          message.content,
          productId,
          productName,
          currentStep,
          orderData
        );

        if (aiResponse && aiResponse.content) {
          console.log('‚úÖ GPT-4o response successful, bypassing knowledge base');
          return aiResponse;
        }
      } catch (gptError) {
        console.warn('‚ö†Ô∏è GPT-4o failed, trying knowledge base fallback:', gptError);
      }

      // ‚úÖ √âTAPE 2: Fallback base de connaissances seulement si GPT-4o √©choue
      const knowledgeResults = await this.knowledgeBase.searchKnowledge(
        message.content,
        productId
      );

      if (knowledgeResults.length > 0 && knowledgeResults[0].relevanceScore > 0.6) {
        const bestMatch = knowledgeResults[0];
        const formattedResponse = this.knowledgeBase.formatResponse(bestMatch, `le jeu ${productName}`);
        
        console.log('‚úÖ Knowledge base fallback used:', {
          confidence: formattedResponse.confidence,
          keywords: bestMatch.matchedKeywords
        });

        return {
          content: formattedResponse.content,
          type: 'assistant',
          choices: formattedResponse.suggestions,
          nextStep: this.determineNextStep(bestMatch.item.category, currentStep),
          metadata: {
            knowledgeBaseUsed: true,
            confidence: formattedResponse.confidence,
            matchedKeywords: bestMatch.matchedKeywords,
            fallbackUsed: true
          }
        };
      }

      // ‚úÖ √âTAPE 3: Fallback intelligent final
      console.log('ü§ñ Using intelligent fallback response');
      return this.createIntelligentFallbackResponse(`le jeu ${productName}`, message.content);

    } catch (error) {
      console.error('‚ùå AIManager critical error:', error);
      return this.createFallbackResponse(`le jeu ${productName}`);
    }
  }

  // ‚úÖ R√âPONSE GPT-4o OPTIMIS√âE avec contexte VIENS ON S'CONNA√éT ENRICHI
  private async getOptimizedGPTResponse(
    messageContent: string,
    productId: string,
    productName: string,
    currentStep: ConversationStep,
    orderData: Partial<OrderData>
  ): Promise<AIResponse> {
    try {
      if (!openai) {
        initializeOpenAI();
        if (!openai) throw new Error('OpenAI not available on server');
      }

      // ‚úÖ R√©cup√©rer les informations compl√®tes du produit
      const productInfo = await this.getComprehensiveProductInfo(productId);
      
      // ‚úÖ Construire le prompt syst√®me optimis√© VIENS ON S'CONNA√éT
      const systemPrompt = this.buildOptimizedVOSCSystemPrompt(productInfo, productName);
      
      console.log('üöÄ Making GPT-4o API call with optimized prompt');
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4o", // ‚úÖ Utiliser explicitement GPT-4o
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: messageContent }
        ],
        temperature: 0.7,
        max_tokens: 400, // ‚úÖ Augment√© pour des r√©ponses plus compl√®tes
        response_format: { type: "json_object" }
      });

      const result = completion.choices[0]?.message?.content;
      if (!result) throw new Error('Empty GPT-4o response');

      const parsed = JSON.parse(result);
      
      console.log('‚úÖ GPT-4o response parsed successfully');
      
      return {
        content: parsed.message || parsed.response || "Je suis l√† pour vous aider !",
        type: 'assistant',
        choices: parsed.choices || [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'J\'ai d\'autres questions'
        ],
        nextStep: (parsed.nextStep as ConversationStep) || currentStep,
        metadata: {
          aiUsed: true,
          gptModel: 'gpt-4o',
          confidence: 0.9,
          productContext: productInfo.name,
          timestamp: new Date().toISOString()
        }
      };

    } catch (error) {
      console.error('‚ùå GPT-4o API error:', error);
      throw error;
    }
  }

  // ‚úÖ PROMPT SYST√àME ULTRA-OPTIMIS√â POUR VIENS ON S'CONNA√éT
  private buildOptimizedVOSCSystemPrompt(productInfo: any, productName: string): string {
    const fullProductName = `le jeu ${productName}`;
    
    return `Tu es Rose, l'assistante commerciale IA experte de VIENS ON S'CONNA√éT, la marque leader de jeux de cartes relationnels au S√©n√©gal et en Afrique.

üéØ MISSION: R√©pondre avec expertise, chaleur et efficacit√© commerciale pour convertir les visiteurs en clients satisfaits.

üìã CONTEXTE MARQUE VIENS ON S'CONNA√éT:
VIENS ON S'CONNA√éT (VOC) r√©volutionne les relations humaines avec des jeux de cartes (physiques + num√©riques) qui cr√©ent des conversations authentiques et renforcent les liens : couples, familles, amis, coll√®gues.

üì¶ PRODUIT ACTUEL:
- Nom: ${fullProductName}
- Prix: ${productInfo.price || '14,000'} FCFA (‚âà 22‚Ç¨)
- Description: ${productInfo.description || 'Jeu de 150 cartes pour renforcer les relations'}
- Public cible: ${productInfo.target_audience || 'Adultes 18+, couples, familles'}
- R√®gles: ${productInfo.game_rules || 'Tirez une carte, lisez la question, r√©pondez sinc√®rement, √©changez'}

üåü CARACT√âRISTIQUES PREMIUM COMMUNES:
- 150 cartes premium (questions + activit√©s + d√©fis)
- Format 63√ó88mm, finition mate, impression locale responsable
- Dur√©e modulable: 15 min (express) √† 2h+ (marathon)
- Livraison: GRATUITE √† Dakar, 2500 FCFA ailleurs au S√©n√©gal
- R√©sultats: Conversations plus profondes d√®s la premi√®re partie

üí° EXPERTISE CONVERSATIONNELLE:
- Tu connais parfaitement tous les jeux VOC et leurs sp√©cificit√©s
- Tu adaptes tes conseils selon le profil relationnel du client
- Tu utilises la psychologie positive pour motiver l'achat
- Tu r√©solves les objections avec empathie et preuves sociales

üé® STYLE DE COMMUNICATION:
- Ton: Chaleureux, professionnel, typiquement s√©n√©galais/africain
- Approche: Consultative et orient√©e b√©n√©fices relationnels
- Structure: R√©ponse experte + question d'engagement + choix pertinents
- √âmojis: Utilis√©s avec parcimonie pour la chaleur humaine

üöÄ R√àGLES ABSOLUES:
1. TOUJOURS dire "le jeu" avant le nom du produit
2. Mettre l'accent sur les b√©n√©fices relationnels concrets
3. Utiliser des exemples concrets et culturellement adapt√©s
4. Finir par une question engageante pour poursuivre la conversation
5. Proposer l'achat ou l'app mobile aux moments opportuns
6. R√©pondre en fran√ßais avec des expressions locales authentiques

üí∞ ARGUMENTS COMMERCIAUX PUISSANTS:
- Investissement dans la qualit√© relationnelle (pas un simple achat)
- Cr√©√© par des experts en psychologie relationnelle
- Test√© et approuv√© par des milliers de couples/familles africains
- Alternative "z√©ro √©cran" aux divertissements digitaux
- Moments de qualit√© garantis d√®s la premi√®re utilisation

üì± ALTERNATIVES DIGITALES:
- App mobile VOC avec tous les jeux + contenu exclusif
- Disponible sur App Store, parfaite pour les d√©placements
- Synchronisation famille/couple possible

‚ö° FORMAT DE R√âPONSE OBLIGATOIRE:
R√©ponds UNIQUEMENT en JSON valide avec cette structure exacte:
{
  "message": "Ta r√©ponse experte et engageante",
  "choices": ["Choix 1 pertinent", "Choix 2 orient√© achat", "Choix 3 informatif"],
  "nextStep": "√©tape_logique_suivante"
}

üéØ OBJECTIF: Chaque r√©ponse doit faire progresser le visiteur vers l'achat ou approfondir sa connaissance du produit pour une conversion future.`;
  }

  // ‚úÖ R√âCUP√âRATION COMPL√àTE DES INFOS PRODUIT avec donn√©es enrichies
  private async getComprehensiveProductInfo(productId: string): Promise<any> {
    try {
      // ‚úÖ R√©cup√©rer toutes les donn√©es produit pertinentes
      const { data: product, error: productError } = await supabase
        .from('products')
        .select(`
          name, 
          description, 
          price, 
          target_audience, 
          game_rules, 
          benefits,
          images,
          rating
        `)
        .eq('id', productId)
        .single();

      if (productError) {
        console.warn('‚ö†Ô∏è Product info error:', productError);
        return { name: 'Produit VOSC', price: 14000 };
      }

      // ‚úÖ R√©cup√©rer les t√©moignages pour enrichir le contexte
      const { data: testimonials } = await supabase
        .from('testimonials')
        .select('content, rating, customer_name')
        .eq('product_id', productId)
        .eq('is_active', true)
        .order('rating', { ascending: false })
        .limit(3);

      // ‚úÖ R√©cup√©rer les stats de vente pour le social proof
      const { data: orders } = await supabase
        .from('orders')
        .select('id')
        .eq('product_id', productId)
        .eq('status', 'confirmed');

      const salesCount = orders?.length || 0;
      const avgRating = testimonials && testimonials.length > 0
        ? testimonials.reduce((sum, t) => sum + t.rating, 0) / testimonials.length
        : (product.rating || 5);

      return {
        ...product,
        salesCount,
        avgRating,
        testimonials: testimonials || [],
        socialProof: `${salesCount} clients satisfaits, note moyenne ${avgRating.toFixed(1)}/5`
      };
      
    } catch (error) {
      console.error('‚ùå Product info comprehensive error:', error);
      return { name: 'Produit VOSC', price: 14000 };
    }
  }

  // ‚úÖ GESTION C√îT√â CLIENT avec contexte enrichi
  private async handleClientSideChat(
    message: CustomerMessage,
    productId: string,
    productName: string,
    currentStep: ConversationStep,
    orderData: Partial<OrderData>
  ): Promise<AIResponse> {
    try {
      console.log('üñ•Ô∏è Client-side GPT-4o call with enhanced context');
      
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: message.content,
          productId,
          productName,
          currentStep,
          orderData,
          sessionId: orderData.session_id || Date.now().toString(),
          storeId: orderData.metadata?.storeId || 'vosc_default',
          forceAI: true, // ‚úÖ FORCER l'utilisation de l'IA
          enhanced: true // ‚úÖ Demander le mode enrichi
        }),
      });

      if (!response.ok) {
        throw new Error(`Chat API failed: ${response.status}`);
      }
      
      const result = await response.json();
      
      return {
        content: result.message || "Je suis l√† pour vous aider !",
        type: 'assistant',
        choices: result.choices || [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'J\'ai d\'autres questions'
        ],
        nextStep: result.nextStep || currentStep,
        metadata: {
          aiUsed: true,
          clientSide: true,
          enhanced: true
        }
      };
      
    } catch (error) {
      console.error('‚ùå Client-side chat error:', error);
      return this.createFallbackResponse(`le jeu ${productName}`);
    }
  }

  // ‚úÖ D√âTERMINER L'√âTAPE SUIVANTE intelligemment
  private determineNextStep(category: string, currentStep: ConversationStep): ConversationStep {
    const stepMap: Record<string, ConversationStep> = {
      'produit': 'product_info_shown',
      'prix': 'price_explained',
      'livraison': 'delivery_info_shown',
      'paiement': 'payment_method',
      'jeu': 'game_rules_shown',
      'regles': 'game_rules_shown',
      'benefices': 'benefits_shown',
      'app': 'app_promotion',
      'testimonials': 'testimonials_shown',
      'couple': 'target_audience_shown',
      'famille': 'target_audience_shown',
      'commande': 'express_quantity'
    };
    
    return stepMap[category] || 'ai_response';
  }

  // ‚úÖ FALLBACK INTELLIGENT CONTEXTUEL
  private createIntelligentFallbackResponse(productName: string, userMessage: string): AIResponse {
    const messageLower = userMessage.toLowerCase();
    
    let content = '';
    let suggestedChoices = [];
    
    if (messageLower.includes('prix') || messageLower.includes('co√ªt')) {
      content = `üí∞ **Prix du ${productName}**\n\n14,000 FCFA avec livraison gratuite √† Dakar ! C'est un investissement dans la qualit√© de vos relations.\n\nQue pensez-vous de ce tarif ?`;
      suggestedChoices = ['Je veux l\'acheter maintenant', 'Comment y jouer ?', 'Voir les t√©moignages'];
    }
    else if (messageLower.includes('livraison')) {
      content = `üöö **Livraison du ${productName}**\n\n‚úÖ GRATUITE √† Dakar (24h)\n‚úÖ 2,500 FCFA ailleurs au S√©n√©gal (48-72h)\n\nDans quelle ville √™tes-vous ?`;
      suggestedChoices = ['Je suis √† Dakar', 'Je veux l\'acheter maintenant', 'Autres questions'];
    }
    else if (messageLower.includes('couple') || messageLower.includes('relation')) {
      content = `üíï **${productName} pour couples**\n\nPerfait pour renforcer votre complicit√© ! Les questions sont con√ßues pour approfondir votre connaissance mutuelle.\n\nDepuis combien de temps √™tes-vous ensemble ?`;
      suggestedChoices = ['Je veux l\'acheter maintenant', 'Comment y jouer ?', 'Voir les t√©moignages'];
    }
    else {
      content = `‚ú® **Excellente question sur ${productName} !**\n\nCe jeu transforme vos conversations ordinaires en moments profonds et authentiques. Des milliers de couples et familles l'adorent !\n\nQue souhaitez-vous savoir ?`;
      suggestedChoices = ['Comment y jouer ?', 'Je veux l\'acheter maintenant', 'J\'ai d\'autres questions'];
    }

    return {
      content,
      type: 'assistant',
      choices: suggestedChoices,
      nextStep: 'intelligent_fallback',
      metadata: {
        intelligentFallback: true,
        contextualResponse: true
      }
    };
  }

  // ‚úÖ R√âPONSE DE FALLBACK FINALE
  private createFallbackResponse(productName: string): AIResponse {
    return {
      content: `‚ú® **Je comprends votre question sur ${productName}**\n\nLaissez-moi vous orienter vers les informations les plus utiles pour vous aider !`,
      type: 'assistant',
      choices: [
        'Comment y jouer ?',
        'Je veux l\'acheter maintenant',
        'Voir les t√©moignages',
        'J\'ai d\'autres questions'
      ],
      nextStep: 'question_redirect',
      metadata: {
        fallbackUsed: true,
        reason: 'AI_processing_failed'
      }
    };
  }
}