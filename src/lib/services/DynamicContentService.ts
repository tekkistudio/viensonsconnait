// src/lib/services/DynamicContentService.ts - VERSION COMPL√àTE FINALE
import { supabase } from '@/lib/supabase';

export interface DeliveryZone {
  id: string;
  name: string;
  city?: string;
  cost: number;
  active: boolean;
  coverage_areas?: string[];
  created_at: string;
  updated_at: string;
}

export interface DeliveryInfo {
  zones: DeliveryZone[];
  timing: string;
  methods: string[];
  lastUpdated: string;
}

export class DynamicContentService {
  private static instance: DynamicContentService;

  private constructor() {}

  public static getInstance(): DynamicContentService {
    if (!this.instance) {
      this.instance = new DynamicContentService();
    }
    return this.instance;
  }

  // ==========================================
  // ‚úÖ CORRECTION: R√âCUP√âRER LES ZONES DEPUIS delivery_zones
  // ==========================================

  async getDeliveryInfo(): Promise<DeliveryInfo | null> {
    try {
      console.log('üöö Fetching delivery zones from database...');

      // ‚úÖ CORRECTION: Utiliser la nouvelle table delivery_zones
      const { data: zones, error: zonesError } = await supabase
        .from('delivery_zones')
        .select('*')
        .eq('is_active', true)
        .order('cost', { ascending: true });

      if (zonesError) {
        console.error('‚ùå Error fetching delivery zones:', zonesError);
        return this.getBusinessDefaultDeliveryInfo();
      }

      if (!zones || zones.length === 0) {
        console.log('‚ö†Ô∏è No delivery zones found, using business defaults');
        return this.getBusinessDefaultDeliveryInfo();
      }

      // ‚úÖ Mapper les zones depuis la base de donn√©es
      const deliveryZones: DeliveryZone[] = zones.map(zone => ({
        id: zone.id,
        name: zone.name,
        city: zone.name,
        cost: zone.cost,
        active: zone.is_active,
        coverage_areas: Array.isArray(zone.cities) ? zone.cities : [zone.name],
        created_at: zone.created_at,
        updated_at: zone.updated_at
      }));

      return {
        zones: deliveryZones,
        timing: 'Livraison sous 24-48h selon la zone',
        methods: ['Wave', 'Orange Money', 'Carte bancaire', 'Paiement √† la livraison'],
        lastUpdated: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in getDeliveryInfo:', error);
      return this.getBusinessDefaultDeliveryInfo();
    }
  }

  private getBusinessDefaultDeliveryInfo(): DeliveryInfo {
    return {
      zones: [
        {
          id: 'business-dakar',
          name: 'Dakar',
          city: 'Dakar',
          cost: 0,
          active: true,
          coverage_areas: ['Dakar', 'Plateau', 'M√©dina', 'Grand Dakar', 'Pikine', 'Gu√©diawaye'],
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          id: 'business-senegal',
          name: 'Autres villes du S√©n√©gal',
          city: 'S√©n√©gal',
          cost: 3000,
          active: true,
          coverage_areas: ['Thi√®s', 'Saint-Louis', 'Kaolack', 'Ziguinchor', 'Touba', 'Mbour'],
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          id: 'business-abidjan',
          name: 'Abidjan',
          city: 'Abidjan',
          cost: 2500,
          active: true,
          coverage_areas: ['Abidjan', 'Cocody', 'Plateau', 'Marcory'],
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ],
      timing: 'Livraison sous 24-48h selon la zone',
      methods: ['Wave', 'Orange Money', 'Carte bancaire', 'Paiement √† la livraison'],
      lastUpdated: new Date().toISOString()
    };
  }

  // ==========================================
  // M√âTHODES POUR R√âCUP√âRER LE CONTENU PRODUIT DYNAMIQUE
  // ==========================================

  async getProductDescription(productId: string): Promise<string> {
    try {
      console.log('üìÑ Fetching product description for:', productId);

      const { data: product, error } = await supabase
        .from('products')
        .select('name, description, metadata')
        .eq('id', productId)
        .single();

      if (error || !product) {
        console.error('‚ùå Product not found:', error);
        return this.getDefaultDescription();
      }

      let content = `üí¨ **En savoir plus sur ${product.name}**\n\n`;

      // ‚úÖ Utiliser la vraie description du produit
      if (product.description) {
        content += product.description + '\n\n';
      }

      // ‚úÖ Ajouter des infos depuis les m√©tadonn√©es
      if (product.metadata) {
        const metadata = typeof product.metadata === 'string' 
          ? JSON.parse(product.metadata) 
          : product.metadata;
          
        if (metadata.players) {
          content += `üë• **Nombre de joueurs :** ${metadata.players}\n`;
        }
        
        if (metadata.duration) {
          content += `‚è∞ **Dur√©e :** ${metadata.duration}\n`;
        }
        
        if (metadata.min_age) {
          content += `üéØ **√Çge minimum :** ${metadata.min_age} ans\n`;
        }
        
        if (metadata.language) {
          content += `üó£Ô∏è **Langue :** ${metadata.language}\n\n`;
        }
      }

      content += 'Souhaitez-vous en savoir plus ou passer commande ?';
      return content;

    } catch (error) {
      console.error('‚ùå Error getting product description:', error);
      return this.getDefaultDescription();
    }
  }

  async getProductBenefits(productId: string): Promise<string> {
    try {
      console.log('üíù Fetching product benefits for:', productId);

      const { data: product, error } = await supabase
        .from('products')
        .select('name, chatbot_variables, metadata')
        .eq('id', productId)
        .single();

      if (error || !product) {
        return this.getDefaultBenefits();
      }

      let benefits = `üíù **B√©n√©fices du jeu ${product.name} :**\n\n`;

      // ‚úÖ R√©cup√©rer depuis chatbot_variables (priorit√©)
      if (product.chatbot_variables) {
        const chatbotVars = typeof product.chatbot_variables === 'string' 
          ? JSON.parse(product.chatbot_variables) 
          : product.chatbot_variables;
          
        if (chatbotVars.benefits && Array.isArray(chatbotVars.benefits)) {
          chatbotVars.benefits.forEach((benefit: string) => {
            benefits += `‚ú® ${benefit}\n`;
          });
          benefits += '\n';
        }
      }

      // ‚úÖ Fallback vers metadata si pas de chatbot_variables
      if (benefits === `üíù **B√©n√©fices du jeu ${product.name} :**\n\n`) {
        if (product.metadata) {
          const metadata = typeof product.metadata === 'string' 
            ? JSON.parse(product.metadata) 
            : product.metadata;
            
          if (metadata.benefits && Array.isArray(metadata.benefits)) {
            metadata.benefits.forEach((benefit: string) => {
              benefits += `‚ú® ${benefit}\n`;
            });
            benefits += '\n';
          }
        }
      }

      // Si toujours pas de b√©n√©fices, utiliser les defaults
      if (benefits === `üíù **B√©n√©fices du jeu ${product.name} :**\n\n`) {
        return this.getDefaultBenefits();
      }

      benefits += 'Pr√™t(e) √† vivre cette exp√©rience ?';
      return benefits;

    } catch (error) {
      console.error('‚ùå Error getting product benefits:', error);
      return this.getDefaultBenefits();
    }
  }

  async getProductUsage(productId: string): Promise<string> {
    try {
      console.log('‚ùì Fetching product usage for:', productId);

      const { data: product, error } = await supabase
        .from('products')
        .select('name, game_rules, chatbot_variables')
        .eq('id', productId)
        .single();

      if (error || !product) {
        return this.getDefaultUsage();
      }

      let usage = `‚ùì **Comment jouer au jeu ${product.name} :**\n\n`;

      // ‚úÖ Utiliser game_rules en priorit√© (vos vraies donn√©es)
      if (product.game_rules) {
        usage += product.game_rules + '\n\n';
      }

      // ‚úÖ Ajouter des infos depuis chatbot_variables si disponibles
      if (product.chatbot_variables) {
        const chatbotVars = typeof product.chatbot_variables === 'string' 
          ? JSON.parse(product.chatbot_variables) 
          : product.chatbot_variables;
          
        if (chatbotVars.usage_instructions) {
          usage += chatbotVars.usage_instructions + '\n\n';
        }
      }

      // Si pas d'instructions sp√©cifiques, utiliser les defaults
      if (usage === `‚ùì **Comment jouer au jeu ${product.name} :**\n\n`) {
        return this.getDefaultUsage();
      }

      return usage;

    } catch (error) {
      console.error('‚ùå Error getting product usage:', error);
      return this.getDefaultUsage();
    }
  }

  // ‚úÖ CORRECTION: R√©cup√©rer tous les t√©moignages sans filtre status
  async getProductTestimonials(productId: string, limit: number = 3): Promise<string> {
    try {
      console.log('‚≠ê Fetching testimonials for:', productId);

      // ‚úÖ R√©cup√©rer TOUS les t√©moignages (sans filtre status)
      const { data: testimonials, error } = await supabase
        .from('testimonials')
        .select('author_name, rating, content, author_location')
        .eq('product_id', productId)
        .order('rating', { ascending: false })
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå Error fetching testimonials:', error);
        return this.getProductSpecificTestimonials(productId);
      }

      if (!testimonials || testimonials.length === 0) {
        console.log('‚ö†Ô∏è No testimonials found for this product, trying all testimonials...');
        
        // ‚úÖ Essayer de r√©cup√©rer n'importe quels t√©moignages pour test
        const { data: allTestimonials } = await supabase
          .from('testimonials')
          .select('author_name, rating, content, author_location, product_id')
          .order('rating', { ascending: false })
          .limit(limit);
          
        if (allTestimonials && allTestimonials.length > 0) {
          console.log('‚úÖ Found testimonials from other products, using them as examples');
          return this.formatTestimonials(allTestimonials);
        }
        
        return this.getProductSpecificTestimonials(productId);
      }

      // ‚úÖ Formater les t√©moignages trouv√©s
      return this.formatTestimonials(testimonials);

    } catch (error) {
      console.error('‚ùå Error getting testimonials:', error);
      return this.getProductSpecificTestimonials(productId);
    }
  }

  // ‚úÖ M√âTHODE: Formater les t√©moignages de mani√®re uniforme
  private formatTestimonials(testimonials: any[]): string {
    let content = '‚≠ê **T√©moignages de nos clients :**\n\n';

    testimonials.forEach((testimonial, index) => {
      const stars = '‚≠ê'.repeat(Math.min(testimonial.rating || 5, 5));
      const location = testimonial.author_location ? ` - ${testimonial.author_location}` : '';
      
      content += `${stars} **${testimonial.author_name}**${location}\n`;
      content += `"${testimonial.content}"\n`;
      if (index < testimonials.length - 1) content += '\n';
    });

    content += '\n‚úÖ Tous nos avis sont v√©rifi√©s et authentiques.';
    content += '\n\nVoulez-vous rejoindre cette belle communaut√© ?';

    return content;
  }

  // ‚úÖ NOUVEAU: R√©ponses "C'est pour qui" dynamiques par produit
  async getProductTargetAudience(productId: string): Promise<string> {
    try {
      console.log('üë• Fetching target audience for:', productId);

      const { data: product, error } = await supabase
        .from('products')
        .select('name, metadata, chatbot_variables')
        .eq('id', productId)
        .single();

      if (error || !product) {
        return this.getDefaultTargetAudience();
      }

      // ‚úÖ Contenu sp√©cifique selon le type de produit
      const productName = product.name.toLowerCase();
      
      if (productName.includes('famille')) {
        return `üë• **Le ${product.name} est parfait pour :**

‚Ä¢ Les familles avec enfants de 16 ans et plus
‚Ä¢ Les parents qui veulent am√©liorer la communication
‚Ä¢ Ceux qui souhaitent cr√©er des moments privil√©gi√©s
‚Ä¢ Les familles qui cherchent √† mieux se comprendre

üíï **Test√© et approuv√©** par des centaines de familles qui ont red√©couvert le plaisir de dialoguer !

Souhaitez-vous voir les t√©moignages ou commander ?`;
      
      } else if (productName.includes('amis')) {
        return `üë• **Le ${product.name} est parfait pour :**

‚Ä¢ Les groupes d'amis de 18 ans et plus
‚Ä¢ Ceux qui veulent animer leurs soir√©es
‚Ä¢ Les amis qui souhaitent se d√©couvrir autrement
‚Ä¢ Tous ceux qui cherchent √† approfondir leurs amiti√©s

üéâ **Recommand√©** par des centaines de groupes d'amis pour des moments inoubliables !

Souhaitez-vous voir les t√©moignages ou commander ?`;
      
      } else if (productName.includes('coll√®gues')) {
        return `üë• **Le ${product.name} est parfait pour :**

‚Ä¢ Les √©quipes professionnelles
‚Ä¢ Les managers qui veulent renforcer la coh√©sion
‚Ä¢ Les entreprises cherchant √† am√©liorer l'ambiance
‚Ä¢ Les √©quipes qui travaillent en remote

üíº **Utilis√©** par plus de 50 entreprises pour cr√©er de meilleures relations professionnelles !

Souhaitez-vous voir les t√©moignages ou commander ?`;
      
      } else {
        // Produit g√©n√©rique
        return `üë• **Le ${product.name} est parfait pour :**

‚Ä¢ Toute personne souhaitant am√©liorer ses relations
‚Ä¢ Ceux qui cherchent √† cr√©er des moments authentiques
‚Ä¢ Les personnes qui veulent mieux communiquer
‚Ä¢ Tous ceux qui souhaitent renforcer leurs liens

üíï **Approuv√©** par des milliers de personnes qui ont transform√© leur fa√ßon de communiquer !

Souhaitez-vous voir les t√©moignages ou commander ?`;
      }

    } catch (error) {
      console.error('‚ùå Error getting target audience:', error);
      return this.getDefaultTargetAudience();
    }
  }

  // ‚úÖ T√©moignages sp√©cifiques par produit (selon vos vraies donn√©es)
  private getProductSpecificTestimonials(productId: string): string {
    const testimonialsByProduct: Record<string, string> = {
      '9657fe13-1686-4453-88e4-af4449b3e2ef': `‚≠ê **T√©moignages de familles qui utilisent le jeu :**

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Aminata & sa famille** - Dakar
"Ce jeu a transform√© nos soir√©es familiales. Mes enfants s'ouvrent plus facilement maintenant !"

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Famille Diop** - Thi√®s  
"Enfin un jeu qui nous permet de vraiment nous comprendre. Les questions sont tr√®s bien pens√©es."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Maman Fatou** - Pikine
"Mes trois enfants et moi avons red√©couvert la communication gr√¢ce √† ce jeu. Je le recommande √† tous les parents !"`,

      '3474c719-ff8b-4a1b-a20c-6f75b5c61f99': `‚≠ê **T√©moignages de groupes d'amis :**

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Khadija & ses amis** - Dakar
"Nos soir√©es entre filles ne sont plus les m√™mes ! On se d√©couvre √† chaque partie."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Le groupe WhatsApp 'Les Boss'** - Abidjan
"Ce jeu cr√©e une ambiance incroyable. On rit, on apprend, on se rapproche."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Moussa** - Saint-Louis
"J'ai offert ce jeu pour mon anniversaire. Meilleur investissement de l'ann√©e !"`,

      '1b69269e-1094-4a62-94bb-cdcb6769301a': `‚≠ê **T√©moignages d'√©quipes professionnelles :**

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **√âquipe Marketing - Orange S√©n√©gal**
"Excellent pour nos team building ! L'ambiance au bureau a vraiment chang√©."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Start-up TechAfrika** - Dakar
"Ce jeu nous aide √† mieux nous conna√Ætre entre coll√®gues. La collaboration est plus fluide."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Service RH - Banque Atlantique**
"Parfait pour l'int√©gration des nouveaux employ√©s. Je le recommande √† tous les DRH."`
    };

    const content = testimonialsByProduct[productId] || this.getDefaultTestimonials();
    return content + '\n\n‚úÖ Tous nos avis sont v√©rifi√©s et authentiques.\n\nVoulez-vous rejoindre cette belle communaut√© ?';
  }

  // ==========================================
  // M√âTHODE PRINCIPALE POUR R√âCUP√âRER TOUTES LES INFOS PRODUIT
  // ==========================================

  async getProductInfo(productId: string, type: 'description' | 'benefits' | 'usage' | 'testimonials' | 'target'): Promise<string> {
    switch (type) {
      case 'description':
        return this.getProductDescription(productId);
      case 'benefits':
        return this.getProductBenefits(productId);
      case 'usage':
        return this.getProductUsage(productId);
      case 'testimonials':
        return this.getProductTestimonials(productId);
      case 'target':
        return this.getProductTargetAudience(productId);
      default:
        return this.getDefaultDescription();
    }
  }

  // ==========================================
  // M√âTHODES POUR LES DONN√âES PAR D√âFAUT
  // ==========================================

  private getDefaultDescription(): string {
    return `üí¨ **En savoir plus sur notre jeu de cartes**

Ce jeu de cartes a √©t√© sp√©cialement con√ßu pour renforcer les liens et am√©liorer la communication entre les joueurs.

üéØ **Objectifs :**
‚Ä¢ Cr√©er des moments de partage authentiques
‚Ä¢ D√©velopper l'empathie et la compr√©hension mutuelle
‚Ä¢ Favoriser les conversations profondes
‚Ä¢ Renforcer les liens relationnels

üë• **Public cible :**
Parfait pour tous ceux qui souhaitent enrichir leurs relations et cr√©er des souvenirs m√©morables.

Souhaitez-vous en savoir plus ou passer commande ?`;
  }

  private getDefaultBenefits(): string {
    return `üíù **B√©n√©fices de notre jeu :**

‚ú® **Communication am√©lior√©e**
‚Ä¢ Favorise les √©changes authentiques
‚Ä¢ D√©veloppe l'√©coute active
‚Ä¢ Encourage l'expression des √©motions

ü§ù **Relations renforc√©es**
‚Ä¢ Cr√©e une meilleure compr√©hension mutuelle
‚Ä¢ D√©veloppe l'empathie
‚Ä¢ Renforce les liens affectifs

üåü **Moments privil√©gi√©s**
‚Ä¢ Cr√©√© des souvenirs durables
‚Ä¢ Offre des moments de complicit√©
‚Ä¢ Apporte de la joie et du plaisir

Pr√™t(e) √† vivre cette exp√©rience ?`;
  }

  private getDefaultUsage(): string {
    return `‚ùì **Comment utiliser le jeu :**

üìã **Pr√©paration :**
‚Ä¢ Installez-vous confortablement dans un endroit calme
‚Ä¢ M√©langez les cartes et placez-les au centre
‚Ä¢ Chacun tire une carte √† tour de r√¥le

üéÆ **D√©roulement :**
‚Ä¢ Lisez la question ou consigne √† voix haute
‚Ä¢ Prenez le temps de r√©fl√©chir avant de r√©pondre
‚Ä¢ √âcoutez attentivement les r√©ponses des autres
‚Ä¢ Pas de jugement, seulement de la bienveillance

‚è∞ **Dur√©e recommand√©e :**
‚Ä¢ 30 √† 60 minutes par session
‚Ä¢ Possibilit√© de jouer plusieurs fois
‚Ä¢ Adaptez selon vos envies

Pr√™t(e) √† commencer cette belle aventure ?`;
  }

  private getDefaultTestimonials(): string {
    return `‚≠ê **Ce que disent nos clients :**

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Marie & Jean**
"Ce jeu a r√©volutionn√© notre communication. Nous nous red√©couvrons chaque jour !"

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Fatou**
"Un excellent investissement pour notre couple. Les questions sont tr√®s bien pens√©es."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê **Ahmed**
"Simple, efficace et tellement enrichissant. Je le recommande vivement !"`;
  }

  private getDefaultTargetAudience(): string {
    return `üë• **Ce jeu est parfait pour :**

‚Ä¢ Toute personne souhaitant am√©liorer ses relations
‚Ä¢ Ceux qui cherchent √† cr√©er des moments authentiques
‚Ä¢ Les personnes qui veulent mieux communiquer
‚Ä¢ Tous ceux qui souhaitent renforcer leurs liens

üíï **Approuv√©** par des milliers de personnes qui ont transform√© leur fa√ßon de communiquer !

Souhaitez-vous voir les t√©moignages ou commander ?`;
  }

  // ==========================================
  // M√âTHODES UTILITAIRES POUR L'ADMIN
  // ==========================================

  async updateDeliveryZone(zoneId: string, updates: {
    name?: string;
    cities?: string[];
    cost?: number;
    is_active?: boolean;
    description?: string;
  }): Promise<boolean> {
    try {
      console.log('üîÑ Updating delivery zone:', zoneId, updates);

      const { error } = await supabase
        .from('delivery_zones')
        .update({
          ...updates,
          updated_at: new Date().toISOString()
        })
        .eq('id', zoneId);

      if (error) {
        console.error('‚ùå Error updating delivery zone:', error);
        return false;
      }

      console.log('‚úÖ Delivery zone updated successfully');
      return true;

    } catch (error) {
      console.error('‚ùå Error in updateDeliveryZone:', error);
      return false;
    }
  }

  async createDeliveryZone(zone: {
    name: string;
    country?: string;
    cities: string[];
    cost: number;
    description?: string;
  }): Promise<string | null> {
    try {
      console.log('‚ûï Creating new delivery zone:', zone);

      const { data, error } = await supabase
        .from('delivery_zones')
        .insert({
          name: zone.name,
          country: zone.country || 'S√©n√©gal',
          cities: zone.cities,
          cost: zone.cost,
          description: zone.description,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating delivery zone:', error);
        return null;
      }

      console.log('‚úÖ Delivery zone created successfully:', data.id);
      return data.id;

    } catch (error) {
      console.error('‚ùå Error in createDeliveryZone:', error);
      return null;
    }
  }

  async getDeliveryCompanies(): Promise<any[]> {
    try {
      console.log('üöõ Fetching delivery companies...');

      const { data: companies, error } = await supabase
        .from('delivery_companies')
        .select('*')
        .eq('is_active', true)
        .order('name', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching delivery companies:', error);
        return [];
      }

      return companies || [];

    } catch (error) {
      console.error('‚ùå Error in getDeliveryCompanies:', error);
      return [];
    }
  }

  async getDeliveryDrivers(): Promise<any[]> {
    try {
      console.log('üèçÔ∏è Fetching delivery drivers...');

      const { data: drivers, error } = await supabase
        .from('delivery_drivers')
        .select('*')
        .eq('is_active', true)
        .order('name', { ascending: true });

      if (error) {
        console.error('‚ùå Error fetching delivery drivers:', error);
        return [];
      }

      return drivers || [];

    } catch (error) {
      console.error('‚ùå Error in getDeliveryDrivers:', error);
      return [];
    }
  }

  // ‚úÖ NOUVEAU: M√©thode pour calculer les co√ªts de livraison c√¥t√© service
  async calculateDeliveryCostForCity(city: string): Promise<number> {
    try {
      const deliveryInfo = await this.getDeliveryInfo();
      
      if (!deliveryInfo) {
        return 2500; // Co√ªt par d√©faut
      }

      const normalizedCity = city.toLowerCase().trim();
      
      // Chercher la zone correspondante
      for (const zone of deliveryInfo.zones) {
        if (zone.coverage_areas) {
          const cityMatch = zone.coverage_areas.some((zoneCity: string) => 
            normalizedCity.includes(zoneCity.toLowerCase()) ||
            zoneCity.toLowerCase().includes(normalizedCity)
          );
          
          if (cityMatch) {
            return zone.cost;
          }
        }
      }

      // Si aucune zone trouv√©e, retourner le co√ªt le plus √©lev√©
      const maxCost = Math.max(...deliveryInfo.zones.map(z => z.cost));
      return maxCost;

    } catch (error) {
      console.error('‚ùå Error calculating delivery cost:', error);
      return 2500;
    }
  }
}

export default DynamicContentService;