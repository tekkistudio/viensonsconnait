// src/lib/services/WelcomeMessageService.ts 

import type { ChatMessage, ConversationStep } from '@/types/chat';
import { supabase } from '@/lib/supabase';

export class WelcomeMessageService {
  private static instance: WelcomeMessageService;

  public static getInstance(): WelcomeMessageService {
    if (!this.instance) {
      this.instance = new WelcomeMessageService();
    }
    return this.instance;
  }

  /**
 * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL DESKTOP 
 */
public generateDesktopWelcomeMessage(
  productName: string,
  sessionId: string,
  productId: string,
  productPrice?: number,
  reviewCount?: number
): ChatMessage {
  console.log('üñ•Ô∏è Generating DESKTOP welcome message with NORMAL choices:', { 
    productName: `${productName}`, 
    sessionId, 
    productId 
  });
  
  return {
    type: 'assistant',
    content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}**. C'est un excellent choix ‚ú®

Comment puis-je vous aider ?`,
    choices: [
      'Je veux l\'acheter maintenant',
      'J\'ai des questions √† poser',
      'Je veux en savoir plus'
    ],
    assistant: {
      name: 'Rose',
      title: 'Assistante d\'achat'
    },
    metadata: {
      nextStep: 'initial_engagement' as ConversationStep,
      productId: productId,
      sessionId: sessionId,
      flags: { 
        isWelcome: true,
        preventAIIntervention: true,
        autoGenerated: true,
        desktopMode: true,
        normalChoicesOnly: true, 
      }
    },
    timestamp: new Date().toISOString()
  };
}

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION MOBILE
   */
  public generateMobileWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number
  ): ChatMessage {
    console.log('üì± Generating MOBILE welcome message for:', { productName: `${productName}`, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}**. C'est un excellent choix ‚ú®

Comment puis-je vous aider ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat',
        avatar: undefined
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          mobileMode: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ M√âTHODE G√âN√âRIQUE - Choisit automatiquement la version selon le contexte
   */
  public generateWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    isMobile: boolean = false
  ): ChatMessage {
    console.log('üåπ Generating welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId, isMobile });
    
    if (isMobile) {
      return this.generateMobileWelcomeMessage(productName, sessionId, productId, productPrice);
    } else {
      return this.generateDesktopWelcomeMessage(productName, sessionId, productId, productPrice);
    }
  }
  
  // ‚úÖ G√àRE LES R√âPONSES AUX BOUTONS D'ACCUEIL - VERSION CORRIG√âE AVEC VRAIES DONN√âES
  public async handleWelcomeButtonResponse(
    choice: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    console.log('üåπ Handling welcome button response:', { choice, productId, productName: `le jeu ${productName}` });

    // ‚úÖ 1. "J'ai des questions √† poser" ‚Üí Mode questions libres activ√©
    if (choice.includes('questions √† poser') || choice.includes('questions')) {
      return {
        type: 'assistant',
        content: `Excellent ! Je suis l√† pour √ßa ‚ò∫Ô∏è

Vous pouvez me poser librement toutes les questions que vous souhaitez au sujet du jeu **${productName}**, de notre marque, de l'application mobile, ou m√™me de nos autres jeux.

Qu'aimeriez-vous savoir ?

PS: *Vous pouvez √©crire votre question ou utiliser le micro* üé§`,
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'free_text_mode' as ConversationStep,
          productId: productId,
          flags: { 
            freeTextEnabled: true,
            questionMode: true,
            openToQuestions: true,
            aiPriorityEnabled: true 
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 2. "Je veux en savoir plus" ‚Üí Description VRAIE depuis la base de donn√©es
    if (choice.includes('savoir plus') || choice.includes('en savoir plus')) {
      try {
        console.log('üìã Fetching REAL product description for:', productId);
        
        // ‚úÖ R√âCUP√âRER LA VRAIE DESCRIPTION depuis la base
        const { data: productInfo, error } = await supabase
          .from('products')
          .select('description, game_rules, target_audience, benefits')
          .eq('id', productId)
          .single();

        if (error) {
          console.error('‚ùå Error fetching product info:', error);
          // Fallback avec description g√©n√©rique
          return this.createGenericProductInfo(productName, productId);
        }

        const description = productInfo.description || `Le **jeu ${productName}** est un jeu de cartes qui transforme vos conversations ordinaires en moments profonds et authentiques de connexion.`;
        
        return {
          type: 'assistant',
          content: `Pas de soucis ! Voici ce qu'il y a √† savoir sur le jeu ${productName}.

${description}

Souhaitez-vous l'acheter maintenant ou savoir comment y jouer ?`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Comment y jouer ?',
            'J\'ai d\'autres questions'
          ],
          assistant: {
            name: 'Rose',
            title: 'Assistante d\'achat'
          },
          metadata: {
            nextStep: 'product_discovery' as ConversationStep,
            productId: productId,
            flags: { 
              discoveryMode: true,
              detailedInfo: true,
              showGameRules: !!productInfo.game_rules,
              showTargetAudience: !!productInfo.target_audience,
              realDataUsed: true
            }
          },
          timestamp: new Date().toISOString()
        };

      } catch (error) {
        console.error('‚ùå Database error:', error);
        return this.createGenericProductInfo(productName, productId);
      }
    }

    // ‚úÖ 3. Gestion des questions sp√©cifiques depuis la description
    if (choice.includes('Comment y jouer')) {
      return await this.handleGameRulesRequest(productId, productName);
    }

    if (choice.includes('Voir les t√©moignages')) {
      return await this.handleTestimonialsRequest(productId, productName);
    }

    // ‚úÖ 4. "Je veux l'acheter maintenant" ‚Üí D√©clenchement du flow express
    if (choice.includes('acheter maintenant') || choice.includes('Je veux l\'acheter')) {
      return {
        type: 'assistant',
        content: `üéâ Super choix ! Je vais prendre votre commande.

Combien d'exemplaires souhaitez-vous acheter ?`,
        choices: [
          '1 exemplaire',
          '2 exemplaires',
          '3 exemplaires', 
          'Autre quantit√©'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'express_quantity' as ConversationStep,
          productId: productId,
          flags: { 
            expressMode: true,
            quantitySelection: true,
            purchaseInitiated: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ Choix non reconnu - Rediriger vers IA
    console.log('ü§ñ Unrecognized choice, using AI to handle:', choice);
    return {
      type: 'assistant',
      content: `J'ai un peu de mal √† suivre. 

Que souhaitez-vous savoir pr√©cis√©ment sur le jeu **${productName}** ? `,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus',
        'Comment y jouer ?'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'ai_response' as ConversationStep,
        productId: productId,
        flags: { 
          aiRedirect: true,
          unrecognizedChoice: true,
          needsAIProcessing: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion des r√®gles du jeu avec VRAIES DONN√âES
  private async handleGameRulesRequest(productId: string, productName: string): Promise<ChatMessage> {
    try {
      console.log('üéÆ Fetching REAL game rules for:', productId);
      
      const { data: productInfo, error } = await supabase
        .from('products')
        .select('game_rules')
        .eq('id', productId)
        .single();

      if (error || !productInfo?.game_rules) {
        console.log('‚ö†Ô∏è No game rules found, using generic rules');
        // R√®gles g√©n√©riques
        return {
          type: 'assistant',
          content: `Voici comment jouer au jeu **${productName}** :

C'est tr√®s simple :

1Ô∏è‚É£ Sortez les 150 cartes et posez-les sur une surface
2Ô∏è‚É£ Tirez une carte chacun √† votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement et √©coutez la r√©ponse de l'autre
5Ô∏è‚É£ √âchangez sur vos r√©ponses

L'objectif de ce jeu est de cr√©er des conversations authentiques et significatives qui vous permettront de mieux vous conna√Ætre, vous comprendre et vous rapprocher.

Il n'y a pas de gagnant ou de perdant, juste des √©changes sinc√®res et bienveillants.

Et il n'y a pas de limite de temps, vous pouvez jouer aussi longtemps que vous le souhaitez.`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Voir les t√©moignages',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'game_rules_shown' as ConversationStep,
            productId: productId,
            flags: { gameRulesShown: true, genericRules: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Utiliser les vraies r√®gles depuis la base
      console.log('‚úÖ Using REAL game rules from database');
      return {
        type: 'assistant',
        content: `Voici comment jouer au jeu ${productName} :

${productInfo.game_rules}

L'objectif de ce jeu est de cr√©er des conversations authentiques et significatives qui vous permettront de mieux vous conna√Ætre, vous comprendre et vous rapprocher.

Il n'y a pas de gagnant ou de perdant, juste des √©changes sinc√®res et bienveillants.

Et il n'y a pas de limite de temps, vous pouvez jouer aussi longtemps que vous le souhaitez.`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Voir les t√©moignages',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'game_rules_shown' as ConversationStep,
          productId: productId,
          flags: { gameRulesShown: true, realDataUsed: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching game rules:', error);
      return this.createGenericGameRules(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion des t√©moignages avec VRAIES DONN√âES
  private async handleTestimonialsRequest(productId: string, productName: string): Promise<ChatMessage> {
    try {
      console.log('‚≠ê Fetching REAL testimonials for:', productId);
      
      const { data: testimonials, error } = await supabase
        .from('testimonials')
        .select('customer_name, content, rating')
        .eq('product_id', productId)
        .eq('is_active', true)
        .order('created_at', { ascending: false })
        .limit(3);

      if (error || !testimonials || testimonials.length === 0) {
        console.log('‚ö†Ô∏è No testimonials found, using generic message');
        return {
          type: 'assistant',
          content: `Les t√©moignages arrivent bient√¥t ! En attendant, je peux vous dire que le jeu ${productName} a d√©j√† aid√© des milliers de personnes √† cr√©er des liens plus forts.

Puis-je vous aider avec autre chose ?`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Comment y jouer ?',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'testimonials_empty' as ConversationStep,
            productId: productId,
            flags: { testimonialsRequested: true, noTestimonials: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // Afficher les vrais t√©moignages
      console.log(`‚úÖ Using ${testimonials.length} REAL testimonials from database`);
      
      const testimonialsText = testimonials.map(t => 
        `**${t.customer_name}** (${t.rating}/5 ‚≠ê)
"${t.content}"`
      ).join('\n\n');

      return {
        type: 'assistant',
        content: `Voici quelques t√©moignages au sujet du jeu ${productName} :

${testimonialsText}

Puis-je vous aider avec autre chose ?`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'testimonials_shown' as ConversationStep,
          productId: productId,
          flags: { testimonialsShown: true, realDataUsed: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching testimonials:', error);
      return this.createGenericTestimonials(productName, productId);
    }
  }

  // ‚úÖ M√âTHODES DE FALLBACK G√âN√âRIQUES

  private createGenericProductInfo(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `Le jeu ${productName} est un jeu de cartes qui transforme vos conversations ordinaires en moments profonds et authentiques de connexion. 
      
      Chaque partie permet de mieux vous conna√Ætre, de renforcer vos liens et de d√©couvrir des facettes insoup√ßonn√©es de l'autre.

**Voici les caract√©ristiques :**

- 150 cartes de questions √† se poser
- Des conversations profondes et bienveillantes
- Un moyen efficace de se d√©connecter pour se reconnecter
- R√©sultats visibles d√®s la premi√®re partie

Puis-je vous aider avec autre chose ?`,
      choices: [
        'Comment y jouer ?',
        'Je veux l\'acheter maintenant',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'product_discovery' as ConversationStep,
        productId: productId,
        flags: { genericFallback: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericGameRules(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `Voici comment jouer au jeu ${productName} :

C'est tr√®s simple :

1Ô∏è‚É£ Sortez les 150 cartes et posez-les sur une surface
2Ô∏è‚É£ Tirez une carte chacun √† votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement et √©coutez la r√©ponse de l'autre
5Ô∏è‚É£ √âchangez sur vos r√©ponses

L'objectif de ce jeu est de cr√©er des conversations authentiques et significatives qui vous permettront de mieux vous conna√Ætre, vous comprendre et vous rapprocher.

Il n'y a pas de gagnant ou de perdant, juste des √©changes sinc√®res et bienveillants.

Et il n'y a pas de limite de temps, vous pouvez jouer aussi longtemps que vous le souhaitez.`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Voir les t√©moignages',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'game_rules_shown' as ConversationStep,
        productId: productId,
        flags: { gameRulesShown: true, genericFallback: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericTestimonials(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

Nos clients adorent ce jeu ! Il a d√©j√† aid√© des centaines de personnes √† cr√©er des liens plus forts au S√©n√©gal et en Afrique.

Les t√©moignages d√©taill√©s arrivent bient√¥t. En attendant, voulez-vous essayer le jeu ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'testimonials_generic' as ConversationStep,
        productId: productId,
        flags: { testimonialsRequested: true, genericFallback: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ V√âRIFIE SI UN MESSAGE EST UNE R√âPONSE AU MESSAGE D'ACCUEIL
   */
  public isWelcomeResponse(message: string): boolean {
    const welcomeResponses = [
      'je veux l\'acheter maintenant',
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'acheter maintenant',
      'questions √† poser',
      'savoir plus'
    ];
    
    return welcomeResponses.some(response => 
      message.toLowerCase().includes(response.toLowerCase())
    );
  }

  /**
   * ‚úÖ G√âN√àRE UN MESSAGE DE R√âCUP√âRATION EN CAS D'ERREUR
   */
  public generateRecoveryMessage(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòä **Pas de souci ! Recommen√ßons.**

Je suis **Rose**, votre assistante d'achat. Mon r√¥le est de vous donner toutes les informations dont vous avez besoin sur le jeu **${productName}** et vous aider √† l'acheter.

Comment puis-je vous aider aujourd'hui ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          isRecovery: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }
}