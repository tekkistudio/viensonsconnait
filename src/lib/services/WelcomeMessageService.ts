// src/lib/services/WelcomeMessageService.ts - VERSION INTELLIGENTE AVEC IA

import type { ChatMessage, ConversationStep } from '@/types/chat';
import { supabase } from '@/lib/supabase';

export class WelcomeMessageService {
  private static instance: WelcomeMessageService;

  public static getInstance(): WelcomeMessageService {
    if (!this.instance) {
      this.instance = new WelcomeMessageService();
    }
    return this.instance;
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION DESKTOP
   */
  public generateDesktopWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    reviewCount?: number
  ): ChatMessage {
    console.log('üñ•Ô∏è Generating DESKTOP welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã **Bonjour ! Je suis Rose, votre Assistante d'achat.**

Je vois que vous vous int√©ressez √† notre **jeu ${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚ùå PAS DE CHOICES ICI - Ils seront g√©r√©s par l'interface desktop
      choices: [],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          desktopMode: true,
          useInterfaceButtons: true // ‚úÖ Flag pour indiquer d'utiliser les boutons de l'interface
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION MOBILE
   */
  public generateMobileWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number
  ): ChatMessage {
    console.log('üì± Generating MOBILE welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã **Bonjour ! Je suis Rose, votre Assistante d'achat.**

Je vois que vous vous int√©ressez √† notre **jeu ${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚úÖ CHOICES POUR MOBILE - Affich√©s dans le chat
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat',
        avatar: undefined
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          mobileMode: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ M√âTHODE G√âN√âRIQUE - Choisit automatiquement la version selon le contexte
   */
  public generateWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    isMobile: boolean = false
  ): ChatMessage {
    console.log('üåπ Generating welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId, isMobile });
    
    if (isMobile) {
      return this.generateMobileWelcomeMessage(productName, sessionId, productId, productPrice);
    } else {
      return this.generateDesktopWelcomeMessage(productName, sessionId, productId, productPrice);
    }
  }
  
  // ‚úÖ G√àRE LES R√âPONSES AUX BOUTONS D'ACCUEIL AVEC IA INTELLIGENTE
  public async handleWelcomeButtonResponse(
    choice: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    console.log('üåπ Handling welcome button response:', { choice, productId, productName: `le jeu ${productName}` });

    // ‚úÖ 1. "J'ai des questions √† poser" ‚Üí Mode questions libres activ√©
    if (choice.includes('questions √† poser') || choice.includes('questions')) {
      return {
        type: 'assistant',
        content: `ü§î **Parfait ! Je suis l√† pour r√©pondre √† toutes vos questions.**

Vous pouvez me poser librement tout ce que vous souhaitez savoir au sujet du **jeu ${productName}**, de la marque VIENS ON S'CONNA√éT, de l'application mobile, ou m√™me de nos autres jeux.

**Quelques exemples :**
- "Comment y jouer exactement ?"
- "Ce jeu est-il adapt√© √† mon couple ?"
- "Combien de temps dure une partie ?"
- "Comment fonctionne la livraison ?"
- "Quels sont les autres jeux disponibles ?"

**Qu'aimeriez-vous savoir ?** üí≠

*Vous pouvez taper votre question ou utiliser le micro üé§*`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui exactement ?',
          'Combien co√ªte la livraison ?',
          'Je veux l\'acheter maintenant'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'free_text_mode' as ConversationStep,
          productId: productId,
          flags: { 
            freeTextEnabled: true,
            questionMode: true,
            openToQuestions: true,
            aiPriorityEnabled: true // ‚úÖ Active la priorit√© IA pour ce mode
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 2. "Je veux en savoir plus" ‚Üí Description INTELLIGENTE avec IA
    if (choice.includes('savoir plus') || choice.includes('en savoir plus')) {
      try {
        console.log('üìã Fetching product data for AI reformulation:', productId);
        
        // ‚úÖ R√âCUP√âRER TOUTES LES DONN√âES du produit
        const { data: productInfo, error } = await supabase
          .from('products')
          .select('description, game_rules, target_audience, benefits, price')
          .eq('id', productId)
          .single();

        if (error) {
          console.error('‚ùå Error fetching product info:', error);
          return this.createGenericProductInfo(productName, productId);
        }

        // ‚úÖ REFORMULATION INTELLIGENTE avec l'IA
        const intelligentDescription = await this.reformulateProductInfo(
          productInfo, 
          productName
        );
        
        return {
          type: 'assistant',
          content: intelligentDescription,
          choices: [
            'Comment y jouer ?',
            'C\'est pour qui ?',
            'Je veux l\'acheter maintenant',
            'Voir les t√©moignages'
          ],
          assistant: {
            name: 'Rose',
            title: 'Assistante d\'achat'
          },
          metadata: {
            nextStep: 'product_discovery' as ConversationStep,
            productId: productId,
            flags: { 
              discoveryMode: true,
              aiReformulated: true,
              detailedInfo: true,
              showGameRules: !!productInfo.game_rules,
              showTargetAudience: !!productInfo.target_audience
            }
          },
          timestamp: new Date().toISOString()
        };

      } catch (error) {
        console.error('‚ùå AI reformulation error:', error);
        return this.createGenericProductInfo(productName, productId);
      }
    }

    // ‚úÖ 3. Gestion des questions sp√©cifiques INTELLIGENTES
    if (choice.includes('Comment y jouer')) {
      return await this.handleGameRulesRequestWithAI(productId, productName);
    }

    if (choice.includes('C\'est pour qui')) {
      return await this.handleTargetAudienceRequestWithAI(productId, productName);
    }

    if (choice.includes('Voir les t√©moignages')) {
      return await this.handleTestimonialsRequestWithAI(productId, productName);
    }

    // ‚úÖ Choix non reconnu - Rediriger
    return {
      type: 'assistant',
      content: `üòÖ **Je n'ai pas bien compris votre choix.**

Pouvez-vous me dire ce qui vous int√©resse le plus au sujet du **jeu ${productName}** ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          retryWelcome: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ NOUVELLE M√âTHODE: Reformulation intelligente avec IA
  private async reformulateProductInfo(
    productInfo: any, 
    productName: string
  ): Promise<string> {
    try {
      console.log('ü§ñ Reformulating product info with AI for:', productName);
      
      // ‚úÖ Cr√©er un prompt sp√©cialis√© pour la reformulation
      const reformulationPrompt = `Tu es Rose, l'assistante commerciale de VIENS ON S'CONNA√éT. 

DONN√âES PRODUIT:
- Nom: le jeu ${productName}
- Description: ${productInfo.description || 'Jeu de 150 cartes pour renforcer les relations'}
- Public cible: ${productInfo.target_audience || 'Couples, familles, amis'}
- Prix: ${productInfo.price || '14,000'} FCFA
- B√©n√©fices: ${productInfo.benefits || 'Conversations authentiques, liens renforc√©s'}

MISSION: Pr√©sente ce jeu de mani√®re chaleureuse et persuasive en MAXIMUM 4 phrases courtes. 
- Utilise le VOUVOIEMENT exclusivement
- Mets l'accent sur les B√âN√âFICES relationnels
- Termine par une question qui pousse vers l'ACHAT
- Utilise des √©mojis appropri√©s mais avec parcimonie
- √âvite les questions qui distraient de l'achat

R√©ponds UNIQUEMENT avec le texte reformul√©, pas de format JSON.`;

      // ‚úÖ Appel √† l'API interne
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: reformulationPrompt,
          productId: productInfo.id || 'generic',
          currentStep: 'ai_reformulation',
          sessionId: Date.now().toString(),
          storeId: 'vosc_default',
          forceAI: true // ‚úÖ Forcer l'utilisation de l'IA
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const reformulatedText = data.message || data.content;
        
        if (reformulatedText && reformulatedText.length > 50) {
          console.log('‚úÖ AI reformulation successful');
          return `‚ú® **D√©couvrons le jeu ${productName} ensemble**\n\n${reformulatedText}`;
        }
      }

      throw new Error('AI reformulation failed');

    } catch (error) {
      console.error('‚ùå AI reformulation error:', error);
      // Fallback avec description am√©lior√©e
      return `‚ú® **D√©couvrons le jeu ${productName} ensemble**

Ce jeu de 150 cartes est con√ßu pour transformer vos conversations ordinaires en moments profonds et authentiques. Il vous permet de cr√©er des liens plus forts avec vos proches, une question √† la fois.

**Pourquoi nos clients l'adorent-ils ?**
üî∏ Conversations plus profondes d√®s la premi√®re partie
üî∏ Moments de complicit√© garantis
üî∏ Adapt√© √† votre situation sp√©cifique

**Souhaitez-vous le commander maintenant ou avez-vous des questions ?**`;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion intelligente des r√®gles du jeu
  private async handleGameRulesRequestWithAI(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: productInfo, error } = await supabase
        .from('products')
        .select('game_rules, target_audience')
        .eq('id', productId)
        .single();

      if (error || !productInfo?.game_rules) {
        // R√®gles g√©n√©riques intelligentes
        return {
          type: 'assistant',
          content: `üéÆ **Comment jouer au jeu ${productName} :**

**C'est tr√®s simple et amusant :**
1Ô∏è‚É£ M√©langez les 150 cartes soigneusement con√ßues
2Ô∏è‚É£ Tirez une carte chacun votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement et sans jugement
5Ô∏è‚É£ √âchangez librement sur vos r√©ponses

üéØ **L'objectif :** Cr√©er des conversations authentiques qui renforcent vos liens !
‚è∞ **Dur√©e :** De 15 minutes (express) √† 2h+ (marathon)

**√ätes-vous pr√™t(e) √† d√©couvrir de nouvelles facettes de vos proches ?**`,
          choices: [
            'Je veux l\'acheter maintenant',
            'C\'est pour qui exactement ?',
            'Voir les t√©moignages',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'game_rules_shown' as ConversationStep,
            productId: productId,
            flags: { gameRulesShown: true, pushToSale: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ Reformuler les vraies r√®gles avec l'IA
      const reformulatedRules = await this.reformulateGameRules(productInfo.game_rules, productName);

      return {
        type: 'assistant',
        content: reformulatedRules,
        choices: [
          'Je veux l\'acheter maintenant',
          'C\'est pour qui exactement ?',
          'Voir les t√©moignages',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'game_rules_shown' as ConversationStep,
          productId: productId,
          flags: { gameRulesShown: true, aiReformulated: true, pushToSale: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching game rules:', error);
      return this.createGenericGameRules(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Reformulation des r√®gles avec IA
  private async reformulateGameRules(originalRules: string, productName: string): Promise<string> {
    try {
      const rulesPrompt = `Tu es Rose, l'assistante commerciale de VIENS ON S'CONNA√éT.

R√àGLES ORIGINALES: ${originalRules}

MISSION: Reformule ces r√®gles de mani√®re chaleureuse et engageante pour le jeu ${productName}.
- Utilise le VOUVOIEMENT exclusivement
- Rends les r√®gles attrayantes et simples
- Ajoute des √©mojis appropri√©s
- Termine par une question qui pousse vers l'ACHAT
- Maximum 5 phrases + question finale
- √âvite les questions qui distraient de l'achat

R√©ponds UNIQUEMENT avec le texte reformul√©.`;

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: rulesPrompt,
          productId: 'rules_reformulation',
          currentStep: 'ai_reformulation',
          sessionId: Date.now().toString(),
          storeId: 'vosc_default',
          forceAI: true
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const reformulated = data.message || data.content;
        
        if (reformulated && reformulated.length > 50) {
          return `üéÆ **Comment jouer au jeu ${productName} :**\n\n${reformulated}`;
        }
      }

      throw new Error('Rules reformulation failed');

    } catch (error) {
      console.error('‚ùå Rules reformulation error:', error);
      return `üéÆ **Comment jouer au jeu ${productName} :**\n\n${originalRules}\n\n**Pr√™t(e) √† commencer cette belle aventure ?**`;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion intelligente du public cible
  private async handleTargetAudienceRequestWithAI(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: productInfo, error } = await supabase
        .from('products')
        .select('target_audience, benefits')
        .eq('id', productId)
        .single();

      if (error || !productInfo?.target_audience) {
        return this.createGenericTargetAudience(productName, productId);
      }

      // ‚úÖ Reformulation intelligente du public cible
      const reformulatedAudience = await this.reformulateTargetAudience(
        productInfo.target_audience, 
        productName,
        productInfo.benefits
      );

      return {
        type: 'assistant',
        content: reformulatedAudience,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'Voir les t√©moignages',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'target_audience_shown' as ConversationStep,
          productId: productId,
          flags: { targetAudienceShown: true, aiReformulated: true, pushToSale: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error handling target audience:', error);
      return this.createGenericTargetAudience(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Reformulation du public cible
  private async reformulateTargetAudience(
    originalAudience: string, 
    productName: string, 
    benefits: string
  ): Promise<string> {
    try {
      const audiencePrompt = `Tu es Rose, l'assistante commerciale de VIENS ON S'CONNA√éT.

PUBLIC CIBLE ORIGINAL: ${originalAudience}
B√âN√âFICES: ${benefits || 'Conversations authentiques, liens renforc√©s'}

MISSION: Reformule de mani√®re persuasive pour qui le jeu ${productName} est parfait.
- Utilise le VOUVOIEMENT exclusivement
- Rends cela personnel et engageant
- Ajoute des √©mojis appropri√©s
- Termine par une question qui pousse vers l'ACHAT
- Maximum 4 phrases + question finale
- Mets l'accent sur les B√âN√âFICES

R√©ponds UNIQUEMENT avec le texte reformul√©.`;

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: audiencePrompt,
          productId: 'audience_reformulation',
          currentStep: 'ai_reformulation',
          sessionId: Date.now().toString(),
          storeId: 'vosc_default',
          forceAI: true
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const reformulated = data.message || data.content;
        
        if (reformulated && reformulated.length > 50) {
          return `üë• **Le jeu ${productName} est parfait pour :**\n\n${reformulated}`;
        }
      }

      throw new Error('Audience reformulation failed');

    } catch (error) {
      console.error('‚ùå Audience reformulation error:', error);
      return `üë• **Le jeu ${productName} est con√ßu pour :**\n\n${originalAudience}\n\n**Cela correspond-il √† votre situation ?**`;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion intelligente des t√©moignages
  private async handleTestimonialsRequestWithAI(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: testimonials, error } = await supabase
        .from('testimonials')
        .select('customer_name, content, rating, author_location')
        .eq('product_id', productId)
        .eq('is_active', true)
        .order('created_at', { ascending: false })
        .limit(3);

      if (error || !testimonials || testimonials.length === 0) {
        return {
          type: 'assistant',
          content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

Nos premiers t√©moignages arrivent bient√¥t ! En attendant, je peux vous dire que ce jeu a d√©j√† conquis de nombreux couples et familles au S√©n√©gal et en Afrique.

**Les retours que nous recevons soulignent :**
üî∏ Des conversations plus profondes d√®s la premi√®re partie
üî∏ Une meilleure compr√©hension mutuelle  
üî∏ Des moments de complicit√© renforc√©s

**Souhaitez-vous √™tre parmi les premiers √† t√©moigner de votre exp√©rience ?**`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Comment y jouer ?',
            'C\'est pour qui ?',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'testimonials_empty' as ConversationStep,
            productId: productId,
            flags: { testimonialsEmpty: true, pushToSale: true }
          },
          timestamp: new Date().toISOString()
        };
      }

      // ‚úÖ Reformulation intelligente des t√©moignages
      const reformulatedTestimonials = await this.reformulateTestimonials(testimonials, productName);

      return {
        type: 'assistant',
        content: reformulatedTestimonials,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'testimonials_shown' as ConversationStep,
          productId: productId,
          flags: { testimonialsShown: true, socialProofShown: true, pushToSale: true }
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching testimonials:', error);
      return this.createGenericTestimonials(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Reformulation des t√©moignages
  private async reformulateTestimonials(testimonials: any[], productName: string): Promise<string> {
    try {
      const testimonialsText = testimonials.map(t => 
        `${t.customer_name} (${t.rating}/5 ‚≠ê) ${t.author_location ? `- ${t.author_location}` : ''}: "${t.content}"`
      ).join('\n');

      const testimonialsPrompt = `Tu es Rose, l'assistante commerciale de VIENS ON S'CONNA√éT.

T√âMOIGNAGES BRUTS:
${testimonialsText}

MISSION: Pr√©sente ces t√©moignages de mani√®re engageante pour le jeu ${productName}.
- Utilise le VOUVOIEMENT exclusivement
- Mets en valeur les b√©n√©fices mentionn√©s
- Ajoute une introduction chaleureuse
- Termine par une question qui pousse vers l'ACHAT
- Maximum 6 lignes + t√©moignages + question finale
- Garde les t√©moignages authentiques mais am√©liore la pr√©sentation

R√©ponds UNIQUEMENT avec le texte reformul√©.`;

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: testimonialsPrompt,
          productId: 'testimonials_reformulation',
          currentStep: 'ai_reformulation',
          sessionId: Date.now().toString(),
          storeId: 'vosc_default',
          forceAI: true
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const reformulated = data.message || data.content;
        
        if (reformulated && reformulated.length > 100) {
          return `‚≠ê **T√©moignages pour le jeu ${productName} :**\n\n${reformulated}`;
        }
      }

      throw new Error('Testimonials reformulation failed');

    } catch (error) {
      console.error('‚ùå Testimonials reformulation error:', error);
      // Fallback avec t√©moignages bruts mais bien pr√©sent√©s
      const testimonialsText = testimonials.map(t => 
        `**${t.customer_name}** (${t.rating}/5 ‚≠ê)${t.author_location ? ` - ${t.author_location}` : ''}\n"${t.content}"`
      ).join('\n\n');

      return `‚≠ê **T√©moignages pour le jeu ${productName} :**

Voici ce que nos clients disent de leur exp√©rience :

${testimonialsText}

**Ces t√©moignages vous donnent-ils envie d'essayer √† votre tour ?**`;
    }
  }

  // ‚úÖ M√âTHODES DE FALLBACK AM√âLIOR√âES avec orientation vente

  private createGenericProductInfo(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚ú® **Le jeu ${productName}**

Un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques. Chaque partie cr√©e des liens plus forts entre les joueurs.

**Pourquoi nos clients l'adorent-ils ?**
üî∏ 150 cartes soigneusement con√ßues pour votre situation
üî∏ Conversations profondes et bienveillantes garanties
üî∏ R√©sultats visibles d√®s la premi√®re partie
üî∏ Adapt√© √† tous les √¢ges et toutes les relations

**Souhaitez-vous le commander maintenant ou avez-vous d'autres questions ?**`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'C\'est pour qui ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'product_discovery' as ConversationStep,
        productId: productId,
        flags: { genericFallback: true, pushToSale: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericGameRules(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üéÆ **Comment jouer au jeu ${productName} :**

**C'est tr√®s simple et amusant :**
1Ô∏è‚É£ M√©langez les 150 cartes soigneusement con√ßues
2Ô∏è‚É£ Tirez une carte chacun votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement et sans jugement
5Ô∏è‚É£ √âchangez librement sur vos r√©ponses

üéØ **L'objectif :** Cr√©er des conversations authentiques qui renforcent vos liens !
‚è∞ **Dur√©e :** De 15 minutes (express) √† 2h+ (marathon)

**√ätes-vous pr√™t(e) √† d√©couvrir de nouvelles facettes de vos proches ?**`,
      choices: [
        'Je veux l\'acheter maintenant',
        'C\'est pour qui ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'game_rules_shown' as ConversationStep,
        productId: productId,
        flags: { gameRulesGeneric: true, pushToSale: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericTargetAudience(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üë• **Le jeu ${productName} est parfait pour :**

‚ù§Ô∏è **Les couples** qui veulent approfondir leur complicit√©
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Les familles** pour cr√©er des liens interg√©n√©rationnels forts  
üë´ **Les amis** qui souhaitent aller au-del√† des conversations superficielles
üíº **Les coll√®gues** pour am√©liorer la coh√©sion d'√©quipe

‚ú® **Peu importe votre √¢ge ou votre situation**, ce jeu s'adapte parfaitement √† vous !

**Cela correspond-il √† ce que vous recherchez ?**`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'target_audience_shown' as ConversationStep,
        productId: productId,
        flags: { targetAudienceGeneric: true, pushToSale: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericTestimonials(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

Nos clients adorent ce jeu ! Il a d√©j√† aid√© de nombreux couples et familles √† cr√©er des liens plus forts au S√©n√©gal et en Afrique.

**Les retours que nous recevons le plus souvent :**
üî∏ "Nous nous d√©couvrons encore apr√®s tant d'ann√©es ensemble"
üî∏ "Les enfants participent avec plaisir aux conversations"
üî∏ "Nos soir√©es entre amis ont pris une nouvelle dimension"

**Souhaitez-vous rejoindre cette communaut√© de personnes qui cultivent leurs relations ?**`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'C\'est pour qui ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'testimonials_generic' as ConversationStep,
        productId: productId,
        flags: { testimonialsGeneric: true, pushToSale: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ V√âRIFIE SI UN MESSAGE EST UNE R√âPONSE AU MESSAGE D'ACCUEIL
   */
  public isWelcomeResponse(message: string): boolean {
    const welcomeResponses = [
      'je veux l\'acheter maintenant',
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'acheter maintenant',
      'questions √† poser',
      'savoir plus'
    ];
    
    return welcomeResponses.some(response => 
      message.toLowerCase().includes(response.toLowerCase())
    );
  }

  /**
   * ‚úÖ G√âN√àRE UN MESSAGE DE R√âCUP√âRATION EN CAS D'ERREUR
   */
  public generateRecoveryMessage(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòä **Pas de souci ! Recommen√ßons.**

Je suis Rose, votre assistante pour le **jeu ${productName}**.

Comment puis-je vous aider aujourd'hui ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          isRecovery: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }
}