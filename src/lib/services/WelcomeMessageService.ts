// src/lib/services/WelcomeMessageService.ts - VERSION CORRIG√âE

import type { ChatMessage, ConversationStep } from '@/types/chat';
import { supabase } from '@/lib/supabase';

export class WelcomeMessageService {
  private static instance: WelcomeMessageService;

  public static getInstance(): WelcomeMessageService {
    if (!this.instance) {
      this.instance = new WelcomeMessageService();
    }
    return this.instance;
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION DESKTOP
   */
  public generateDesktopWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    reviewCount?: number
  ): ChatMessage {
    console.log('üñ•Ô∏è Generating DESKTOP welcome message for:', { productName, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚ùå PAS DE CHOICES ICI - Ils seront g√©r√©s par l'interface desktop
      choices: [],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          desktopMode: true,
          useInterfaceButtons: true // ‚úÖ Flag pour indiquer d'utiliser les boutons de l'interface
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION MOBILE
   */
  public generateMobileWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number
  ): ChatMessage {
    console.log('üì± Generating MOBILE welcome message for:', { productName, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚úÖ CHOICES POUR MOBILE - Affich√©s dans le chat
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat',
        avatar: undefined
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          mobileMode: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ M√âTHODE G√âN√âRIQUE - Choisit automatiquement la version selon le contexte
   */
  public generateWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    isMobile: boolean = false
  ): ChatMessage {
    console.log('üåπ Generating welcome message for:', { productName, sessionId, productId, isMobile });
    
    if (isMobile) {
      return this.generateMobileWelcomeMessage(productName, sessionId, productId, productPrice);
    } else {
      return this.generateDesktopWelcomeMessage(productName, sessionId, productId, productPrice);
    }
  }

  /**
   * ‚úÖ G√àRE LES R√âPONSES AUX BOUTONS D'ACCUEIL
   */
  public async handleWelcomeButtonResponse(
    choice: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    console.log('üåπ Handling welcome button response:', { choice, productId, productName });

    // ‚úÖ CORRECTION: Ne plus traiter "Je veux l'acheter maintenant" ici
    // Cette logique est maintenant g√©r√©e directement dans OptimizedChatService
    
    // ‚úÖ 1. "J'ai des questions √† poser" ‚Üí Mode questions libres
    if (choice.includes('questions √† poser') || choice.includes('questions')) {
      return {
        type: 'assistant',
        content: `ü§î **Parfait ! Posez-moi toutes vos questions.**

Je connais **${productName}** sur le bout des doigts et je peux vous renseigner sur :

‚Ä¢ **Comment y jouer** et les r√®gles
‚Ä¢ **Pour qui** c'est adapt√©
‚Ä¢ **Les b√©n√©fices** concrets
‚Ä¢ **La livraison** et les d√©lais
‚Ä¢ **Tout ce que vous voulez savoir !**

Quelle est votre premi√®re question ?`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Quels sont les b√©n√©fices ?'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'question_mode' as ConversationStep,
          productId: productId,
          flags: { 
            questionMode: true,
            openToQuestions: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 2. "Je veux en savoir plus" ‚Üí Description depuis la DB
    if (choice.includes('savoir plus') || choice.includes('en savoir plus')) {
      const productDescription = await this.getProductDescription(productId);
      
      return {
        type: 'assistant',
        content: `‚ú® **D√©couvrons ${productName} ensemble**

${productDescription}

Que voulez-vous d√©couvrir en premier ?`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Je veux l\'acheter maintenant'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'product_discovery' as ConversationStep,
          productId: productId,
          flags: { 
            discoveryMode: true,
            detailedInfo: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ Choix non reconnu - Rediriger
    return {
      type: 'assistant',
      content: `üòÖ **Je n'ai pas bien compris votre choix.**

Pouvez-vous me dire ce qui vous int√©resse le plus ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          retryWelcome: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ R√âCUP√àRE LA DESCRIPTION PRODUIT DEPUIS LA BASE DE DONN√âES
   */
  private async getProductDescription(productId: string): Promise<string> {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('description, name')
        .eq('id', productId)
        .single();

      if (error || !data) {
        console.error('‚ùå Error fetching product description:', error);
        return 'Un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques.';
      }

      return data.description || `${data.name} est un jeu de cartes con√ßu pour renforcer les liens humains √† travers des conversations significatives.`;
      
    } catch (error) {
      console.error('‚ùå Database error:', error);
      return 'Un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques.';
    }
  }

  /**
   * ‚úÖ V√âRIFIE SI UN MESSAGE EST UNE R√âPONSE AU MESSAGE D'ACCUEIL
   */
  public isWelcomeResponse(message: string): boolean {
    const welcomeResponses = [
      'je veux l\'acheter maintenant',
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'acheter maintenant',
      'questions √† poser',
      'savoir plus'
    ];
    
    return welcomeResponses.some(response => 
      message.toLowerCase().includes(response.toLowerCase())
    );
  }

  /**
   * ‚úÖ G√âN√àRE UN MESSAGE DE R√âCUP√âRATION EN CAS D'ERREUR
   */
  public generateRecoveryMessage(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòä **Pas de souci ! Recommen√ßons.**

Je suis Rose, votre assistante pour **${productName}**.

Comment puis-je vous aider aujourd'hui ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          isRecovery: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }
}