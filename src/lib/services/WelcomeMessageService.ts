// src/lib/services/WelcomeMessageService.ts - VERSION ENTI√àREMENT CORRIG√âE

import type { ChatMessage, ConversationStep } from '@/types/chat';
import { supabase } from '@/lib/supabase';

export class WelcomeMessageService {
  private static instance: WelcomeMessageService;

  public static getInstance(): WelcomeMessageService {
    if (!this.instance) {
      this.instance = new WelcomeMessageService();
    }
    return this.instance;
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION DESKTOP
   */
  public generateDesktopWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    reviewCount?: number
  ): ChatMessage {
    console.log('üñ•Ô∏è Generating DESKTOP welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre **jeu ${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚ùå PAS DE CHOICES ICI - Ils seront g√©r√©s par l'interface desktop
      choices: [],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          desktopMode: true,
          useInterfaceButtons: true // ‚úÖ Flag pour indiquer d'utiliser les boutons de l'interface
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL CORRECT - VERSION MOBILE
   */
  public generateMobileWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number
  ): ChatMessage {
    console.log('üì± Generating MOBILE welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre Assistante d'achat.

Je vois que vous vous int√©ressez √† notre **jeu ${productName}**. C'est excellent ‚ú®

Comment puis-je vous aider ?`,
      // ‚úÖ CHOICES POUR MOBILE - Affich√©s dans le chat
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat',
        avatar: undefined
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true,
          mobileMode: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ M√âTHODE G√âN√âRIQUE - Choisit automatiquement la version selon le contexte
   */
  public generateWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    isMobile: boolean = false
  ): ChatMessage {
    console.log('üåπ Generating welcome message for:', { productName: `le jeu ${productName}`, sessionId, productId, isMobile });
    
    if (isMobile) {
      return this.generateMobileWelcomeMessage(productName, sessionId, productId, productPrice);
    } else {
      return this.generateDesktopWelcomeMessage(productName, sessionId, productId, productPrice);
    }
  }
  
  // ‚úÖ G√àRE LES R√âPONSES AUX BOUTONS D'ACCUEIL - VERSION ENTI√àREMENT CORRIG√âE
  public async handleWelcomeButtonResponse(
    choice: string,
    productId: string,
    productName: string
  ): Promise<ChatMessage> {
    
    console.log('üåπ Handling welcome button response:', { choice, productId, productName: `le jeu ${productName}` });

    // ‚úÖ 1. "J'ai des questions √† poser" ‚Üí Mode questions libres activ√©
    if (choice.includes('questions √† poser') || choice.includes('questions')) {
      return {
        type: 'assistant',
        content: `ü§î **Excellent ! Je suis l√† pour √ßa.**

Vous pouvez me poser librement toutes les questions que vous souhaitez au sujet du **jeu ${productName}**, de la marque VIENS ON S'CONNA√éT, de l'application mobile, ou m√™me de nos autres jeux.

**Quelques exemples :**
- "Comment y jouer exactement ?"
- "Ce jeu est-il adapt√© √† mon couple ?"
- "Combien de temps dure une partie ?"
- "Comment fonctionne la livraison ?"
- "Quels sont les autres jeux disponibles ?"

**Qu'aimeriez-vous savoir ?** üí≠

*Vous pouvez taper votre question ou utiliser le micro üé§*`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui exactement ?',
          'Combien co√ªte la livraison ?',
          'Je veux l\'acheter maintenant'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'free_text_mode' as ConversationStep,
          productId: productId,
          flags: { 
            freeTextEnabled: true,
            questionMode: true,
            openToQuestions: true,
            aiPriorityEnabled: true // ‚úÖ Active la priorit√© IA pour ce mode
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 2. "Je veux en savoir plus" ‚Üí Description depuis la base de donn√©es
    if (choice.includes('savoir plus') || choice.includes('en savoir plus')) {
      try {
        console.log('üìã Fetching product description for:', productId);
        
        // ‚úÖ R√âCUP√âRER LA VRAIE DESCRIPTION depuis la base
        const { data: productInfo, error } = await supabase
          .from('products')
          .select('description, game_rules, target_audience, benefits')
          .eq('id', productId)
          .single();

        if (error) {
          console.error('‚ùå Error fetching product info:', error);
          // Fallback avec description g√©n√©rique
          return this.createGenericProductInfo(productName, productId);
        }

        const description = productInfo.description || `Le **jeu ${productName}** est un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques.`;
        
        return {
          type: 'assistant',
          content: `‚ú® **D√©couvrons le jeu ${productName} ensemble**

${description}

**Que voulez-vous d√©couvrir en premier ?**`,
          choices: [
            'Comment y jouer ?',
            'C\'est pour qui ?',
            'Je veux l\'acheter maintenant',
            'Voir les t√©moignages'
          ],
          assistant: {
            name: 'Rose',
            title: 'Assistante d\'achat'
          },
          metadata: {
            nextStep: 'product_discovery' as ConversationStep,
            productId: productId,
            flags: { 
              discoveryMode: true,
              detailedInfo: true,
              showGameRules: !!productInfo.game_rules,
              showTargetAudience: !!productInfo.target_audience
            }
          },
          timestamp: new Date().toISOString()
        };

      } catch (error) {
        console.error('‚ùå Database error:', error);
        return this.createGenericProductInfo(productName, productId);
      }
    }

    // ‚úÖ 3. Gestion des questions sp√©cifiques depuis la description
    if (choice.includes('Comment y jouer')) {
      return await this.handleGameRulesRequest(productId, productName);
    }

    if (choice.includes('C\'est pour qui')) {
      return await this.handleTargetAudienceRequest(productId, productName);
    }

    if (choice.includes('Voir les t√©moignages')) {
      return await this.handleTestimonialsRequest(productId, productName);
    }

    // ‚úÖ Choix non reconnu - Rediriger
    return {
      type: 'assistant',
      content: `üòÖ **Je n'ai pas bien compris votre choix.**

Pouvez-vous me dire ce qui vous int√©resse le plus au sujet du **jeu ${productName}** ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          retryWelcome: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion des r√®gles du jeu
  private async handleGameRulesRequest(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: productInfo, error } = await supabase
        .from('products')
        .select('game_rules')
        .eq('id', productId)
        .single();

      if (error || !productInfo?.game_rules) {
        // R√®gles g√©n√©riques
        return {
          type: 'assistant',
          content: `üéÆ **Comment jouer au jeu ${productName} :**

**C'est tr√®s simple :**
1Ô∏è‚É£ M√©langez les 150 cartes
2Ô∏è‚É£ Tirez une carte chacun votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement
5Ô∏è‚É£ √âchangez sur vos r√©ponses

üéØ **Objectif :** Cr√©er des conversations authentiques !

‚è∞ **Dur√©e :** 15 min (express) √† 2h+ (marathon)`,
          choices: [
            'Je veux l\'acheter maintenant',
            'C\'est pour qui ?',
            'Voir les t√©moignages',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'game_rules_shown' as ConversationStep,
            productId: productId
          },
          timestamp: new Date().toISOString()
        };
      }

      // Utiliser les vraies r√®gles depuis la base
      return {
        type: 'assistant',
        content: `üéÆ **Comment jouer au jeu ${productName} :**

${productInfo.game_rules}`,
        choices: [
          'Je veux l\'acheter maintenant',
          'C\'est pour qui ?',
          'Voir les t√©moignages',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'game_rules_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching game rules:', error);
      return this.createGenericGameRules(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion du public cible
  private async handleTargetAudienceRequest(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: productInfo, error } = await supabase
        .from('products')
        .select('target_audience')
        .eq('id', productId)
        .single();

      if (error || !productInfo?.target_audience) {
        // Public cible g√©n√©rique
        return {
          type: 'assistant',
          content: `üë• **Le jeu ${productName} est parfait pour :**

‚ù§Ô∏è **Les couples** qui veulent se red√©couvrir
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Les familles** pour cr√©er des liens forts  
üë´ **Les amis** qui veulent approfondir leur amiti√©
üíº **Les coll√®gues** pour la coh√©sion d'√©quipe

‚ú® **Peu importe votre √¢ge**, ce jeu s'adapte √† tous !`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Comment y jouer ?',
            'Voir les t√©moignages',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'target_audience_shown' as ConversationStep,
            productId: productId
          },
          timestamp: new Date().toISOString()
        };
      }

      // Utiliser le vrai public cible depuis la base
      return {
        type: 'assistant',
        content: `üë• **Le jeu ${productName} est con√ßu pour :**

${productInfo.target_audience}`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'Voir les t√©moignages',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'target_audience_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching target audience:', error);
      return this.createGenericTargetAudience(productName, productId);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion des t√©moignages
  private async handleTestimonialsRequest(productId: string, productName: string): Promise<ChatMessage> {
    try {
      const { data: testimonials, error } = await supabase
        .from('testimonials')
        .select('customer_name, content, rating')
        .eq('product_id', productId)
        .eq('is_active', true)
        .limit(3);

      if (error || !testimonials || testimonials.length === 0) {
        return {
          type: 'assistant',
          content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

Les t√©moignages arrivent bient√¥t ! En attendant, je peux vous dire que ce jeu a d√©j√† aid√© des milliers de couples et familles √† cr√©er des liens plus forts.

Voulez-vous en savoir plus sur le jeu ?`,
          choices: [
            'Je veux l\'acheter maintenant',
            'Comment y jouer ?',
            'C\'est pour qui ?',
            'J\'ai d\'autres questions'
          ],
          assistant: { name: 'Rose', title: 'Assistante d\'achat' },
          metadata: {
            nextStep: 'testimonials_empty' as ConversationStep,
            productId: productId
          },
          timestamp: new Date().toISOString()
        };
      }

      // Afficher les vrais t√©moignages
      const testimonialsText = testimonials.map(t => 
        `**${t.customer_name}** (${t.rating}/5 ‚≠ê)
"${t.content}"`
      ).join('\n\n');

      return {
        type: 'assistant',
        content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

${testimonialsText}

Ces t√©moignages vous donnent-ils envie d'essayer ?`,
        choices: [
          'Je veux l\'acheter maintenant',
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'J\'ai d\'autres questions'
        ],
        assistant: { name: 'Rose', title: 'Assistante d\'achat' },
        metadata: {
          nextStep: 'testimonials_shown' as ConversationStep,
          productId: productId
        },
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error fetching testimonials:', error);
      return this.createGenericTestimonials(productName, productId);
    }
  }

  // ‚úÖ M√âTHODES DE FALLBACK G√âN√âRIQUES

  private createGenericProductInfo(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚ú® **Le jeu ${productName}**

Un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques. Chaque partie cr√©e des liens plus forts entre les joueurs.

**Caract√©ristiques :**
- 150 cartes soigneusement con√ßues
- Conversations profondes et bienveillantes
- Adapt√© √† votre situation sp√©cifique
- R√©sultats visibles d√®s la premi√®re partie

**Que voulez-vous d√©couvrir en premier ?**`,
      choices: [
        'Comment y jouer ?',
        'C\'est pour qui ?',
        'Je veux l\'acheter maintenant',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'product_discovery' as ConversationStep,
        productId: productId,
        flags: { genericFallback: true }
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericGameRules(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üéÆ **Comment jouer au jeu ${productName} :**

**C'est tr√®s simple :**
1Ô∏è‚É£ M√©langez les 150 cartes
2Ô∏è‚É£ Tirez une carte chacun votre tour
3Ô∏è‚É£ Lisez la question √† voix haute
4Ô∏è‚É£ R√©pondez sinc√®rement
5Ô∏è‚É£ √âchangez sur vos r√©ponses

üéØ **Objectif :** Cr√©er des conversations authentiques !
‚è∞ **Dur√©e :** 15 min (express) √† 2h+ (marathon)`,
      choices: [
        'Je veux l\'acheter maintenant',
        'C\'est pour qui ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'game_rules_shown' as ConversationStep,
        productId: productId
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericTargetAudience(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üë• **Le jeu ${productName} est parfait pour :**

‚ù§Ô∏è **Les couples** qui veulent se red√©couvrir
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Les familles** pour cr√©er des liens forts  
üë´ **Les amis** qui veulent approfondir leur amiti√©
üíº **Les coll√®gues** pour la coh√©sion d'√©quipe

‚ú® **Peu importe votre √¢ge**, ce jeu s'adapte √† tous !`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'target_audience_shown' as ConversationStep,
        productId: productId
      },
      timestamp: new Date().toISOString()
    };
  }

  private createGenericTestimonials(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `‚≠ê **T√©moignages pour le jeu ${productName} :**

Nos clients adorent ce jeu ! Il a d√©j√† aid√© des milliers de couples et familles √† cr√©er des liens plus forts au S√©n√©gal et en Afrique.

Les t√©moignages d√©taill√©s arrivent bient√¥t. En attendant, voulez-vous essayer le jeu ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'Comment y jouer ?',
        'C\'est pour qui ?',
        'J\'ai d\'autres questions'
      ],
      assistant: { name: 'Rose', title: 'Assistante d\'achat' },
      metadata: {
        nextStep: 'testimonials_generic' as ConversationStep,
        productId: productId
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ V√âRIFIE SI UN MESSAGE EST UNE R√âPONSE AU MESSAGE D'ACCUEIL
   */
  public isWelcomeResponse(message: string): boolean {
    const welcomeResponses = [
      'je veux l\'acheter maintenant',
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'acheter maintenant',
      'questions √† poser',
      'savoir plus'
    ];
    
    return welcomeResponses.some(response => 
      message.toLowerCase().includes(response.toLowerCase())
    );
  }

  /**
   * ‚úÖ G√âN√àRE UN MESSAGE DE R√âCUP√âRATION EN CAS D'ERREUR
   */
  public generateRecoveryMessage(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòä **Pas de souci ! Recommen√ßons.**

Je suis Rose, votre assistante pour le **jeu ${productName}**.

Comment puis-je vous aider aujourd'hui ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          isRecovery: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }
}