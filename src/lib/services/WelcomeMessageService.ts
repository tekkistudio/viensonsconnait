// src/lib/services/WelcomeMessageService.ts - VERSION CORRIG√âE COMPL√àTE

import type { ChatMessage, ConversationStep } from '@/types/chat';

export class WelcomeMessageService {
  private static instance: WelcomeMessageService;

  public static getInstance(): WelcomeMessageService {
    if (!this.instance) {
      this.instance = new WelcomeMessageService();
    }
    return this.instance;
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL INITIAL - VERSION CORRIG√âE
   * Ce message s'affiche automatiquement d√®s l'ouverture du chat
   */
  public generateWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number
  ): ChatMessage {
    console.log('üåπ Generating welcome message for:', { productName, sessionId, productId });
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}** ! C'est excellent ‚ú®

Je peux :
‚Ä¢ Vous aider √† **commander rapidement** (moins de 60 secondes)
‚Ä¢ **R√©pondre √† vos questions**
‚Ä¢ Vous **expliquer** comment y jouer

Que souhaitez-vous faire ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser', 
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat',
        avatar: undefined
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          preventAIIntervention: true,
          autoGenerated: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ G√àRE LES R√âPONSES AUX BOUTONS DU MESSAGE D'ACCUEIL - CORRIG√â
   */
  public handleWelcomeButtonResponse(
    choice: string,
    productId: string,
    productName: string
  ): ChatMessage {
    
    // ‚úÖ 1. "Je veux l'acheter maintenant" ‚Üí Lancer le flow express
    if (choice.includes('acheter maintenant') || choice.includes('acheter')) {
      return {
        type: 'assistant',
        content: `üõí **Parfait ! Commen√ßons votre commande express pour ${productName}**

Pour une commande rapide et efficace, j'ai besoin de quelques informations.

Combien d'exemplaires souhaitez-vous ?`,
        choices: [
          '1 exemplaire',
          '2 exemplaires',
          '3 exemplaires', 
          'Autre quantit√©'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'express_quantity' as ConversationStep,
          productId: productId,
          flags: { 
            expressMode: true,
            quantitySelection: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 2. "J'ai des questions √† poser" ‚Üí Mode questions libres
    if (choice.includes('questions √† poser') || choice.includes('questions')) {
      return {
        type: 'assistant',
        content: `ü§î **Parfait ! Posez-moi toutes vos questions.**

Je connais **${productName}** sur le bout des doigts et je peux vous renseigner sur :

‚Ä¢ **Comment y jouer** et les r√®gles
‚Ä¢ **Pour qui** c'est adapt√©
‚Ä¢ **Les b√©n√©fices** concrets
‚Ä¢ **La livraison** et les d√©lais
‚Ä¢ **Tout ce que vous voulez savoir !**

Quelle est votre premi√®re question ?`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Quels sont les b√©n√©fices ?'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'question_mode' as ConversationStep,
          productId: productId,
          flags: { 
            questionMode: true,
            openToQuestions: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ 3. "Je veux en savoir plus" ‚Üí Informations d√©taill√©es
    if (choice.includes('savoir plus') || choice.includes('en savoir plus')) {
      return {
        type: 'assistant',
        content: `‚ú® **Excellente id√©e ! D√©couvrons ${productName} ensemble**

üéØ **En r√©sum√© :** ${productName} est un jeu de cartes r√©volutionnaire qui transforme vos conversations ordinaires en moments profonds et authentiques.

**üéÆ Comment √ßa marche :**
‚Ä¢ 150 cartes soigneusement con√ßues
‚Ä¢ Questions qui cr√©ent de vraies connexions
‚Ä¢ Adapt√© √† tous les niveaux de relation

**üíù Pourquoi √ßa fonctionne :**
‚Ä¢ Bas√© sur la psychologie des relations
‚Ä¢ Test√© par des centaines de couples/familles
‚Ä¢ R√©sultats visibles d√®s la premi√®re partie

Que voulez-vous d√©couvrir en premier ?`,
        choices: [
          'Comment y jouer ?',
          'C\'est pour qui ?',
          'Je veux l\'acheter maintenant'
        ],
        assistant: {
          name: 'Rose',
          title: 'Assistante d\'achat'
        },
        metadata: {
          nextStep: 'product_discovery' as ConversationStep,
          productId: productId,
          flags: { 
            discoveryMode: true,
            detailedInfo: true
          }
        },
        timestamp: new Date().toISOString()
      };
    }

    // ‚úÖ Choix non reconnu - Rediriger
    return {
      type: 'assistant',
      content: `üòÖ **Je n'ai pas bien compris votre choix.**

Pouvez-vous me dire ce qui vous int√©resse le plus ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          retryWelcome: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ G√âN√àRE UN MESSAGE DE R√âCUP√âRATION EN CAS D'ERREUR
   */
  public generateRecoveryMessage(productName: string, productId: string): ChatMessage {
    return {
      type: 'assistant',
      content: `üòä **Pas de souci ! Recommen√ßons.**

Je suis Rose, votre assistante pour **${productName}**.

Comment puis-je vous aider aujourd'hui ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser',
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        flags: { 
          isRecovery: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‚úÖ V√âRIFIE SI UN MESSAGE EST UNE R√âPONSE AU MESSAGE D'ACCUEIL
   */
  public isWelcomeResponse(message: string): boolean {
    const welcomeResponses = [
      'je veux l\'acheter maintenant',
      'j\'ai des questions √† poser',
      'je veux en savoir plus',
      'acheter maintenant',
      'questions √† poser',
      'savoir plus'
    ];
    
    return welcomeResponses.some(response => 
      message.toLowerCase().includes(response.toLowerCase())
    );
  }

  /**
   * ‚úÖ G√âN√àRE LE MESSAGE D'ACCUEIL POUR DESKTOP AVEC PLUS D'INFOS
   */
  public generateDesktopWelcomeMessage(
    productName: string,
    sessionId: string,
    productId: string,
    productPrice?: number,
    reviewCount?: number
  ): ChatMessage {
    const priceText = productPrice ? `**${productPrice.toLocaleString()} FCFA**` : '';
    const reviewText = reviewCount ? `‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (${reviewCount} avis)` : '';
    
    return {
      type: 'assistant',
      content: `üëã Bonjour ! Je suis **Rose**, votre assistante d'achat.

Je vois que vous vous int√©ressez √† notre jeu **${productName}** ! ${reviewText} C'est excellent ‚ú®

${priceText}

Je peux :
‚Ä¢ Vous aider √† **commander rapidement** (moins de 60 secondes)  
‚Ä¢ **R√©pondre √† vos questions**
‚Ä¢ Vous **expliquer** comment y jouer

Que souhaitez-vous faire ?`,
      choices: [
        'Je veux l\'acheter maintenant',
        'J\'ai des questions √† poser', 
        'Je veux en savoir plus'
      ],
      assistant: {
        name: 'Rose',
        title: 'Assistante d\'achat'
      },
      metadata: {
        nextStep: 'initial_engagement' as ConversationStep,
        productId: productId,
        sessionId: sessionId,
        flags: { 
          isWelcome: true,
          isDesktop: true,
          preventAIIntervention: true,
          autoGenerated: true
        }
      },
      timestamp: new Date().toISOString()
    };
  }
}